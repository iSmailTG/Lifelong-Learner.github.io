<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ismail&#39;s Learning Journey</title>
<link>https://iSmailTG.github.io/Lifelong-Learner.github.io/blog.html</link>
<atom:link href="https://iSmailTG.github.io/Lifelong-Learner.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Tue, 28 Oct 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Learning CPP As Pythonista: Day-3</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/loops_Lesson.html</link>
  <description><![CDATA[ 





<section id="loops-in-c" class="level1">
<h1>Loops in C++:</h1>
<p>Today I learned how to repeat actions in C++ using <code>while</code> and <code>for</code> loops. I practiced printing values multiple times, validating input, summing ranges of numbers, using nested loops for a multiplication table, and even modifying characters inside a string. I also learned how break and continue can control the flow inside a loop.</p>
<section id="repeating-output-with-a-while-loop" class="level2">
<h2 class="anchored" data-anchor-id="repeating-output-with-a-while-loop">Repeating Output with a while Loop</h2>
<p><strong>Concept</strong>: Counter-controlled loop</p>
<p><strong>What it does</strong>: Asks the user how many times to print their name, then uses a while loop to repeat the output.</p>
<p><strong>Key learning</strong>: Loop structure, incrementing counters.</p>
<div id="26ee761b-3d38-4c46-a677-841d151b41c0" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">#include &lt;iostream&gt;</span>
<span id="cb1-2">#include &lt;string&gt;</span>
<span id="cb1-3">#include &lt;cmath&gt;</span>
<span id="cb1-4">using namespace std;</span>
<span id="cb1-5"></span>
<span id="cb1-6">int main()</span>
<span id="cb1-7">{</span>
<span id="cb1-8">  int numberOfIterations;</span>
<span id="cb1-9">  string name;</span>
<span id="cb1-10"></span>
<span id="cb1-11">  cout &lt;&lt; "Enter number of times your name will be printed: " &lt;&lt; endl;</span>
<span id="cb1-12">  cin &gt;&gt; numberOfIterations;</span>
<span id="cb1-13">  cout &lt;&lt; "Enter your name: " &lt;&lt; endl;</span>
<span id="cb1-14">  cin &gt;&gt; name;</span>
<span id="cb1-15"></span>
<span id="cb1-16">  int count = 1;</span>
<span id="cb1-17">  while( count &lt;= numberOfIterations)</span>
<span id="cb1-18">  {</span>
<span id="cb1-19">    cout &lt;&lt; name &lt;&lt; endl;</span>
<span id="cb1-20">    count++;</span>
<span id="cb1-21">  }    </span>
<span id="cb1-22">  return 0;</span>
<span id="cb1-23">}  </span></code></pre></div></div>
</details>
</div>
</section>
<section id="validating-user-input-in-a-loop" class="level2">
<h2 class="anchored" data-anchor-id="validating-user-input-in-a-loop">Validating User Input in a Loop:</h2>
<p><strong>Concept</strong>: Boolean condition control (<code>bool</code> + <code>while</code>)</p>
<p><strong>What it does</strong>: Keeps asking the user a <code>Yes/No</code> question until the correct answer is given.</p>
<p><strong>Key learning</strong>: Using a <strong>flag</strong> (<code>doneYet</code>) to control loop exit, <code>if/else</code> inside a loop.</p>
<div id="a47c6a35-c26c-4cb2-a414-52da3c3e8ca6" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">#include &lt;iostream&gt;</span>
<span id="cb2-2">#include &lt;string&gt;</span>
<span id="cb2-3">#include &lt;cmath&gt;</span>
<span id="cb2-4">using namespace std;</span>
<span id="cb2-5"></span>
<span id="cb2-6">int main()</span>
<span id="cb2-7">{</span>
<span id="cb2-8">  bool doneYet = false;</span>
<span id="cb2-9">  char answer;</span>
<span id="cb2-10"></span>
<span id="cb2-11">  while(!doneYet)</span>
<span id="cb2-12">  {</span>
<span id="cb2-13">    cout &lt;&lt; "Are you Ismail Taghouchti?:(Y or N)  " &lt;&lt; endl;</span>
<span id="cb2-14">    cin &gt;&gt; answer;</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    if(answer == 'Y')</span>
<span id="cb2-17">    {</span>
<span id="cb2-18">      doneYet = true;</span>
<span id="cb2-19">      cout &lt;&lt; "access granted .." &lt;&lt; endl;</span>
<span id="cb2-20">    }</span>
<span id="cb2-21">    else </span>
<span id="cb2-22">    {</span>
<span id="cb2-23">      cout &lt;&lt; "Only Ismail Taghouchti could access." &lt;&lt; endl;</span>
<span id="cb2-24">    }</span>
<span id="cb2-25">    </span>
<span id="cb2-26">  }    </span>
<span id="cb2-27">  return 0;</span>
<span id="cb2-28">}  </span></code></pre></div></div>
</details>
</div>
</section>
<section id="summing-a-range-of-numbers-using-while" class="level2">
<h2 class="anchored" data-anchor-id="summing-a-range-of-numbers-using-while">Summing a Range of Numbers (Using while):</h2>
<p><strong>Concepts</strong>: Input validation + running total</p>
<p><strong>What it does</strong>: Ensures the ending value is larger than the starting value, then calculates the sum step by step.</p>
<p><strong>Key learning</strong>: Nested logic using validation loop followed by a counting accumulation loop.</p>
<div id="c1ed31ce-7843-401b-bb44-a5d7ac8be640" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">#include &lt;iostream&gt;</span>
<span id="cb3-2">#include &lt;string&gt;</span>
<span id="cb3-3">#include &lt;cmath&gt;</span>
<span id="cb3-4">using namespace std;</span>
<span id="cb3-5"></span>
<span id="cb3-6">int main()</span>
<span id="cb3-7">{</span>
<span id="cb3-8">  int startingV;</span>
<span id="cb3-9">  int endingV;</span>
<span id="cb3-10"></span>
<span id="cb3-11">  cout &lt;&lt; "Enter in a starting value: ";</span>
<span id="cb3-12">  cin &gt;&gt; startingV;</span>
<span id="cb3-13"></span>
<span id="cb3-14">  cout &lt;&lt; "Enter in an ending value:  ";</span>
<span id="cb3-15">  cin &gt;&gt; endingV;</span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18">  while( endingV &lt;= startingV)</span>
<span id="cb3-19">  {</span>
<span id="cb3-20">    cout &lt;&lt; "Please enter starting value larger then ending value. Try again." &lt;&lt; endl;</span>
<span id="cb3-21">    cout &lt;&lt; "Enter in a starting value: ";</span>
<span id="cb3-22">    cin  &gt;&gt; startingV;</span>
<span id="cb3-23">    cout &lt;&lt; "Enter in a ending value: " &lt;&lt; endl;</span>
<span id="cb3-24">    cin &gt;&gt; endingV;</span>
<span id="cb3-25">  }</span>
<span id="cb3-26">   </span>
<span id="cb3-27">  int count = startingV + 1;</span>
<span id="cb3-28">  int totalSum = startingV;</span>
<span id="cb3-29">  while(count &lt;= endingV)</span>
<span id="cb3-30">  {</span>
<span id="cb3-31">      cout &lt;&lt; totalSum &lt;&lt; " + " &lt;&lt; count &lt;&lt; " = ";</span>
<span id="cb3-32">      totalSum = totalSum + count;</span>
<span id="cb3-33">      cout &lt;&lt; totalSum &lt;&lt; endl;</span>
<span id="cb3-34">      count ++;</span>
<span id="cb3-35">  }</span>
<span id="cb3-36">    </span>
<span id="cb3-37">  cout &lt;&lt; "The Sum of the numbers from " &lt;&lt; startingV &lt;&lt; " to " &lt;&lt; endingV &lt;&lt; " is ";</span>
<span id="cb3-38">  cout &lt;&lt; totalSum &lt;&lt; endl;</span>
<span id="cb3-39">     </span>
<span id="cb3-40">  return 0;</span>
<span id="cb3-41">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="multiplication-table-nested-loops" class="level2">
<h2 class="anchored" data-anchor-id="multiplication-table-nested-loops">Multiplication Table (Nested Loops):</h2>
<p><strong>Concept</strong>: Nested <code>while</code> loops</p>
<p><strong>What it does</strong>: Prints a full <code>9×9</code> multiplication table by looping rows and columns.</p>
<p><strong>Key learning</strong>: Inner loop runs completely for each iteration of the outer loop.</p>
<div id="bc5a2806-2a3d-4db3-8fa7-4d886444ea05" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">#include &lt;iostream&gt;</span>
<span id="cb4-2">#include &lt;string&gt;</span>
<span id="cb4-3">#include &lt;cmath&gt;</span>
<span id="cb4-4">using namespace std;</span>
<span id="cb4-5"></span>
<span id="cb4-6"></span>
<span id="cb4-7">int main()</span>
<span id="cb4-8">{</span>
<span id="cb4-9">  int left;</span>
<span id="cb4-10">  int right;</span>
<span id="cb4-11">  int product;</span>
<span id="cb4-12">  </span>
<span id="cb4-13"></span>
<span id="cb4-14">  left = 1;</span>
<span id="cb4-15">  while(left &lt; 10)</span>
<span id="cb4-16">  {</span>
<span id="cb4-17">    right = 1;</span>
<span id="cb4-18">    while(right &lt; 10)</span>
<span id="cb4-19">    {</span>
<span id="cb4-20">      product = left * right;</span>
<span id="cb4-21">      cout &lt;&lt; left &lt;&lt; "X" &lt;&lt; right &lt;&lt; "=" &lt;&lt; product &lt;&lt; " ";</span>
<span id="cb4-22">      right++;</span>
<span id="cb4-23">    }</span>
<span id="cb4-24">    left++;</span>
<span id="cb4-25">    cout &lt;&lt; endl;</span>
<span id="cb4-26">  }</span>
<span id="cb4-27"></span>
<span id="cb4-28">  return 0;</span>
<span id="cb4-29">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="summing-a-range-of-numbers-using-for" class="level2">
<h2 class="anchored" data-anchor-id="summing-a-range-of-numbers-using-for">Summing a Range of Numbers (Using for)</h2>
<p><strong>Concept</strong>: Comparison between <code>for</code> and <code>while</code> for counting</p>
<p><strong>What it does</strong>: Same task as Program 3, but uses a for loop for cleaner counting logic.</p>
<p><strong>Key learning</strong>: When iteration count is known → for loop is simpler and more readable.</p>
<div id="6f93f9c7-d146-4e7b-8ac1-0ba5eebab687" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">#include &lt;iostream&gt;</span>
<span id="cb5-2">#include &lt;string&gt;</span>
<span id="cb5-3">using namespace std;</span>
<span id="cb5-4"></span>
<span id="cb5-5">int main()</span>
<span id="cb5-6">{</span>
<span id="cb5-7">  int startingV;</span>
<span id="cb5-8">  int endingV;</span>
<span id="cb5-9">  int sum;</span>
<span id="cb5-10">  </span>
<span id="cb5-11">  cout &lt;&lt; "Enter in starting value: " &lt;&lt; endl;</span>
<span id="cb5-12">  cin &gt;&gt; startingV;</span>
<span id="cb5-13"></span>
<span id="cb5-14">  cout &lt;&lt; "Enter in endingV: " &lt;&lt; endl;</span>
<span id="cb5-15">  cin &gt;&gt; endingV;</span>
<span id="cb5-16"></span>
<span id="cb5-17">  while(endingV &lt; startingV)</span>
<span id="cb5-18">  {</span>
<span id="cb5-19">    cout &lt;&lt; "The ending value must be greater than or equal to starting value " &lt;&lt; startingV &lt;&lt; "Please enter again: "&lt;&lt; endl;</span>
<span id="cb5-20">    cin &gt;&gt; startingV;</span>
<span id="cb5-21"></span>
<span id="cb5-22">    cout &lt;&lt; "Enter in ending value: " &lt;&lt; endl;</span>
<span id="cb5-23">    cin  &gt;&gt; endingV;</span>
<span id="cb5-24"></span>
<span id="cb5-25">  }    </span>
<span id="cb5-26">  sum = startingV;</span>
<span id="cb5-27">  for(int count = startingV + 1; count &lt;= endingV; count++)</span>
<span id="cb5-28">  {</span>
<span id="cb5-29">    cout &lt;&lt; sum &lt;&lt; " + " &lt;&lt; count &lt;&lt; " = ";</span>
<span id="cb5-30">    sum = sum + count;</span>
<span id="cb5-31">    cout &lt;&lt; sum &lt;&lt; endl;</span>
<span id="cb5-32">  </span>
<span id="cb5-33">  }</span>
<span id="cb5-34">  cout &lt;&lt; "the summation of numbers from " &lt;&lt; startingV &lt;&lt; " to " &lt;&lt; endingV &lt;&lt; " is: " &lt;&lt; sum &lt;&lt; endl;</span>
<span id="cb5-35">  return 0;</span>
<span id="cb5-36">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="capitalizing-letters-after-spaces" class="level2">
<h2 class="anchored" data-anchor-id="capitalizing-letters-after-spaces">Capitalizing Letters After Spaces:</h2>
<p><strong>Concept</strong>: Looping through strings using indexes</p>
<p><strong>What it does</strong>: Detects spaces and capitalizes the next character.</p>
<p><strong>Key learning</strong>: Boolean flag (<code>isCap</code>) + character processing using <code>toupper()</code>.</p>
<div id="1dfd633e-0f78-4218-adc8-fcd25c51216a" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">#include &lt;iostream&gt;</span>
<span id="cb6-2">#include &lt;string&gt;</span>
<span id="cb6-3">using namespace std;</span>
<span id="cb6-4"></span>
<span id="cb6-5">int main()</span>
<span id="cb6-6">{</span>
<span id="cb6-7">  string sentence = "Today was a bit sunny.";</span>
<span id="cb6-8">  cout &lt;&lt; sentence &lt;&lt; endl;</span>
<span id="cb6-9">  cout &lt;&lt; "After Capitalization: " &lt;&lt; endl;</span>
<span id="cb6-10">  bool isCap = false;</span>
<span id="cb6-11">  for(int i=0; i &lt; sentence.length(); i++)</span>
<span id="cb6-12">  {</span>
<span id="cb6-13">    if(isCap)</span>
<span id="cb6-14">    {</span>
<span id="cb6-15">      char capL = toupper(sentence[i]);</span>
<span id="cb6-16">      cout &lt;&lt; capL;</span>
<span id="cb6-17">      isCap = false;</span>
<span id="cb6-18">    }</span>
<span id="cb6-19">    else </span>
<span id="cb6-20">    {</span>
<span id="cb6-21">      cout &lt;&lt; sentence[i];</span>
<span id="cb6-22">    }</span>
<span id="cb6-23">    if(sentence[i] == ' ')</span>
<span id="cb6-24">    {</span>
<span id="cb6-25">      isCap = true;</span>
<span id="cb6-26">    }</span>
<span id="cb6-27">      </span>
<span id="cb6-28">  }</span>
<span id="cb6-29">  cout &lt;&lt; endl;</span>
<span id="cb6-30">  return 0;</span>
<span id="cb6-31">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="using-break-and-continue" class="level2">
<h2 class="anchored" data-anchor-id="using-break-and-continue">Using break and continue:</h2>
<p><strong>Concept</strong>: Loop flow control</p>
<p><strong>What it does</strong>: Loops from 0 to 49 but:</p>
<p><code>continue</code> skips printing even numbers</p>
<p><code>break</code> stops when <code>i == 21</code></p>
<p><strong>Key learning</strong>: Adjusting loop behavior without changing loop condition.</p>
<div id="9d778d37-6afd-493a-b314-3e488f5437e8" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">#include &lt;iostream&gt;</span>
<span id="cb7-2">#include &lt;string&gt;</span>
<span id="cb7-3">using namespace std;</span>
<span id="cb7-4"></span>
<span id="cb7-5"></span>
<span id="cb7-6">int main()</span>
<span id="cb7-7">{</span>
<span id="cb7-8">  for(int i = 0; i &lt; 50; i++)</span>
<span id="cb7-9">  {</span>
<span id="cb7-10">    if(i == 21)</span>
<span id="cb7-11">    {</span>
<span id="cb7-12">      break;</span>
<span id="cb7-13">    }  </span>
<span id="cb7-14"></span>
<span id="cb7-15">    if(i % 2 == 0)</span>
<span id="cb7-16">    {</span>
<span id="cb7-17">      continue;</span>
<span id="cb7-18">    }  </span>
<span id="cb7-19">    cout &lt;&lt; i &lt;&lt; endl;</span>
<span id="cb7-20">  }  </span>
<span id="cb7-21">  return 0;  </span>
<span id="cb7-22">}</span></code></pre></div></div>
</details>
</div>
</section>
</section>
<section id="summarization" class="level1">
<h1>Summarization:</h1>
<p>Loops make it possible to automate repetitive tasks and control how many times something runs. This session helped me understand both <code>while</code> and <code>for</code> loops, and when it makes sense to use each one.</p>
<p>Next time, I will continue building on this foundation by learning <strong><code>arrays</code></strong>.</p>


</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/loops_Lesson.html</guid>
  <pubDate>Tue, 28 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning CPP As Pythonista: Day-3</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/loopsLesson.html</link>
  <description><![CDATA[ 





<section id="loops-in-c" class="level1">
<h1>Loops in C++:</h1>
<p>Today I learned how to repeat actions in C++ using <code>while</code> and <code>for</code> loops. I practiced printing values multiple times, validating input, summing ranges of numbers, using nested loops for a multiplication table, and even modifying characters inside a string. I also learned how break and continue can control the flow inside a loop.</p>
<section id="repeating-output-with-a-while-loop" class="level2">
<h2 class="anchored" data-anchor-id="repeating-output-with-a-while-loop">Repeating Output with a while Loop</h2>
<p><strong>Concept</strong>: Counter-controlled loop</p>
<p><strong>What it does</strong>: Asks the user how many times to print their name, then uses a while loop to repeat the output.</p>
<p><strong>Key learning</strong>: Loop structure, incrementing counters.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numberOfIterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">  string name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter number of times your name will be printed: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> numberOfIterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your name: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> numberOfIterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-18">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-19">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">    count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-21">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>    </span>
<span id="cb1-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span></code></pre></div></div>
</section>
<section id="validating-user-input-in-a-loop" class="level2">
<h2 class="anchored" data-anchor-id="validating-user-input-in-a-loop">Validating User Input in a Loop:</h2>
<p><strong>Concept</strong>: Boolean condition control (<code>bool</code> + <code>while</code>)</p>
<p><strong>What it does</strong>: Keeps asking the user a <code>Yes/No</code> question until the correct answer is given.</p>
<p><strong>Key learning</strong>: Using a <strong>flag</strong> (<code>doneYet</code>) to control loop exit, <code>if/else</code> inside a loop.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> doneYet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> answer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>doneYet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-12">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-13">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are you Ismail Taghouchti?:(Y or N)  "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> answer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-18">      doneYet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-19">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"access granted .."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> </span>
<span id="cb2-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-23">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Only Ismail Taghouchti could access."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-25">    </span>
<span id="cb2-26">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>    </span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span></code></pre></div></div>
</section>
<section id="summing-a-range-of-numbers-using-while" class="level2">
<h2 class="anchored" data-anchor-id="summing-a-range-of-numbers-using-while">Summing a Range of Numbers (Using while):</h2>
<p><strong>Concepts</strong>: Input validation + running total</p>
<p><strong>What it does</strong>: Ensures the ending value is larger than the starting value, then calculates the sum step by step.</p>
<p><strong>Key learning</strong>: Nested logic using validation loop followed by a counting accumulation loop.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in a starting value: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in an ending value:  "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-15">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> endingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-19">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-20">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter starting value larger then ending value. Try again."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-21">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in a starting value: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">    cin  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in a ending value: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-25">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-26">   </span>
<span id="cb3-27">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> startingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-31">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" + "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-32">      totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-33">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">      count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb3-35">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-36">    </span>
<span id="cb3-37">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Sum of the numbers from "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> startingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> totalSum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-39">     </span>
<span id="cb3-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="multiplication-table-nested-loops" class="level2">
<h2 class="anchored" data-anchor-id="multiplication-table-nested-loops">Multiplication Table (Nested Loops):</h2>
<p><strong>Concept</strong>: Nested <code>while</code> loops</p>
<p><strong>What it does</strong>: Prints a full <code>9×9</code> multiplication table by looping rows and columns.</p>
<p><strong>Key learning</strong>: Inner loop runs completely for each iteration of the outer loop.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> product<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">  </span>
<span id="cb4-13"></span>
<span id="cb4-14">  left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-16">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-17">    right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-20">      product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-21">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-22">      right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb4-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24">    left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb4-25">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-26">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-27"></span>
<span id="cb4-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="summing-a-range-of-numbers-using-for" class="level2">
<h2 class="anchored" data-anchor-id="summing-a-range-of-numbers-using-for">Summing a Range of Numbers (Using for)</h2>
<p><strong>Concept</strong>: Comparison between <code>for</code> and <code>while</code> for counting</p>
<p><strong>What it does</strong>: Same task as Program 3, but uses a for loop for cleaner counting logic.</p>
<p><strong>Key learning</strong>: When iteration count is known → for loop is simpler and more readable.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-10">  </span>
<span id="cb5-11">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in starting value: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-13"></span>
<span id="cb5-14">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in endingV: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-15">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>endingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-18">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-19">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The ending value must be greater than or equal to starting value "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> startingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter again: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-20">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-21"></span>
<span id="cb5-22">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in ending value: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-23">    cin  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>    </span>
<span id="cb5-26">  sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> startingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> startingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> endingV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb5-28">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-29">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" + "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-30">    sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-31">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-32">  </span>
<span id="cb5-33">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-34">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the summation of numbers from "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> startingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endingV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="capitalizing-letters-after-spaces" class="level2">
<h2 class="anchored" data-anchor-id="capitalizing-letters-after-spaces">Capitalizing Letters After Spaces:</h2>
<p><strong>Concept</strong>: Looping through strings using indexes</p>
<p><strong>What it does</strong>: Detects spaces and capitalizes the next character.</p>
<p><strong>Key learning</strong>: Boolean flag (<code>isCap</code>) + character processing using <code>toupper()</code>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-7">  string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today was a bit sunny."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After Capitalization: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> isCap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb6-12">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isCap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> capL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toupper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb6-16">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> capL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-17">      isCap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> </span>
<span id="cb6-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-21">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-25">      isCap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-27">      </span>
<span id="cb6-28">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-29">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="using-break-and-continue" class="level2">
<h2 class="anchored" data-anchor-id="using-break-and-continue">Using break and continue:</h2>
<p><strong>Concept</strong>: Loop flow control</p>
<p><strong>What it does</strong>: Loops from 0 to 49 but:</p>
<p><code>continue</code> skips printing even numbers</p>
<p><code>break</code> stops when <code>i == 21</code></p>
<p><strong>Key learning</strong>: Adjusting loop behavior without changing loop condition.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb7-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb7-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span>
<span id="cb7-14"></span>
<span id="cb7-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span>
<span id="cb7-19">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-20">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span>
<span id="cb7-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  </span>
<span id="cb7-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
</section>
<section id="summarization" class="level1">
<h1>Summarization:</h1>
<p>Loops make it possible to automate repetitive tasks and control how many times something runs. This session helped me understand both <code>while</code> and <code>for</code> loops, and when it makes sense to use each one.</p>
<p>Next time, I will continue building on this foundation by learning <strong><code>arrays</code></strong>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"></code></pre></div></div>


<!-- -->

</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/loopsLesson.html</guid>
  <pubDate>Tue, 28 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning CPP As Pythonista: Day-2</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basicsLesson2.html</link>
  <description><![CDATA[ 





<section id="even-odd" class="level2">
<h2 class="anchored" data-anchor-id="even-odd">Even || Odd</h2>
<ul>
<li><code>%</code> gives the remainder of division, perfect for checking parity.</li>
<li>A boolean variable like <code>iseven</code> stores true/false logic.</li>
<li><code>if/else</code> chooses which message to display.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a Number: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bool</span> iseven <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>iseven<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-15">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-16">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is an even number"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb1-19">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-20">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is an odd number"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="weekly-payout" class="level2">
<h2 class="anchored" data-anchor-id="weekly-payout">Weekly Payout:</h2>
<ul>
<li>Simple payroll logic with overtime calculation.</li>
<li>Hours above 40 are paid at <em>1.5x</em> the regular rate.</li>
<li>Read multiple inputs from the user and compute the result.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb2-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> hourPerWeek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> payPerHour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10">  string name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> weekPayout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many Hours did you work last week: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-14">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> hourPerWeek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-15">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How much you earn per hour: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> payPerHour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-17">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's your name: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hourPerWeek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-21">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-22">    weekPayout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hourPerWeek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> payPerHour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-23">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" earned "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> weekPayout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$$."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-26">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-27">    weekPayout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>payPerHour <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>hourPerWeek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>payPerHour <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)));</span></span>
<span id="cb2-28">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  earned "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> weekPayout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$$."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-29">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="water-temperature" class="level2">
<h2 class="anchored" data-anchor-id="water-temperature">Water Temperature:</h2>
<ul>
<li>Nested <code>if</code> statements help handle several rules inside one category.</li>
<li>Logical OR <code>||</code> checks if the scale is either C or F.</li>
<li>Different boiling/freezing points for Celsius vs Fahrenheit.</li>
<li>Provide feedback for invalid input.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> tempScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter in the temperature: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter temperature scale ( C or F ): "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> tempScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span> tempScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> tempScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-16">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tempScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">32.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-20">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-21">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Water will turn to ice at "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" F degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">        </span>
<span id="cb3-23">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">212.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-25">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-26">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Water will turn to steam at "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" F degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-27"></span>
<span id="cb3-28">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-30">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-31">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Water will stay liquid at "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" F degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-32">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-33">    </span>
<span id="cb3-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-38">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-39">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Water will turn to ice at "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" C degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-40">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-41">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb3-42">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-43">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Water will turn to steam at "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-44">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-45">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-47">        cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"water will stay liquid at "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C degrees."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-48">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-50">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> </span>
<span id="cb3-52">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-53">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You entered an invalid temperature scale. Please run the program again."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-54">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-56"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="number-of-the-day-if-else-if" class="level2">
<h2 class="anchored" data-anchor-id="number-of-the-day-if-else-if">Number of the Day (If / else if):</h2>
<ul>
<li>Chain of <code>else if</code> to match a specific number with its weekday.</li>
<li>Demonstrates grouping conditions like weekend vs weekday.</li>
<li>A good example where many comparisons might get messy.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb4-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// slightly different version of switch.cpp</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// using || and &amp;&amp; and adding weekend </span></span>
<span id="cb4-9"></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> dayNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-14">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number day (1 Sunday, 2 Monday, 3 Tuesday .. etc"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> dayNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You selected "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17">  </span>
<span id="cb4-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-19">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-20">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sunday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-21"></span>
<span id="cb4-22">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-24">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-25">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-26">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-28">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-29">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuesday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-32">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-33">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wednesday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-34">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-35">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-36">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-37">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thursday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-38">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-40">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-41">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Friday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-42">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-43">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-44">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-45">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saturday. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-46">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-47">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb4-48">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a valid day. "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-49"></span>
<span id="cb4-50"></span>
<span id="cb4-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-52">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-53">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a weekend."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-54">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> dayNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-56">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-57">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a weekday."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-58">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-59">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-60"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="number-of-the-day-switch" class="level2">
<h2 class="anchored" data-anchor-id="number-of-the-day-switch">Number of the Day (switch):</h2>
<ul>
<li><code>switch</code> is a cleaner choice for fixed numeric options.</li>
<li>Each <code>case</code> handles one specific value.</li>
<li><code>break</code> prevents “falling through” to the next case.</li>
<li><code>default</code> is like the <code>else</code> of switch statements.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb5-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// same as what I did in switch.cpp but now I will use swith instead of if statements.</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb5-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> dayNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-10">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number day ( 1 for Sunday, 2 Monday, 3 Tuesday ...etc)"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-11">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> dayNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12">  </span>
<span id="cb5-13"></span>
<span id="cb5-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dayNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-15">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-17">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sunday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-20">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-23">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuesday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-26">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wednesday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-27">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-29">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thursday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-30">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-32">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Friday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-33">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-35">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saturday. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-36">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-38">      cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"an invalid day. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-39">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-41"></span>
<span id="cb5-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
</section>
<section id="day-2-summarization" class="level2">
<h2 class="anchored" data-anchor-id="day-2-summarization">Day 2 Summarization :</h2>
<p>Here is what I achieved:</p>
<ul>
<li><p>I learned the <strong><code>if</code> statement</strong>, the first building block of logical decision-making.</p></li>
<li><p>I used <strong>comparison operators</strong> like <code>==</code>, <code>&lt;=</code>, and <code>&gt;=</code> to evaluate conditions.</p></li>
<li><p>I combined conditions using logical operators such as <code>||</code> and <code>&amp;&amp;</code>.</p></li>
<li><p>I controlled program behavior with <strong><code>if</code> / <code>else</code> / <code>else if</code></strong> chains for multiple outcomes.</p></li>
<li><p>I explored <strong><code>switch</code></strong> as a cleaner option for specific numeric cases.</p></li>
<li><p>I wrote several mini programs with real-world logic:</p>
<ul>
<li>Even or odd number checker</li>
<li>Weekly pay calculator with overtime</li>
<li>Water state detector (ice, liquid, steam)</li>
<li>Day-of-the-week selector (two versions)</li>
</ul></li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basicsLesson2.html</guid>
  <pubDate>Thu, 23 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning CPP As Pythonista: Day-2</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basics_Lesson2.html</link>
  <description><![CDATA[ 





<section id="even-odd" class="level2">
<h2 class="anchored" data-anchor-id="even-odd">Even || Odd</h2>
<ul>
<li><code>%</code> gives the remainder of division, perfect for checking parity.</li>
<li>A boolean variable like <code>iseven</code> stores true/false logic.</li>
<li><code>if/else</code> chooses which message to display.</li>
</ul>
<div id="7b1b3490-3b90-4fe1-b174-e639933ba9f7" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">#include &lt;iostream&gt;</span>
<span id="cb1-2">#include &lt;string&gt;</span>
<span id="cb1-3">#include &lt;cmath&gt;</span>
<span id="cb1-4">using namespace std;</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7">int main()</span>
<span id="cb1-8">{</span>
<span id="cb1-9">  int number;</span>
<span id="cb1-10">  cout &lt;&lt; "Please enter a Number: " &lt;&lt; endl;</span>
<span id="cb1-11">  cin &gt;&gt; number;</span>
<span id="cb1-12"></span>
<span id="cb1-13">  bool iseven = number % 2 == 0;</span>
<span id="cb1-14">  if(iseven)</span>
<span id="cb1-15">  {</span>
<span id="cb1-16">    cout &lt;&lt; number &lt;&lt; " is an even number" &lt;&lt; endl;</span>
<span id="cb1-17">  }</span>
<span id="cb1-18">  else</span>
<span id="cb1-19">  {</span>
<span id="cb1-20">    cout &lt;&lt; number &lt;&lt; " is an odd number" &lt;&lt; endl;</span>
<span id="cb1-21">  }</span>
<span id="cb1-22"></span>
<span id="cb1-23">  return 0;</span>
<span id="cb1-24">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="weekly-payout" class="level2">
<h2 class="anchored" data-anchor-id="weekly-payout">Weekly Payout:</h2>
<ul>
<li>Simple payroll logic with overtime calculation.</li>
<li>Hours above 40 are paid at <em>1.5x</em> the regular rate.</li>
<li>Read multiple inputs from the user and compute the result.</li>
</ul>
<div id="fc485557-457a-4272-ad7f-8f7918662f13" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">#include &lt;iostream&gt;</span>
<span id="cb2-2">#include &lt;string&gt;</span>
<span id="cb2-3">#include &lt;cmath&gt;</span>
<span id="cb2-4">using namespace std;</span>
<span id="cb2-5"></span>
<span id="cb2-6">int main()</span>
<span id="cb2-7">{</span>
<span id="cb2-8">  float hourPerWeek;</span>
<span id="cb2-9">  float payPerHour;</span>
<span id="cb2-10">  string name;</span>
<span id="cb2-11">  float weekPayout;</span>
<span id="cb2-12"></span>
<span id="cb2-13">  cout &lt;&lt; "How many Hours did you work last week: " &lt;&lt; endl;</span>
<span id="cb2-14">  cin &gt;&gt; hourPerWeek;</span>
<span id="cb2-15">  cout &lt;&lt; "How much you earn per hour: " &lt;&lt; endl;</span>
<span id="cb2-16">  cin &gt;&gt; payPerHour;</span>
<span id="cb2-17">  cout &lt;&lt; "What's your name: " &lt;&lt; endl;</span>
<span id="cb2-18">  cin &gt;&gt; name;</span>
<span id="cb2-19"></span>
<span id="cb2-20">  if(hourPerWeek &lt;= 40.0)</span>
<span id="cb2-21">  {</span>
<span id="cb2-22">    weekPayout = hourPerWeek * payPerHour;</span>
<span id="cb2-23">    cout &lt;&lt; name &lt;&lt; " earned " &lt;&lt; weekPayout &lt;&lt; "$$." &lt;&lt; endl;</span>
<span id="cb2-24">  }</span>
<span id="cb2-25">  else:</span>
<span id="cb2-26">  {</span>
<span id="cb2-27">    weekPayout = ((payPerHour * 40.0) + ((hourPerWeek - 40) * (payPerHour * 1.5)));</span>
<span id="cb2-28">    cout &lt;&lt; name &lt;&lt; "  earned " &lt;&lt; weekPayout &lt;&lt; "$$." &lt;&lt; endl;</span>
<span id="cb2-29">  }</span>
<span id="cb2-30">  return 0;</span>
<span id="cb2-31">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="water-temperature" class="level2">
<h2 class="anchored" data-anchor-id="water-temperature">Water Temperature:</h2>
<ul>
<li>Nested <code>if</code> statements help handle several rules inside one category.</li>
<li>Logical OR <code>||</code> checks if the scale is either C or F.</li>
<li>Different boiling/freezing points for Celsius vs Fahrenheit.</li>
<li>Provide feedback for invalid input.</li>
</ul>
<div id="0cc4d279-d9e4-4ee0-bb27-387f4fb8ec05" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">#include &lt;iostream&gt;</span>
<span id="cb3-2">#include &lt;string&gt;</span>
<span id="cb3-3">#include &lt;cmath&gt;</span>
<span id="cb3-4">using namespace std;</span>
<span id="cb3-5"></span>
<span id="cb3-6">int main()</span>
<span id="cb3-7">{</span>
<span id="cb3-8">  float temp;</span>
<span id="cb3-9">  char tempScale;</span>
<span id="cb3-10">  cout &lt;&lt; "Enter in the temperature: " &lt;&lt; endl;</span>
<span id="cb3-11">  cin &gt;&gt; temp;</span>
<span id="cb3-12">  cout &lt;&lt; "Enter temperature scale ( C or F ): " &lt;&lt; endl;</span>
<span id="cb3-13">  cin &gt;&gt; tempScale;</span>
<span id="cb3-14"></span>
<span id="cb3-15">  if( tempScale == 'C' || tempScale == 'F')</span>
<span id="cb3-16">  {</span>
<span id="cb3-17">    if(tempScale == 'F')</span>
<span id="cb3-18">    {</span>
<span id="cb3-19">      if(temp &lt;= 32.0)</span>
<span id="cb3-20">      {</span>
<span id="cb3-21">        cout &lt;&lt; "Water will turn to ice at "&lt;&lt;temp&lt;&lt; " F degrees." &lt;&lt; endl;</span>
<span id="cb3-22">        </span>
<span id="cb3-23">      }</span>
<span id="cb3-24">      else if(temp &gt;= 212.0)</span>
<span id="cb3-25">      {</span>
<span id="cb3-26">        cout &lt;&lt; "Water will turn to steam at " &lt;&lt;temp&lt;&lt; " F degrees." &lt;&lt; endl;</span>
<span id="cb3-27"></span>
<span id="cb3-28">      }</span>
<span id="cb3-29">      else</span>
<span id="cb3-30">      {</span>
<span id="cb3-31">        cout &lt;&lt; "Water will stay liquid at " &lt;&lt; temp&lt;&lt; " F degrees." &lt;&lt; endl;</span>
<span id="cb3-32">      }</span>
<span id="cb3-33">    </span>
<span id="cb3-34">    }</span>
<span id="cb3-35">    else</span>
<span id="cb3-36">    {</span>
<span id="cb3-37">      if(temp &lt;= 0.0)</span>
<span id="cb3-38">      {</span>
<span id="cb3-39">        cout &lt;&lt; "Water will turn to ice at " &lt;&lt; temp &lt;&lt; " C degrees." &lt;&lt; endl;</span>
<span id="cb3-40">      }</span>
<span id="cb3-41">      else if(temp &gt;= 100.0)</span>
<span id="cb3-42">      {</span>
<span id="cb3-43">        cout &lt;&lt; "Water will turn to steam at " &lt;&lt; temp &lt;&lt; "C degrees." &lt;&lt; endl;</span>
<span id="cb3-44">      }</span>
<span id="cb3-45">      else</span>
<span id="cb3-46">      {</span>
<span id="cb3-47">        cout &lt;&lt; "water will stay liquid at " &lt;&lt; temp &lt;&lt; "C degrees." &lt;&lt; endl;</span>
<span id="cb3-48">      }</span>
<span id="cb3-49">    }</span>
<span id="cb3-50">  }</span>
<span id="cb3-51">  else </span>
<span id="cb3-52">  {</span>
<span id="cb3-53">    cout &lt;&lt; "You entered an invalid temperature scale. Please run the program again." &lt;&lt;endl;</span>
<span id="cb3-54">  }</span>
<span id="cb3-55">  return 0;</span>
<span id="cb3-56">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="number-of-the-day-if-else-if" class="level2">
<h2 class="anchored" data-anchor-id="number-of-the-day-if-else-if">Number of the Day (If / else if):</h2>
<ul>
<li>Chain of <code>else if</code> to match a specific number with its weekday.</li>
<li>Demonstrates grouping conditions like weekend vs weekday.</li>
<li>A good example where many comparisons might get messy.</li>
</ul>
<div id="9454de7d-7fd7-428c-9ffc-60c6e24e8faa" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1"></span>
<span id="cb4-2">#include &lt;iostream&gt;</span>
<span id="cb4-3">#include &lt;string&gt;</span>
<span id="cb4-4">#include &lt;cmath&gt;</span>
<span id="cb4-5">using namespace std;</span>
<span id="cb4-6"></span>
<span id="cb4-7">// slightly different version of switch.cpp</span>
<span id="cb4-8">// using || and &amp;&amp; and adding weekend </span>
<span id="cb4-9"></span>
<span id="cb4-10"></span>
<span id="cb4-11">int main()</span>
<span id="cb4-12">{</span>
<span id="cb4-13">  int dayNum;</span>
<span id="cb4-14">  cout &lt;&lt; "Enter a number day (1 Sunday, 2 Monday, 3 Tuesday .. etc" &lt;&lt; endl;</span>
<span id="cb4-15">  cin &gt;&gt; dayNum;</span>
<span id="cb4-16">  cout &lt;&lt; "You selected ";</span>
<span id="cb4-17">  </span>
<span id="cb4-18">  if(dayNum == 1)</span>
<span id="cb4-19">  {</span>
<span id="cb4-20">    cout &lt;&lt; "Sunday. ";</span>
<span id="cb4-21"></span>
<span id="cb4-22">  }</span>
<span id="cb4-23">  else if(dayNum == 2)</span>
<span id="cb4-24">  {</span>
<span id="cb4-25">    cout &lt;&lt; "Monday. ";</span>
<span id="cb4-26">  }</span>
<span id="cb4-27">  else if(dayNum == 3)</span>
<span id="cb4-28">  {</span>
<span id="cb4-29">    cout &lt;&lt; "Tuesday. ";</span>
<span id="cb4-30">  }</span>
<span id="cb4-31">  else if(dayNum == 4)</span>
<span id="cb4-32">  {</span>
<span id="cb4-33">    cout &lt;&lt; "Wednesday. ";</span>
<span id="cb4-34">  }</span>
<span id="cb4-35">  else if(dayNum == 5)</span>
<span id="cb4-36">  {</span>
<span id="cb4-37">    cout &lt;&lt; "Thursday. ";</span>
<span id="cb4-38">  }</span>
<span id="cb4-39">  else if(dayNum == 6)</span>
<span id="cb4-40">  {</span>
<span id="cb4-41">    cout &lt;&lt; "Friday. ";</span>
<span id="cb4-42">  }</span>
<span id="cb4-43">  else if(dayNum == 6)</span>
<span id="cb4-44">  {</span>
<span id="cb4-45">    cout &lt;&lt; "Saturday. ";</span>
<span id="cb4-46">  }</span>
<span id="cb4-47">  else</span>
<span id="cb4-48">    cout &lt;&lt; "Please enter a valid day. ";</span>
<span id="cb4-49"></span>
<span id="cb4-50"></span>
<span id="cb4-51">  if(dayNum == 1 || dayNum == 7)</span>
<span id="cb4-52">  {</span>
<span id="cb4-53">    cout &lt;&lt; "It's a weekend.";</span>
<span id="cb4-54">  }</span>
<span id="cb4-55">  else if(dayNum &gt;=2 &amp;&amp; dayNum &lt;= 6)</span>
<span id="cb4-56">  {</span>
<span id="cb4-57">    cout &lt;&lt; "It's a weekday." &lt;&lt; endl;</span>
<span id="cb4-58">  }</span>
<span id="cb4-59">  return 0;</span>
<span id="cb4-60">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="number-of-the-day-switch" class="level2">
<h2 class="anchored" data-anchor-id="number-of-the-day-switch">Number of the Day (switch):</h2>
<ul>
<li><code>switch</code> is a cleaner choice for fixed numeric options.</li>
<li>Each <code>case</code> handles one specific value.</li>
<li><code>break</code> prevents “falling through” to the next case.</li>
<li><code>default</code> is like the <code>else</code> of switch statements.</li>
</ul>
<div id="300d5abc-a07b-4837-9d56-266e6f369621" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">#include &lt;iostream&gt;</span>
<span id="cb5-2">#include &lt;string&gt;</span>
<span id="cb5-3">#include &lt;cmath&gt;</span>
<span id="cb5-4">using namespace std;</span>
<span id="cb5-5">// same as what I did in switch.cpp but now I will use swith instead of if statements.</span>
<span id="cb5-6"></span>
<span id="cb5-7">int main()</span>
<span id="cb5-8">{</span>
<span id="cb5-9">  int dayNumber;</span>
<span id="cb5-10">  cout &lt;&lt; "Enter a number day ( 1 for Sunday, 2 Monday, 3 Tuesday ...etc)" &lt;&lt; endl;</span>
<span id="cb5-11">  cin &gt;&gt; dayNumber;</span>
<span id="cb5-12">  </span>
<span id="cb5-13"></span>
<span id="cb5-14">  switch(dayNumber)</span>
<span id="cb5-15">  {</span>
<span id="cb5-16">    case 1:</span>
<span id="cb5-17">      cout &lt;&lt; "Sunday. " &lt;&lt; endl;</span>
<span id="cb5-18">      break;</span>
<span id="cb5-19">    case 2:</span>
<span id="cb5-20">      cout &lt;&lt; "Monday. " &lt;&lt; endl;</span>
<span id="cb5-21">      break;</span>
<span id="cb5-22">    case 3:</span>
<span id="cb5-23">      cout &lt;&lt; "Tuesday. " &lt;&lt; endl;</span>
<span id="cb5-24">      break;</span>
<span id="cb5-25">    case 4:</span>
<span id="cb5-26">      cout &lt;&lt; "Wednesday. " &lt;&lt; endl;</span>
<span id="cb5-27">      break;</span>
<span id="cb5-28">    case 5:</span>
<span id="cb5-29">      cout &lt;&lt; "Thursday. " &lt;&lt; endl;</span>
<span id="cb5-30">      break;</span>
<span id="cb5-31">    case 6:</span>
<span id="cb5-32">      cout &lt;&lt; "Friday. " &lt;&lt; endl;</span>
<span id="cb5-33">      break;</span>
<span id="cb5-34">    case 7:</span>
<span id="cb5-35">      cout &lt;&lt; "Saturday. " &lt;&lt; endl;</span>
<span id="cb5-36">      break;</span>
<span id="cb5-37">    default:</span>
<span id="cb5-38">      cout &lt;&lt; "an invalid day. " &lt;&lt; endl;</span>
<span id="cb5-39">  }</span>
<span id="cb5-40">  return 0;</span>
<span id="cb5-41"></span>
<span id="cb5-42">}</span></code></pre></div></div>
</details>
</div>
</section>
<section id="day-2-summarization" class="level2">
<h2 class="anchored" data-anchor-id="day-2-summarization">Day 2 Summarization :</h2>
<p>Here is what I achieved:</p>
<ul>
<li><p>I learned the <strong><code>if</code> statement</strong>, the first building block of logical decision-making.</p></li>
<li><p>I used <strong>comparison operators</strong> like <code>==</code>, <code>&lt;=</code>, and <code>&gt;=</code> to evaluate conditions.</p></li>
<li><p>I combined conditions using logical operators such as <code>||</code> and <code>&amp;&amp;</code>.</p></li>
<li><p>I controlled program behavior with <strong><code>if</code> / <code>else</code> / <code>else if</code></strong> chains for multiple outcomes.</p></li>
<li><p>I explored <strong><code>switch</code></strong> as a cleaner option for specific numeric cases.</p></li>
<li><p>I wrote several mini programs with real-world logic:</p>
<ul>
<li>Even or odd number checker</li>
<li>Weekly pay calculator with overtime</li>
<li>Water state detector (ice, liquid, steam)</li>
<li>Day-of-the-week selector (two versions)</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basics_Lesson2.html</guid>
  <pubDate>Thu, 23 Oct 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning CPP As Pythonista: Day-1</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basics_Lesson1.html</link>
  <description><![CDATA[ 





<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation:</h2>
<ul>
<li>In this series of lessons, I will track my learning through the universe of C++ as someone who mainly program in Python.</li>
<li>The motivation behind learning C++ in 2025 can be resumed into one word: <strong>Cuda</strong>.</li>
<li>CUDA kernels are still C++ first, Python second. Learning the bare-metal steps so I can stop guessing and start writing fast GPU code. One small page a day until the compiler feels normal.</li>
<li>This idea of learning C++ for CUDA make it less intimidating, since C++ isn’t the goal here rather just a tool for something else.</li>
<li>But still I need to learn some basics of C++ in order to navigate its world that already after one studying session looks very strange and outlandish for a Python programmer.</li>
</ul>
</section>
<section id="c-world" class="level2">
<h2 class="anchored" data-anchor-id="c-world">C++ World:</h2>
<ul>
<li>C++ is a <strong>Compiled language</strong>, which means the code goes through a transformation process before it can run.</li>
<li>In C++, we write code then a special program called <strong>Compiler</strong> translates our <em>Human-readable</em> code into machine code (1s &amp; 0s) that computer can executes.</li>
<li>This process of compiling works in <strong>4 stages</strong>:
<ul>
<li>Stage1: Pre-processing before the compiler even looks at our code, it’s a text manipulation step where the preprocessor check code that starts with <code>#</code> and copy-past, find-replace it automatically, so the next step include only pure C++ code.</li>
<li>Stage2: The compiler reads the C++ code and converts it to <strong>Assembly Language</strong>, which is a human readable instructions that are very close to machine code.</li>
<li>Stage3: An <strong>Assembler</strong> converts assembly into actual <code>1s</code> &amp; <code>0s</code> that the CPU understands.</li>
<li>Stage4: A <strong>Linker</strong> connects everything together (code, libraries, other file..) and creates the final executable file that can run.</li>
</ul></li>
</ul>
<div id="732ae3ad-c366-45b7-8f63-14b182cd7a8a" class="cell" data-editable="true" data-quarto-private-1="{&quot;key&quot;:&quot;slideshow&quot;,&quot;value&quot;:{&quot;slide_type&quot;:&quot;&quot;}}" data-tags="[]" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">#include &lt;iostream&gt;</span>
<span id="cb1-2">int main()</span>
<span id="cb1-3">{</span>
<span id="cb1-4">    // print my name in three lines</span>
<span id="cb1-5">    std::cout &lt;&lt; "Hi, My" &lt;&lt; std::endl;</span>
<span id="cb1-6">    std::cout &lt;&lt; "name is" &lt;&lt; std::endl;</span>
<span id="cb1-7">    std::cout &lt;&lt; "Ismail." &lt;&lt; std::endl;</span>
<span id="cb1-8">    // in one line with three string</span>
<span id="cb1-9">    std::cout &lt;&lt; "Hi, my " &lt;&lt; "name is " &lt;&lt; "Ismail." &lt;&lt;std::endl;</span>
<span id="cb1-10">    // print the whole expression in one string</span>
<span id="cb1-11">    std::cout &lt;&lt; "Hi, my name is Ismail.";</span>
<span id="cb1-12">    </span>
<span id="cb1-13">    return 0;</span>
<span id="cb1-14">}</span></code></pre></div></div>
</details>
</div>
<div id="ac1b6dac-0b79-4814-81f7-2e7f50d86b52" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">main()</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hi, My
name is
Ismail.
Hi, my name is Ismail.
Hi, my name is Ismail.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>0</code></pre>
</div>
</div>
<section id="importing-in-cpp" class="level3">
<h3 class="anchored" data-anchor-id="importing-in-cpp">Importing in CPP:</h3>
<ul>
<li>In order to use libraries and tools in C++ we use the keyword <strong><code>#include</code></strong>, it’s equivalent to <code>import</code> in Python.</li>
<li>Library we used here is <code>iostream</code> which allows us to print in the screen and many more things.</li>
</ul>
</section>
<section id="main-function" class="level3">
<h3 class="anchored" data-anchor-id="main-function">Main() function:</h3>
<ul>
<li><strong>All C++ programs</strong> has one <code>main()</code> function, it’s the starting point of every program, The <code>main</code> function is called automatically when a C++ program begins.</li>
</ul>
<section id="printing" class="level4">
<h4 class="anchored" data-anchor-id="printing">Printing:</h4>
<ul>
<li>By using <strong><code>cout</code></strong> we can print text on the screen.</li>
<li>More than one piece of data can be printed at a time.</li>
<li><strong><code>endl</code></strong> is used after <strong><code>cout</code></strong> to end the line, so the next <strong><code>cout</code></strong> could starts printing next line.</li>
<li>We can print multiple pieces of data if we <strong>seperate</strong> them with <strong><code>&lt;&lt;</code></strong>.</li>
</ul>
</section>
<section id="statements" class="level4">
<h4 class="anchored" data-anchor-id="statements">Statements:</h4>
<ul>
<li><p>The lines of code inside <code>main</code> function are called <code>statements</code>.</p></li>
<li><p>All statements in C++ must end with semi-colon <strong>;</strong>.</p></li>
<li><p><strong>The compiler</strong> reads our code and turns it into instructions that a computer can understand (machine instructions).</p></li>
<li><p>Then the compiler will generate an executable program which is just a file filled with machine instructions.</p>
<ul>
<li>The compiler uses the semi-colons to know where each statement ends. If you do not include a semi-colon at the end of every statement then you will get a <code>syntax error</code>. A program with syntax errors will not compile and run. #### String:</li>
</ul></li>
<li><p>The thing printed to the screen is called string, which refers to a groupr of characters inside <code>""</code>. #### Comments:</p></li>
<li><p>As in python comments are non executable code that we put beside the code in order to explain for us or others ideas or concepts in the code.</p></li>
<li><p>In C++ the comment starts with //.</p></li>
<li><p>There are two types of comments:<br>
- single line comments and multi-line comments. All code in between a /* and a */ are called multi-line comments. They will also be ignored by the compiler. When you have a lot to say in a comment you will use these</p></li>
</ul>
</section>
</section>
<section id="variables" class="level3">
<h3 class="anchored" data-anchor-id="variables">Variables:</h3>
<ul>
<li><p>We will write a program that will find the distance between two points on a graph. It will need variables to hold the points (an X and a Y value for each point) and a variable to hold the length of the line that connects the points.</p></li>
<li><p>Since C++ is a static typing language, we need to <strong>declare</strong> the type of the variable while creating it, and this variable will only accept the type is assigned to.</p></li>
<li><p>Here we declare a variable <code>var</code> with type <code>int</code> which refers to integer or whole number.</p></li>
</ul>
<div id="0307dbfd-ac8f-4133-95e3-e5aa189354f5" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">int var = 5;</span>
<span id="cb5-2">std::cout &lt;&lt; "variable of type integer: " &lt;&lt; var &lt;&lt; std::endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>variable of type integer: 5</code></pre>
</div>
</div>
<ul>
<li>A variable is place where we store data in the memory that can be read or written to in a program.</li>
<li>We think of variables as boxes that hold data, and each box is distinct in the memory. So every variable lives in a location in memory, and we can retrieve it by name without carrying about it’s location in memory.</li>
</ul>
<div id="9d1787ad-94d3-45f9-b41d-546bb4b56c5b" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">void func()</span>
<span id="cb7-2">{</span>
<span id="cb7-3">    // declare variables</span>
<span id="cb7-4">    int var0;</span>
<span id="cb7-5">    int var1;</span>
<span id="cb7-6"></span>
<span id="cb7-7">    int var2;</span>
<span id="cb7-8">    int var3;</span>
<span id="cb7-9"></span>
<span id="cb7-10">    // assign values to each variable</span>
<span id="cb7-11">    var0 = 1;</span>
<span id="cb7-12">    var1 = 1;</span>
<span id="cb7-13">    var2 = 2;</span>
<span id="cb7-14">    var3 = 2;</span>
<span id="cb7-15"></span>
<span id="cb7-16">    // print the variables value with a message on the screen</span>
<span id="cb7-17">    std::cout &lt;&lt;"variable 1: " &lt;&lt;var0&lt;&lt; std::endl;</span>
<span id="cb7-18">    std::cout &lt;&lt;"variable 2: " &lt;&lt;var1&lt;&lt; std::endl;</span>
<span id="cb7-19">    std::cout &lt;&lt;"variable 3: " &lt;&lt;var2&lt;&lt; std::endl;</span>
<span id="cb7-20">    std::cout &lt;&lt;"variable 4: " &lt;&lt;var3&lt;&lt; std::endl;</span>
<span id="cb7-21">}</span>
<span id="cb7-22">func();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>variable 1: 1
variable 2: 1
variable 3: 2
variable 4: 2</code></pre>
</div>
</div>
<ul>
<li>Here I declared 4 variables of type int, at this point the program requires a box in the memory for each variable.</li>
<li>Then when I assign each variable to a value, the program will put those values in their correspondent box.</li>
<li>Now we have what represents the points in a graph: <code>var0</code> and <code>var1</code> for point 1 &amp; <code>var2</code> and <code>var3</code> for point 2, now we need variable that will hold the value of the distance. The type of that variable must be float number, since it can be decimal.</li>
</ul>
<div id="3a5cf6ba-3160-44aa-82bb-2c5ceefb5f15" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1">void func2()</span>
<span id="cb9-2">{</span>
<span id="cb9-3">    int var0;</span>
<span id="cb9-4">    int var1;</span>
<span id="cb9-5">    int var2;</span>
<span id="cb9-6">    int var3;</span>
<span id="cb9-7">    var0 = 1;</span>
<span id="cb9-8">    var1 = 1;</span>
<span id="cb9-9">    var2 = 2;</span>
<span id="cb9-10">    var3 = 2;</span>
<span id="cb9-11"></span>
<span id="cb9-12">    // declare a float type variable</span>
<span id="cb9-13"></span>
<span id="cb9-14">    float lengthOfline;</span>
<span id="cb9-15">}</span></code></pre></div></div>
</details>
</div>
<ul>
<li>the variable <code>lengthOfline</code> doesn’t have value yet, so need to calculate the distance: <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Csqrt%7B(x_2%20-%20x_1)%5E2%20+%20(y_2%20-%20y_1)%5E2%7D"></li>
<li>So we need power and square root. we could multiply the number by itself to obtain the power but the square root need to be hard coded, but luckily we can just import it from <strong>math</strong> module in C++, which we need to import in order to use the built in function <strong>sqrt</strong>.</li>
</ul>
<div id="47c7a194-96bc-4649-94e3-f46d4b8c3530" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1">#include &lt;cmath&gt;</span>
<span id="cb10-2">void func3()</span>
<span id="cb10-3">{ </span>
<span id="cb10-4">    //declare the variables to hold points </span>
<span id="cb10-5">    int x1; </span>
<span id="cb10-6">    int y1; </span>
<span id="cb10-7"> </span>
<span id="cb10-8">    int x2; </span>
<span id="cb10-9">    int y2; </span>
<span id="cb10-10"> </span>
<span id="cb10-11">    //fill the point variables with data </span>
<span id="cb10-12">    x1 = 2; </span>
<span id="cb10-13">    y1 = 2; </span>
<span id="cb10-14"> </span>
<span id="cb10-15">    x2 = 2; </span>
<span id="cb10-16">    y2 = 4; </span>
<span id="cb10-17"> </span>
<span id="cb10-18">    //declare a variable to hold the length of a line between two points </span>
<span id="cb10-19">    float lengthOfLine; </span>
<span id="cb10-20"> </span>
<span id="cb10-21">    //use the distance formula to find the distance </span>
<span id="cb10-22">    lengthOfLine = sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))); </span>
<span id="cb10-23"> </span>
<span id="cb10-24">    //print the length of the line </span>
<span id="cb10-25">    std::cout&lt;&lt;"The length of the line is: "&lt;&lt;lengthOfLine&lt;&lt;std::endl; </span>
<span id="cb10-26">  </span>
<span id="cb10-27">}</span>
<span id="cb10-28">func3();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>The length of the line is: 2</code></pre>
</div>
</div>
</section>
<section id="data-types" class="level3">
<h3 class="anchored" data-anchor-id="data-types">Data types:</h3>
<ul>
<li>In C++ data types are defined once and cannot be changed. If a variable is declared with a specific data type, it can only hold values that suits that data type.</li>
<li>We already used <strong><code>int</code></strong> which is a whole number, <strong><code>float</code></strong> a decimal. There are many other types:</li>
</ul>
<div id="9bbe186a-5363-493e-8dfa-c3535a9b9d46" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">#include &lt;string&gt;</span>
<span id="cb12-2">using namespace std;</span></code></pre></div></div>
</details>
</div>
<div id="0f9b773c-f91c-4b18-8612-e953cb6ba898" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">void basicdtypes()</span>
<span id="cb13-2">{</span>
<span id="cb13-3">    int num = 5;</span>
<span id="cb13-4">    float dec = 5.22;</span>
<span id="cb13-5">    char oneChar = 'K';</span>
<span id="cb13-6">    string name = "Ismail";</span>
<span id="cb13-7"></span>
<span id="cb13-8">    cout &lt;&lt;"this is a whole number: " &lt;&lt; num &lt;&lt; endl;</span>
<span id="cb13-9">    cout &lt;&lt;"this is a decimal number: " &lt;&lt;dec&lt;&lt; endl;</span>
<span id="cb13-10">    cout &lt;&lt; "this is single character: " &lt;&lt;oneChar&lt;&lt; endl;</span>
<span id="cb13-11">    cout &lt;&lt; "This is a string of charaters: " &lt;&lt;name&lt;&lt; endl;</span>
<span id="cb13-12">}</span>
<span id="cb13-13">basicdtypes();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>this is a whole number: 5
this is a decimal number: 5.22
this is single character: K
This is a string of charaters: Ismail</code></pre>
</div>
</div>
<ul>
<li><code>char</code> is a single character between single quotes.</li>
<li><code>string</code> is couple of characters between double quotes, and it’s not primitive type, it must be imported <code>#include &lt;string&gt;</code></li>
</ul>
</section>
<section id="numbers-types" class="level3">
<h3 class="anchored" data-anchor-id="numbers-types">Numbers types:</h3>
<ul>
<li>Till now we saw 2 numerical data types: <code>int</code> and <code>float</code>.</li>
<li>A data type defines a few things:
<ul>
<li>the operations that can be performed on variables of that type</li>
<li>the values that can be stored inside a variable of that type (there is usually a range of acceptable values)</li>
<li>the amount of space a variable takes up in memory</li>
</ul></li>
<li>The operations performed on <code>int</code> are: <strong><code>- + / *</code></strong>, the division is the only operation that requires some explanation.</li>
<li>Here is a division between to integers:</li>
</ul>
<div id="fc04ea79-76f3-4d9f-bc61-4c70d259d86d" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb15-1">void divint()</span>
<span id="cb15-2">{</span>
<span id="cb15-3">    int a = 10;</span>
<span id="cb15-4">    int b = 5;</span>
<span id="cb15-5">    int res = a / b;</span>
<span id="cb15-6">    cout &lt;&lt;"result a / b =&gt; " &lt;&lt;res&lt;&lt; endl;</span>
<span id="cb15-7">}    </span>
<span id="cb15-8">divint();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>result a / b =&gt; 2</code></pre>
</div>
</div>
<ul>
<li>What if we want to divide 2 integers that will causes not a whole number:</li>
</ul>
<div id="408c63b1-f54c-462e-9252-1ac3e964900c" class="cell" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb17-1">void dvd()</span>
<span id="cb17-2">{</span>
<span id="cb17-3">    int num = 12;</span>
<span id="cb17-4">    int num1 = 2;</span>
<span id="cb17-5">    int res = num / num1;</span>
<span id="cb17-6">    cout &lt;&lt;"result as num = 12: " &lt;&lt;res&lt;&lt; endl;</span>
<span id="cb17-7">    num = 13;</span>
<span id="cb17-8">    res = num / num1;</span>
<span id="cb17-9">    cout &lt;&lt;"result as num = 13: " &lt;&lt;res&lt;&lt; endl;</span>
<span id="cb17-10">}</span>
<span id="cb17-11">dvd();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>result as num = 12: 6
result as num = 13: 6</code></pre>
</div>
</div>
<ul>
<li><p>At first, the result was 6 which is the obvious answer, but when we predicted <code>6.5</code> we still get <code>6</code>?</p></li>
<li><p>The reason is that integer division returns the quotient which is always an integer. This is true of all integer divides using the / operator</p></li>
<li><p>There is another integer division operator called the <strong>modulus operator</strong> that returns the remainder. The mod operator is the <strong><code>%</code></strong> symbol.</p></li>
</ul>
<div id="181dd807-7a3b-47d9-9735-0417aca6722e" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">void divmod()</span>
<span id="cb19-2">{</span>
<span id="cb19-3">     </span>
<span id="cb19-4">    int num1 = 12; </span>
<span id="cb19-5">    int num2 = 2; </span>
<span id="cb19-6">    int result; </span>
<span id="cb19-7"> </span>
<span id="cb19-8">    result = num1 / num2; </span>
<span id="cb19-9">    cout &lt;&lt; "result with / operator: " &lt;&lt; result &lt;&lt; endl;     </span>
<span id="cb19-10"> </span>
<span id="cb19-11">    result = num1 % num2; </span>
<span id="cb19-12">    cout &lt;&lt; " result with % operator: " &lt;&lt; result &lt;&lt; endl;</span>
<span id="cb19-13">    </span>
<span id="cb19-14">}</span>
<span id="cb19-15"></span>
<span id="cb19-16">divmod();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>result with / operator: 6
 result with % operator: 0</code></pre>
</div>
</div>
<ul>
<li><p>A data type also specifies an acceptable range of values.</p></li>
<li><p>An int variable cannot hold an infinite sized number, there is a limit.</p></li>
<li><p>There is a built in constant called <strong><code>INT_MAX</code></strong> that holds the largest value that can be stored in any int variable (there is an <strong><code>INT_MIN</code></strong> too).</p></li>
</ul>
<div id="fc4532eb-64cd-40ed-88b5-1f144354e96e" class="cell" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb21-1">#include &lt;climits&gt;</span></code></pre></div></div>
</details>
</div>
<div id="ce5e6a39-3dc9-481e-8b7c-ff931c4ed885" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb22-1">int largeNumber;</span>
<span id="cb22-2">largeNumber = INT_MAX;</span>
<span id="cb22-3">cout&lt;&lt;"largest number can be stored: " &lt;&lt;largeNumber&lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>largest number can be stored: 2147483647</code></pre>
</div>
</div>
<ul>
<li>Adding one number to that value will causes an out of range error</li>
<li>The arithmetic operators for floats are the same as ints except there is no mod operator. float division results in numbers with fractional parts.</li>
<li>In case we want to declare a float data type but the value is a whole number we need to explicitly tell the compiler it’s a float number by adding <code>.0</code>:</li>
</ul>
<div id="7a8d0205-2dab-4d87-8391-e5fb3e117b0c" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb24-1">#include &lt;typeinfo&gt;</span>
<span id="cb24-2">void wholeFloat()</span>
<span id="cb24-3">{</span>
<span id="cb24-4">    int num1 = 15;</span>
<span id="cb24-5">    float num2 = 15.0;</span>
<span id="cb24-6">    cout &lt;&lt; "the type of num1 = 15 :  " &lt;&lt; typeid(num1).name() &lt;&lt; endl;</span>
<span id="cb24-7">    cout &lt;&lt; "the type of num2 = 15.0 :  " &lt;&lt; typeid(num2).name() &lt;&lt; endl;</span>
<span id="cb24-8">    </span>
<span id="cb24-9">    </span>
<span id="cb24-10">}</span>
<span id="cb24-11"></span>
<span id="cb24-12">wholeFloat();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>the type of num1 = 15 :  i
the type of num2 = 15.0 :  f</code></pre>
</div>
</div>
<ul>
<li>We get <code>i</code> for integer for <code>15</code> and <code>f</code> float for <code>15.0</code>.</li>
</ul>
</section>
<section id="characters-and-strings" class="level3">
<h3 class="anchored" data-anchor-id="characters-and-strings">Characters and strings</h3>
<ul>
<li><strong><code>string</code></strong> is very strong type which allows us to make many different things and manipulates data in many ways.</li>
<li>While **<code>char</code>* is a bit hard to work with, since it’s limited and not as versatile as <code>string</code>.</li>
</ul>
<div id="a523250e-ec0f-43be-a560-f68a8778f9db" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb26-1">void chars()</span>
<span id="cb26-2">{</span>
<span id="cb26-3">    </span>
<span id="cb26-4">    char first = 'c';</span>
<span id="cb26-5">    char second = 'h';</span>
<span id="cb26-6">    char third = 'a';</span>
<span id="cb26-7">    char fourth = 'r';</span>
<span id="cb26-8"></span>
<span id="cb26-9">    string word = "String";</span>
<span id="cb26-10">    </span>
<span id="cb26-11">    cout &lt;&lt; first &lt;&lt; second &lt;&lt; third &lt;&lt; fourth &lt;&lt; endl;</span>
<span id="cb26-12">    cout &lt;&lt; word &lt;&lt; endl;</span>
<span id="cb26-13"></span>
<span id="cb26-14">}</span></code></pre></div></div>
</details>
</div>
<div id="6d46e63c-2b05-4b98-83db-0b5878bcb9c1" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb27-1">chars();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>char
String</code></pre>
</div>
</div>
<section id="string-operations" class="level4">
<h4 class="anchored" data-anchor-id="string-operations">String Operations:</h4>
<ul>
<li>String tyoe has many operation that we could use to manipulate data, like <strong>length()</strong> which as the name suggests tells us the length of string:</li>
</ul>
<div id="9ae0c064-5512-4f90-ab7f-0c42b76565e0" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb29-1">string name = "Ismail";</span>
<span id="cb29-2">cout &lt;&lt; "Number of characters in Ismail is: " &lt;&lt; name.length() &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Number of characters in Ismail is: 6</code></pre>
</div>
</div>
<ul>
<li>The square brackets is another operator that will return an individual character in the string:</li>
</ul>
<div id="f22b1c9e-2433-4238-9597-abdb650e2173" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb31-1">string word = "word";</span>
<span id="cb31-2">char letter  = word[0];</span>
<span id="cb31-3">cout &lt;&lt; "this is a string: " &lt;&lt; word &lt;&lt; endl;</span>
<span id="cb31-4">// the index is 0 based</span>
<span id="cb31-5">cout &lt;&lt; "this is the first character of that word: " &lt;&lt; letter &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>this is a string: word
this is the first character of that word: w</code></pre>
</div>
</div>
<ul>
<li>The <strong>+</strong> operator concatenates strings together.</li>
</ul>
<div id="db165490-4f20-458c-92c6-f4100493c46d" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb33-1">string sentence = "word1";</span>
<span id="cb33-2">sentence = sentence + " word2" + " word3" + " ...";</span>
<span id="cb33-3">cout &lt;&lt; sentence &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>word1 word2 word3 ...</code></pre>
</div>
</div>
<ul>
<li><strong>substr</strong> is a string function that will create a new string from the innards of another.</li>
<li>This function takes a starting position and the number of character to use after that position and copies the characters into a new string.</li>
</ul>
<div id="8ee73499-8565-483e-aed6-ef62cfa6aa5b" class="cell" data-execution_count="20">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb35-1">string sentence = "find the third word";</span>
<span id="cb35-2">string aWord = sentence.substr(9, 5);</span>
<span id="cb35-3">cout &lt;&lt; aWord &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>third</code></pre>
</div>
</div>
<ul>
<li><strong><code>find</code></strong> will return the position where the first occurrence of a word is found (and -1 if it is not found).</li>
</ul>
<div id="4a018f5f-767b-45e2-afdd-243e34d794a0" class="cell" data-execution_count="21">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb37-1">string sentence = "where is Aldo ?";</span>
<span id="cb37-2">int findAldo = sentence.find("Aldo");</span>
<span id="cb37-3">cout &lt;&lt; "Aldo can be found at this position: " &lt;&lt; findAldo &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Aldo can be found at this position: 9</code></pre>
</div>
</div>
<ul>
<li><strong><code>erase</code></strong> will remove characters from a string. It takes the starting position of where I want to start removing characters and he total number of characters to get rid of.</li>
</ul>
<div id="9e6642a0-3c13-4572-be53-f10630ef6e60" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb39-1">void func()</span>
<span id="cb39-2">{</span>
<span id="cb39-3">    string sentence = "In this sentence sentence, it must be no repeated word!";</span>
<span id="cb39-4">    int repeatedWord = sentence.find("sentence");</span>
<span id="cb39-5">    sentence.erase(repeatedWord, 9);</span>
<span id="cb39-6">    cout &lt;&lt; sentence &lt;&lt; endl;</span>
<span id="cb39-7">}</span></code></pre></div></div>
</details>
</div>
<div id="70bfb979-8495-4a1d-9525-efb473c54498" class="cell" data-execution_count="23">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb40-1">func();</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>In this sentence, it must be no repeated word!</code></pre>
</div>
</div>
<ul>
<li><strong><code>insert</code></strong> adds a new string after the position specified in the string.</li>
</ul>
<div id="253aab3a-d8d7-4b40-82e1-93905c8bd7af" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb42-1">string sentence = ", my name is Ismail.";</span>
<span id="cb42-2">string greeting = "Hi";</span>
<span id="cb42-3">sentence = sentence.insert(0, greeting);</span>
<span id="cb42-4">cout &lt;&lt; sentence &lt;&lt; endl;</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hi, my name is Ismail.</code></pre>
</div>
</div>
</section>
</section>
<section id="weekly-pay-calculator" class="level3">
<h3 class="anchored" data-anchor-id="weekly-pay-calculator">Weekly pay calculator</h3>
<ul>
<li><p>In this small program we will use the <strong><code>cin</code></strong> which takes input from users and use it in the program, displays it or further process it.</p></li>
<li><p>In this program we will calculate the weekly pay from employers by taking inputs from them and use as arguments in a formula in order to calculate.</p></li>
<li><p><strong><code>cin</code></strong> is part of <code>&lt;iostream&gt;</code> just like <strong>cout</strong>.</p></li>
</ul>
<div id="980da680-be7e-474c-b882-8f2c000e1247" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb44-1">#include &lt;iostream&gt;</span>
<span id="cb44-2">using namespace std;</span></code></pre></div></div>
</details>
</div>
<div id="c3398578-2339-4c0f-b7aa-c6b20a449330" class="cell" data-execution_count="26">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb45-1">void calculatePay()</span>
<span id="cb45-2">{</span>
<span id="cb45-3">    float numHoursWorked;</span>
<span id="cb45-4">    float hourlyPayRate;</span>
<span id="cb45-5">    string employeeName;</span>
<span id="cb45-6">    float weeklyPay;</span>
<span id="cb45-7">    </span>
<span id="cb45-8">}</span></code></pre></div></div>
</details>
</div>
<ul>
<li>The rpoblem with this approach is that we need to add the numbers manually for each employee or ask them the modify the code for themselves, which is inconvenient.</li>
<li>The idea is write code that asks them for their informations, stores it and calculates the weekly pay.</li>
</ul>
<div id="9d247784-b0e5-4be0-aece-0f6c98b45189" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb46-1">#include &lt;iostream&gt;</span>
<span id="cb46-2">#include &lt;string&gt;</span>
<span id="cb46-3">using namespace std;</span>
<span id="cb46-4"></span>
<span id="cb46-5">int main()</span>
<span id="cb46-6">{</span>
<span id="cb46-7">  float hoursPerWeek;</span>
<span id="cb46-8">  float hourlyPayRate;</span>
<span id="cb46-9">  string employeeName;</span>
<span id="cb46-10">  float weeklyPay;</span>
<span id="cb46-11">  cout &lt;&lt; "Enter hours worked per week: "&lt;&lt; endl;</span>
<span id="cb46-12">  cin &gt;&gt; hoursPerWeek;</span>
<span id="cb46-13">  cout &lt;&lt; "Enter hourly pay rate: " &lt;&lt; endl;</span>
<span id="cb46-14">  cin &gt;&gt; hourlyPayRate;</span>
<span id="cb46-15">  cout &lt;&lt; "Enter your Name: " &lt;&lt; endl;</span>
<span id="cb46-16">  cin &gt;&gt; employeeName;</span>
<span id="cb46-17"></span>
<span id="cb46-18">  weeklyPay = hoursPerWeek * hourlyPayRate;</span>
<span id="cb46-19"></span>
<span id="cb46-20">  cout &lt;&lt; employeeName &lt;&lt; " Earned " &lt;&lt; weeklyPay &lt;&lt; "$ this week." &lt;&lt; endl;</span>
<span id="cb46-21"></span>
<span id="cb46-22">  return 0;</span>
<span id="cb46-23">  }</span></code></pre></div></div>
</details>
</div>
<ul>
<li>I could revisit the <strong><code>distance formula</code></strong> I program earlier and apply the idea of <strong><code>cin</code></strong> values instead of hard coding them like in the first version.</li>
</ul>
<div id="bf1d2fff-5ce1-4ed1-af34-78246cff367e" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb47-1">// old version</span>
<span id="cb47-2">int main()</span>
<span id="cb47-3">{</span>
<span id="cb47-4">  int x0;</span>
<span id="cb47-5">  int y0;</span>
<span id="cb47-6">  int x1;</span>
<span id="cb47-7">  int y1;</span>
<span id="cb47-8"></span>
<span id="cb47-9">  x0 = 2;</span>
<span id="cb47-10">  y0 = 3;</span>
<span id="cb47-11">  x1 = 3;</span>
<span id="cb47-12">  y1 = 4;</span>
<span id="cb47-13"></span>
<span id="cb47-14">  float distanceFormula;</span>
<span id="cb47-15"></span>
<span id="cb47-16">  distanceFormula = sqrt(((x1 - x0) * (x1 - x0)) - ((y1 - y0) * (y1 - y0))</span>
<span id="cb47-17"></span>
<span id="cb47-18">  return 0;</span>
<span id="cb47-19">  </span>
<span id="cb47-20">}</span></code></pre></div></div>
</details>
</div>
<ul>
<li>In the new version the values <code>x0, x1, y0, y1</code> will be decided by the user through <code>cin</code>.</li>
</ul>
<div id="50f44ee0-04fb-45c0-b1b7-1a64bb2f1c40" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb48-1">#include &lt;iostream&gt;</span>
<span id="cb48-2">#include &lt;cmath&gt;</span>
<span id="cb48-3">using namespace std;</span>
<span id="cb48-4"></span>
<span id="cb48-5">int main()</span>
<span id="cb48-6">{</span>
<span id="cb48-7">    float x0, x1, y0, y1;  // Changed to float for better precision</span>
<span id="cb48-8"></span>
<span id="cb48-9">    cout &lt;&lt; "Please enter the values of the first point: " &lt;&lt; endl;</span>
<span id="cb48-10">    cout &lt;&lt; "X: ";</span>
<span id="cb48-11">    cin &gt;&gt; x0;</span>
<span id="cb48-12">    cout &lt;&lt; "Y: ";</span>
<span id="cb48-13">    cin &gt;&gt; y0;</span>
<span id="cb48-14"></span>
<span id="cb48-15">    cout &lt;&lt; "Please enter the values of the second point: " &lt;&lt; endl;</span>
<span id="cb48-16">    cout &lt;&lt; "X: ";</span>
<span id="cb48-17">    cin &gt;&gt; x1;</span>
<span id="cb48-18">    cout &lt;&lt; "Y: ";</span>
<span id="cb48-19">    cin &gt;&gt; y1;</span>
<span id="cb48-20">    </span>
<span id="cb48-21">    // distance formula: sqrt((x1-x0)² + (y1-y0)²)</span>
<span id="cb48-22">    float distanceFormula = sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));</span>
<span id="cb48-23">    </span>
<span id="cb48-24">    cout &lt;&lt; "The length of the line is: " &lt;&lt; distanceFormula &lt;&lt; endl;</span>
<span id="cb48-25"></span>
<span id="cb48-26">    return 0;</span>
<span id="cb48-27">}</span></code></pre></div></div>
</details>
</div>
<ul>
<li>Further using <code>cin &gt;&gt;</code> in a function where I have to calculate many values and manipulate them:</li>
</ul>
<div id="275f43ab-03a8-41e7-bda3-d204367816e4" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp17 number-lines code-with-copy"><code class="sourceCode"><span id="cb49-1">%%writefile gasMileage.cpp</span>
<span id="cb49-2"></span>
<span id="cb49-3">#include &lt;iostream&gt;</span>
<span id="cb49-4">#include &lt;string&gt;</span>
<span id="cb49-5">#include &lt;cmath&gt;</span>
<span id="cb49-6">using namespace std;</span>
<span id="cb49-7"></span>
<span id="cb49-8"></span>
<span id="cb49-9">int main()</span>
<span id="cb49-10">{</span>
<span id="cb49-11">  float distance;</span>
<span id="cb49-12">  string carBrand;</span>
<span id="cb49-13">  string carModel;</span>
<span id="cb49-14">  float carCapacity;</span>
<span id="cb49-15">  float mpg;</span>
<span id="cb49-16"></span>
<span id="cb49-17">  cout &lt;&lt; "Enter the Distance of the Trip: " &lt;&lt; endl;</span>
<span id="cb49-18">  cin &gt;&gt; distance;</span>
<span id="cb49-19"></span>
<span id="cb49-20">  cout &lt;&lt; "Enter the rand of the car: " &lt;&lt; endl;</span>
<span id="cb49-21">  cin &gt;&gt; carBrand;</span>
<span id="cb49-22"></span>
<span id="cb49-23">  cout  &lt;&lt; "Enter the car Model: " &lt;&lt; endl;</span>
<span id="cb49-24">  cin &gt;&gt; carModel;</span>
<span id="cb49-25"></span>
<span id="cb49-26">  cout &lt;&lt; "Enter the fuel Tank Capacity: " &lt;&lt; endl;</span>
<span id="cb49-27">  cin &gt;&gt; carCapacity;</span>
<span id="cb49-28">  </span>
<span id="cb49-29">  cout &lt;&lt; "Enter the MPG of the car: " &lt;&lt; endl;</span>
<span id="cb49-30">  cin &gt;&gt; mpg;</span>
<span id="cb49-31"></span>
<span id="cb49-32"></span>
<span id="cb49-33">  float mileageOnFullTank;</span>
<span id="cb49-34">  mileageOnFullTank = mpg * carCapacity;</span>
<span id="cb49-35">  float numOfStops = int(distance / mileageOnFullTank);</span>
<span id="cb49-36">  float gasRequired = distance / mpg;</span>
<span id="cb49-37">  float galonsLeft = ((numOfStops+1) * carCapacity) - gasRequired;</span>
<span id="cb49-38">  </span>
<span id="cb49-39">  </span>
<span id="cb49-40">  cout &lt;&lt; "For a trip of " &lt;&lt; distance &lt;&lt; " miles" &lt;&lt; endl;</span>
<span id="cb49-41">  cout &lt;&lt; " a " &lt;&lt; carBrand &lt;&lt; " model " &lt;&lt; carModel &lt;&lt; " requires " &lt;&lt; gasRequired &lt;&lt; " Gallons Of Gas " &lt;&lt; endl;</span>
<span id="cb49-42">  cout &lt;&lt; " will require " &lt;&lt; numOfStops &lt;&lt; " stop for gas " &lt;&lt; endl;</span>
<span id="cb49-43">  cout &lt;&lt; " and will have " &lt;&lt; galonsLeft &lt;&lt; " gallons of gas left in the tank" &lt;&lt; endl;</span>
<span id="cb49-44">  return 0;</span>
<span id="cb49-45">}  </span></code></pre></div></div>
</details>
</div>
</section>
</section>
<section id="day-1-recap" class="level2">
<h2 class="anchored" data-anchor-id="day-1-recap">Day 1 Recap:</h2>
<ul>
<li><p>Today I started exploring C++ as a Python programmer, motivated by my goal of writing CUDA kernels. I covered the following fundamentals:</p></li>
<li><p>The compilation process (pre-processor → compiler → assembler → linker) and how C++ differs from interpreted languages.</p></li>
<li><p>How to <strong><code>include</code></strong> libraries using <code>#include</code>, and the special role of the <strong><code>main()</code></strong> function.</p></li>
<li><p>Basic printing with <strong><code>std::cout</code></strong>, ending lines with <strong><code>&lt;&lt; std::endl</code></strong>, and formatting simple output.</p></li>
<li><p><strong>Variables</strong>: declaring types explicitly (e.g., <code>int</code>, <code>float</code>), how static typing enforces constraints, and understanding variables as named boxes in memory.</p></li>
<li><p>Fundamental data types: integers, floats, characters, strings; string operations like length, indexing, concatenation, substrings.</p></li>
<li><p>A simple user-input example: using <strong><code>std::cin</code></strong> to build a basic “weekly pay” calculator.</p></li>
</ul>


</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basics_Lesson1.html</guid>
  <pubDate>Thu, 18 Sep 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning CPP As Pythonista: Day-1</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basicsLesson1.html</link>
  <description><![CDATA[ 





<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation:</h2>
<ul>
<li>In this series of lessons, I will track my learning through the universe of C++ as someone who mainly program in Python.</li>
<li>The motivation behind learning C++ in 2025 can be resumed into one word: <strong>Cuda</strong>.</li>
<li>CUDA kernels are still C++ first, Python second. Learning the bare-metal steps so I can stop guessing and start writing fast GPU code. One small page a day until the compiler feels normal.</li>
<li>This idea of learning C++ for CUDA make it less intimidating, since C++ isn’t the goal here rather just a tool for something else.</li>
<li>But still I need to learn some basics of C++ in order to navigate its world that already after one studying session looks very strange and outlandish for a Python programmer.</li>
</ul>
</section>
<section id="c-world" class="level2">
<h2 class="anchored" data-anchor-id="c-world">C++ World:</h2>
<ul>
<li>C++ is a <strong>Compiled language</strong>, which means the code goes through a transformation process before it can run.</li>
<li>In C++, we write code then a special program called <strong>Compiler</strong> translates our <em>Human-readable</em> code into machine code (1s &amp; 0s) that computer can executes.</li>
<li>This process of compiling works in <strong>4 stages</strong>:
<ul>
<li>Stage1: Pre-processing before the compiler even looks at our code, it’s a text manipulation step where the preprocessor check code that starts with <code>#</code> and copy-past, find-replace it automatically, so the next step include only pure C++ code.</li>
<li>Stage2: The compiler reads the C++ code and converts it to <strong>Assembly Language</strong>, which is a human readable instructions that are very close to machine code.</li>
<li>Stage3: An <strong>Assembler</strong> converts assembly into actual <code>1s</code> &amp; <code>0s</code> that the CPU understands.</li>
<li>Stage4: A <strong>Linker</strong> connects everything together (code, libraries, other file..) and creates the final executable file that can run.</li>
</ul></li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// print my name in three lines</span></span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, My"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name is"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ismail."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// in one line with three string</span></span>
<span id="cb1-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, my "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name is "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ismail."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// print the whole expression in one string</span></span>
<span id="cb1-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, my name is Ismail."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    </span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb2-1">main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span></code></pre></div></div>
<pre><code>Hi, My
name is
Ismail.
Hi, my name is Ismail.
Hi, my name is Ismail.




0</code></pre>
<section id="importing-in-cpp" class="level3">
<h3 class="anchored" data-anchor-id="importing-in-cpp">Importing in CPP:</h3>
<ul>
<li>In order to use libraries and tools in C++ we use the keyword <strong><code>#include</code></strong>, it’s equivalent to <code>import</code> in Python.</li>
<li>Library we used here is <code>iostream</code> which allows us to print in the screen and many more things.</li>
</ul>
</section>
<section id="main-function" class="level3">
<h3 class="anchored" data-anchor-id="main-function">Main() function:</h3>
<ul>
<li><strong>All C++ programs</strong> has one <code>main()</code> function, it’s the starting point of every program, The <code>main</code> function is called automatically when a C++ program begins.</li>
</ul>
<section id="printing" class="level4">
<h4 class="anchored" data-anchor-id="printing">Printing:</h4>
<ul>
<li>By using <strong><code>cout</code></strong> we can print text on the screen.</li>
<li>More than one piece of data can be printed at a time.</li>
<li><strong><code>endl</code></strong> is used after <strong><code>cout</code></strong> to end the line, so the next <strong><code>cout</code></strong> could starts printing next line.</li>
<li>We can print multiple pieces of data if we <strong>seperate</strong> them with <strong><code>&lt;&lt;</code></strong>.</li>
</ul>
</section>
<section id="statements" class="level4">
<h4 class="anchored" data-anchor-id="statements">Statements:</h4>
<ul>
<li><p>The lines of code inside <code>main</code> function are called <code>statements</code>.</p></li>
<li><p>All statements in C++ must end with semi-colon <strong>;</strong>.</p></li>
<li><p><strong>The compiler</strong> reads our code and turns it into instructions that a computer can understand (machine instructions).</p></li>
<li><p>Then the compiler will generate an executable program which is just a file filled with machine instructions.</p>
<ul>
<li>The compiler uses the semi-colons to know where each statement ends. If you do not include a semi-colon at the end of every statement then you will get a <code>syntax error</code>. A program with syntax errors will not compile and run. #### String:</li>
</ul></li>
<li><p>The thing printed to the screen is called string, which refers to a groupr of characters inside <code>""</code>. #### Comments:</p></li>
<li><p>As in python comments are non executable code that we put beside the code in order to explain for us or others ideas or concepts in the code.</p></li>
<li><p>In C++ the comment starts with //.</p></li>
<li><p>There are two types of comments:<br>
- single line comments and multi-line comments. All code in between a /* and a */ are called multi-line comments. They will also be ignored by the compiler. When you have a lot to say in a comment you will use these</p></li>
</ul>
</section>
</section>
<section id="variables" class="level3">
<h3 class="anchored" data-anchor-id="variables">Variables:</h3>
<ul>
<li><p>We will write a program that will find the distance between two points on a graph. It will need variables to hold the points (an X and a Y value for each point) and a variable to hold the length of the line that connects the points.</p></li>
<li><p>Since C++ is a static typing language, we need to <strong>declare</strong> the type of the variable while creating it, and this variable will only accept the type is assigned to.</p></li>
<li><p>Here we declare a variable <code>var</code> with type <code>int</code> which refers to integer or whole number.</p></li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable of type integer: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>variable of type integer: 5</code></pre>
<ul>
<li>A variable is place where we store data in the memory that can be read or written to in a program.</li>
<li>We think of variables as boxes that hold data, and each box is distinct in the memory. So every variable lives in a location in memory, and we can retrieve it by name without carrying about it’s location in memory.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare variables</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6"></span>
<span id="cb6-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// assign values to each variable</span></span>
<span id="cb6-11">    var0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12">    var1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-13">    var2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">    var3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-15"></span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// print the variables value with a message on the screen</span></span>
<span id="cb6-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable 1: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>var0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable 2: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>var1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable 3: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>var2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-20">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable 4: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>var3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-22">func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>variable 1: 1
variable 2: 1
variable 3: 2
variable 4: 2</code></pre>
<ul>
<li>Here I declared 4 variables of type int, at this point the program requires a box in the memory for each variable.</li>
<li>Then when I assign each variable to a value, the program will put those values in their correspondent box.</li>
<li>Now we have what represents the points in a graph: <code>var0</code> and <code>var1</code> for point 1 &amp; <code>var2</code> and <code>var3</code> for point 2, now we need variable that will hold the value of the distance. The type of that variable must be float number, since it can be decimal.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> var3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">    var0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-8">    var1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9">    var2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">    var3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-11"></span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare a float type variable</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> lengthOfline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li>the variable <code>lengthOfline</code> doesn’t have value yet, so need to calculate the distance: <img src="https://latex.codecogs.com/png.latex?d%20=%20%5Csqrt%7B(x_2%20-%20x_1)%5E2%20+%20(y_2%20-%20y_1)%5E2%7D"></li>
<li>So we need power and square root. we could multiply the number by itself to obtain the power but the square root need to be hard coded, but luckily we can just import it from <strong>math</strong> module in C++, which we need to import in order to use the built in function <strong>sqrt</strong>.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb9-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//declare the variables to hold points </span></span>
<span id="cb9-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-7"> </span>
<span id="cb9-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-10"> </span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//fill the point variables with data </span></span>
<span id="cb9-12">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-13">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-14"> </span>
<span id="cb9-15">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-16">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-17"> </span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//declare a variable to hold the length of a line between two points </span></span>
<span id="cb9-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> lengthOfLine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-20"> </span>
<span id="cb9-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//use the distance formula to find the distance </span></span>
<span id="cb9-22">    lengthOfLine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((</span>x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)));</span> </span>
<span id="cb9-23"> </span>
<span id="cb9-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//print the length of the line </span></span>
<span id="cb9-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of the line is: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>lengthOfLine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb9-26">  </span>
<span id="cb9-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-28">func3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>The length of the line is: 2</code></pre>
</section>
<section id="data-types" class="level3">
<h3 class="anchored" data-anchor-id="data-types">Data types:</h3>
<ul>
<li>In C++ data types are defined once and cannot be changed. If a variable is declared with a specific data type, it can only hold values that suits that data type.</li>
<li>We already used <strong><code>int</code></strong> which is a whole number, <strong><code>float</code></strong> a decimal. There are many other types:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> basicdtypes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.22</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> oneChar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'K'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">    string name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ismail"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-7"></span>
<span id="cb12-8">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is a whole number: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-9">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is a decimal number: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>dec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-10">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is single character: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>oneChar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-11">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a string of charaters: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-13">basicdtypes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>this is a whole number: 5
this is a decimal number: 5.22
this is single character: K
This is a string of charaters: Ismail</code></pre>
<ul>
<li><code>char</code> is a single character between single quotes.</li>
<li><code>string</code> is couple of characters between double quotes, and it’s not primitive type, it must be imported <code>#include &lt;string&gt;</code></li>
</ul>
</section>
<section id="numbers-types" class="level3">
<h3 class="anchored" data-anchor-id="numbers-types">Numbers types:</h3>
<ul>
<li>Till now we saw 2 numerical data types: <code>int</code> and <code>float</code>.</li>
<li>A data type defines a few things:
<ul>
<li>the operations that can be performed on variables of that type</li>
<li>the values that can be stored inside a variable of that type (there is usually a range of acceptable values)</li>
<li>the amount of space a variable takes up in memory</li>
</ul></li>
<li>The operations performed on <code>int</code> are: <strong><code>- + / *</code></strong>, the division is the only operation that requires some explanation.</li>
<li>Here is a division between to integers:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> divint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb14-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-6">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result a / b =&gt; "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>    </span>
<span id="cb14-8">divint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>result a / b =&gt; 2</code></pre>
<ul>
<li>What if we want to divide 2 integers that will causes not a whole number:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb16-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> dvd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb16-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-6">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result as num = 12: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-7">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-8">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-9">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result as num = 13: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-11">dvd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>result as num = 12: 6
result as num = 13: 6</code></pre>
<ul>
<li><p>At first, the result was 6 which is the obvious answer, but when we predicted <code>6.5</code> we still get <code>6</code>?</p></li>
<li><p>The reason is that integer division returns the quotient which is always an integer. This is true of all integer divides using the / operator</p></li>
<li><p>There is another integer division operator called the <strong>modulus operator</strong> that returns the remainder. The mod operator is the <strong><code>%</code></strong> symbol.</p></li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb18-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> divmod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb18-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-3">     </span>
<span id="cb18-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb18-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb18-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb18-7"> </span>
<span id="cb18-8">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb18-9">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result with / operator: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>     </span>
<span id="cb18-10"> </span>
<span id="cb18-11">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> num2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb18-12">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" result with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% o</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">perator: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-13">    </span>
<span id="cb18-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-15"></span>
<span id="cb18-16">divmod<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>result with / operator: 6
 result with % operator: 0</code></pre>
<ul>
<li><p>A data type also specifies an acceptable range of values.</p></li>
<li><p>An int variable cannot hold an infinite sized number, there is a limit.</p></li>
<li><p>There is a built in constant called <strong><code>INT_MAX</code></strong> that holds the largest value that can be stored in any int variable (there is an <strong><code>INT_MIN</code></strong> too).</p></li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;climits&gt;</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb21-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> largeNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-2">largeNumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INT_MAX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-3">cout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"largest number can be stored: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>largeNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>largest number can be stored: 2147483647</code></pre>
<ul>
<li>Adding one number to that value will causes an out of range error</li>
<li>The arithmetic operators for floats are the same as ints except there is no mod operator. float division results in numbers with fractional parts.</li>
<li>In case we want to declare a float data type but the value is a whole number we need to explicitly tell the compiler it’s a float number by adding <code>.0</code>:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb23-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;typeinfo&gt;</span></span>
<span id="cb23-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> wholeFloat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb23-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> num2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-6">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the type of num1 = 15 :  "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typeid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>num1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the type of num2 = 15.0 :  "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typeid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>num2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-8">    </span>
<span id="cb23-9">    </span>
<span id="cb23-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-11"></span>
<span id="cb23-12">wholeFloat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>the type of num1 = 15 :  i
the type of num2 = 15.0 :  f</code></pre>
<ul>
<li>We get <code>i</code> for integer for <code>15</code> and <code>f</code> float for <code>15.0</code>.</li>
</ul>
</section>
<section id="characters-and-strings" class="level3">
<h3 class="anchored" data-anchor-id="characters-and-strings">Characters and strings</h3>
<ul>
<li><strong><code>string</code></strong> is very strong type which allows us to make many different things and manipulates data in many ways.</li>
<li>While **<code>char</code>* is a bit hard to work with, since it’s limited and not as versatile as <code>string</code>.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb25-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> chars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb25-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb25-3">    </span>
<span id="cb25-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> third <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> fourth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-8"></span>
<span id="cb25-9">    string word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"String"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-10">    </span>
<span id="cb25-11">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> third <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> fourth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-12">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb26-1">chars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>char
String</code></pre>
<section id="string-operations" class="level4">
<h4 class="anchored" data-anchor-id="string-operations">String Operations:</h4>
<ul>
<li>String tyoe has many operation that we could use to manipulate data, like <strong>length()</strong> which as the name suggests tells us the length of string:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb28-1">string name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ismail"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-2">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of characters in Ismail is: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>Number of characters in Ismail is: 6</code></pre>
<ul>
<li>The square brackets is another operator that will return an individual character in the string:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb30-1">string word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> letter  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> word<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb30-3">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is a string: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> word <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the index is 0 based</span></span>
<span id="cb30-5">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is the first character of that word: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> letter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>this is a string: word
this is the first character of that word: w</code></pre>
<ul>
<li>The <strong>+</strong> operator concatenates strings together.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb32-1">string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-2">sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" word2"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" word3"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ..."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb32-3">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>word1 word2 word3 ...</code></pre>
<ul>
<li><strong>substr</strong> is a string function that will create a new string from the innards of another.</li>
<li>This function takes a starting position and the number of character to use after that position and copies the characters into a new string.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb34-1">string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"find the third word"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-2">string aWord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>substr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb34-3">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> aWord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>third</code></pre>
<ul>
<li><strong><code>find</code></strong> will return the position where the first occurrence of a word is found (and -1 if it is not found).</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb36-1">string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"where is Aldo ?"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> findAldo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aldo"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-3">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aldo can be found at this position: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> findAldo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>Aldo can be found at this position: 9</code></pre>
<ul>
<li><strong><code>erase</code></strong> will remove characters from a string. It takes the starting position of where I want to start removing characters and he total number of characters to get rid of.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb38-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb38-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb38-3">    string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In this sentence sentence, it must be no repeated word!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb38-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> repeatedWord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>find<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb38-5">    sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>erase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>repeatedWord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb38-6">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb38-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb39-1">func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div></div>
<pre><code>In this sentence, it must be no repeated word!</code></pre>
<ul>
<li><strong><code>insert</code></strong> adds a new string after the position specified in the string.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb41-1">string sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", my name is Ismail."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb41-2">string greeting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb41-3">sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> greeting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb41-4">cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sentence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<pre><code>Hi, my name is Ismail.</code></pre>
</section>
</section>
<section id="weekly-pay-calculator" class="level3">
<h3 class="anchored" data-anchor-id="weekly-pay-calculator">Weekly pay calculator</h3>
<ul>
<li><p>In this small program we will use the <strong><code>cin</code></strong> which takes input from users and use it in the program, displays it or further process it.</p></li>
<li><p>In this program we will calculate the weekly pay from employers by taking inputs from them and use as arguments in a formula in order to calculate.</p></li>
<li><p><strong><code>cin</code></strong> is part of <code>&lt;iostream&gt;</code> just like <strong>cout</strong>.</p></li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb43-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb43-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb44-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> calculatePay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb44-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb44-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> numHoursWorked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> hourlyPayRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-5">    string employeeName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> weeklyPay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-7">    </span>
<span id="cb44-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li>The rpoblem with this approach is that we need to add the numbers manually for each employee or ask them the modify the code for themselves, which is inconvenient.</li>
<li>The idea is write code that asks them for their informations, stores it and calculates the weekly pay.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb45-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb45-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb45-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb45-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb45-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> hoursPerWeek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> hourlyPayRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-9">  string employeeName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> weeklyPay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-11">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter hours worked per week: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-12">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> hoursPerWeek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-13">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter hourly pay rate: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-14">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> hourlyPayRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-15">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your Name: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-16">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> employeeName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-17"></span>
<span id="cb45-18">  weeklyPay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hoursPerWeek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hourlyPayRate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-19"></span>
<span id="cb45-20">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> employeeName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Earned "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> weeklyPay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$ this week."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-21"></span>
<span id="cb45-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-23">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li>I could revisit the <strong><code>distance formula</code></strong> I program earlier and apply the idea of <strong><code>cin</code></strong> values instead of hard coding them like in the first version.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// old version</span></span>
<span id="cb46-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb46-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb46-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-7">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-8"></span>
<span id="cb46-9">  x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-10">  y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-11">  x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-12">  y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-13"></span>
<span id="cb46-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> distanceFormula<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-15"></span>
<span id="cb46-16">  distanceFormula <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((</span>x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb46-17"></span>
<span id="cb46-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-19">  </span>
<span id="cb46-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li>In the new version the values <code>x0, x1, y0, y1</code> will be decided by the user through <code>cin</code>.</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb47-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb47-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb47-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-4"></span>
<span id="cb47-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb47-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb47-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Changed to float for better precision</span></span>
<span id="cb47-8"></span>
<span id="cb47-9">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter the values of the first point: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-10">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-11">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-12">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-13">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-14"></span>
<span id="cb47-15">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter the values of the second point: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-16">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-17">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> x1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-18">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-19">    cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> y1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-20">    </span>
<span id="cb47-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// distance formula: sqrt((x1-x0)² + (y1-y0)²)</span></span>
<span id="cb47-22">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> distanceFormula <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb47-23">    </span>
<span id="cb47-24">    cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The length of the line is: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> distanceFormula <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-25"></span>
<span id="cb47-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li>Further using <code>cin &gt;&gt;</code> in a function where I have to calculate many values and manipulate them:</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb48-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile gasMileage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>cpp</span>
<span id="cb48-2"></span>
<span id="cb48-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb48-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string&gt;</span></span>
<span id="cb48-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cmath&gt;</span></span>
<span id="cb48-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-7"></span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb48-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb48-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-12">  string carBrand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-13">  string carModel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> carCapacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> mpg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-16"></span>
<span id="cb48-17">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the Distance of the Trip: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-18">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-19"></span>
<span id="cb48-20">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the rand of the car: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-21">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> carBrand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-22"></span>
<span id="cb48-23">  cout  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the car Model: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-24">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> carModel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-25"></span>
<span id="cb48-26">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the fuel Tank Capacity: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-27">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> carCapacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-28">  </span>
<span id="cb48-29">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the MPG of the car: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-30">  cin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> mpg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-31"></span>
<span id="cb48-32"></span>
<span id="cb48-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> mileageOnFullTank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-34">  mileageOnFullTank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> carCapacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-35">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> numOfStops <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mileageOnFullTank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb48-36">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gasRequired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mpg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-37">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> galonsLeft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>numOfStops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> carCapacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> gasRequired<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-38">  </span>
<span id="cb48-39">  </span>
<span id="cb48-40">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For a trip of "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" miles"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-41">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" a "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> carBrand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" model "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> carModel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" requires "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> gasRequired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Gallons Of Gas "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-42">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" will require "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> numOfStops <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" stop for gas "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-43">  cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" and will have "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> galonsLeft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" gallons of gas left in the tank"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb48-45"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>  </span></code></pre></div></div>
</section>
</section>
<section id="day-1-recap" class="level2">
<h2 class="anchored" data-anchor-id="day-1-recap">Day 1 Recap:</h2>
<ul>
<li><p>Today I started exploring C++ as a Python programmer, motivated by my goal of writing CUDA kernels. I covered the following fundamentals:</p></li>
<li><p>The compilation process (pre-processor → compiler → assembler → linker) and how C++ differs from interpreted languages.</p></li>
<li><p>How to <strong><code>include</code></strong> libraries using <code>#include</code>, and the special role of the <strong><code>main()</code></strong> function.</p></li>
<li><p>Basic printing with <strong><code>std::cout</code></strong>, ending lines with <strong><code>&lt;&lt; std::endl</code></strong>, and formatting simple output.</p></li>
<li><p><strong>Variables</strong>: declaring types explicitly (e.g., <code>int</code>, <code>float</code>), how static typing enforces constraints, and understanding variables as named boxes in memory.</p></li>
<li><p>Fundamental data types: integers, floats, characters, strings; string operations like length, indexing, concatenation, substrings.</p></li>
<li><p>A simple user-input example: using <strong><code>std::cin</code></strong> to build a basic “weekly pay” calculator.</p></li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>Kernel Engineering</category>
  <category>Cuda</category>
  <category>Pytorch</category>
  <category>CPP</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/basicsLesson1.html</guid>
  <pubDate>Thu, 18 Sep 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Learning_CPP/PythonVsCPP.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Learning Basics of Tensors</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/GPU engineering/Tensors.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div></div>
</div>
<div id="cell-2" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0fc9b2e8-a706-43ff-c359-509d9da426a2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb2-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-3">a.shape, a.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(torch.Size([2, 3]), (3, 1))</code></pre>
</div>
</div>
<section id="tensors" class="level1">
<h1>Tensors:</h1>
<ul>
<li>We could define a <strong>Tensor</strong> as container for numerical data, arranged in regular grid, with a defined: shape and layout.</li>
<li>basically we have 4 levels of tensors:
<ul>
<li><strong>Scalar</strong>: just a number <em><code>e.i 8</code></em> ==&gt; 0D</li>
<li><strong>Vector</strong>: a <code>1D</code> row of numbers <em><code>[1, 2]</code></em></li>
<li><strong>Matrix</strong>: a <code>2D</code> grid of rows &amp; columns <em><code>[[1, 2], [4, 1]]</code></em></li>
<li><strong>Tensor</strong>: any <code>nD</code> generalization of this <code>3D, 4D..</code></li>
</ul></li>
</ul>
<div id="cell-4" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e5e4ae76-0042-492d-a0c0-890640d9a552">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scalar has 0 dimension:</span></span>
<span id="cb4-2">scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-3">scalar.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>0</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="cd4a02a3-6604-4d69-f98b-9fc181e2a940">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vector is 1D row of numbers:</span></span>
<span id="cb6-2">vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb6-3">vec.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="c506f567-61e7-4b50-e980-bd894318a866">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix is a 2D grid:</span></span>
<span id="cb8-2">mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])</span>
<span id="cb8-3">mat.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>2</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="2eeac527-92c3-4819-9350-3c494220c7b3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor is and shape of data that could be represented in 3 or more dimensions:</span></span>
<span id="cb10-2">ten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb10-3">ten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ten.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-4">ten.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>3</code></pre>
</div>
</div>
<section id="data-blobs" class="level2">
<h2 class="anchored" data-anchor-id="data-blobs">Data BLOBs:</h2>
<ul>
<li>The last tensor we’ve created has a very interesting proprety, first we created the number of elements we want <code>12</code> then we reshape it by repspecting 2 rules:
<ul>
<li>the total number of elements should be <code>12</code> exactly</li>
<li>these <code>12</code> elements should be distributed on <code>3</code> dimensions in order to call it tensor</li>
<li>we decided to ge with <code>(2, 3, 2)</code> but we could go with any distribution as long as we respect the 2 rules.</li>
</ul></li>
<li>The <code>12</code> represent the <strong>data BLOB</strong> while the distribution represent the <strong>metadata</strong> that tells us how the data is shaped.</li>
<li>Data Blob is a large, row chunk of numerical data with no assumed structure untill interpreted, it’s shapeless untill we attach metadata to it.</li>
<li>In the context of Kernel engineering we are not working with well defined tensors shapes, but with:
<ul>
<li><strong>pointers</strong> to data blobs in memory</li>
<li>some <strong>metadata</strong> (shape, strides, dtype)</li>
<li>a set of <strong>indexing rules</strong> to access the correct slice</li>
</ul></li>
<li>So if we write a tensor:</li>
</ul>
<div id="cell-9" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div></div>
</div>
<ul>
<li>Under the hood the data is stored in a single flat buffer <strong><code>60 floats</code></strong></li>
<li>The shape tells us: This is 3 blocks of 4 rows of 5 elements.</li>
</ul>
<section id="stride" class="level3">
<h3 class="anchored" data-anchor-id="stride">Stride:</h3>
<ul>
<li>In the context of Kernel engineering the <strong>Stride</strong> is the most important key. Since data is stored in the memory as blobs, stride tells us how many elements to skip in memory to move to the next element along a specific dimension. Think of it as the “memory jump” for each axis.</li>
</ul>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="44372d70-9f1d-4dc7-b979-e6d151386386">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-2">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-3">z.shape, z.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(torch.Size([3, 2]), (2, 1))</code></pre>
</div>
</div>
<ul>
<li>The stride says:
<ul>
<li>to move one row: jump 3 elements <code>stride[0]</code></li>
<li>to move one column: jumpt one element <code>stride[1]</code></li>
</ul></li>
<li>So in our case the tensor <code>z</code> has a stride of <code>(2, 1)</code>:
<ul>
<li><code>2</code> is the number of jumps in order to get to the next <strong><code>row</code></strong></li>
<li>while <code>1</code> is the number of jump to get to the next <strong><code>column</code></strong></li>
</ul></li>
</ul>
</section>
<section id="transposed-stride" class="level3">
<h3 class="anchored" data-anchor-id="transposed-stride">Transposed Stride:</h3>
<ul>
<li>What if we transposed the tensor <code>z</code>? will the stride remain the same?</li>
</ul>
<div id="cell-15" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fbc25ca1-6b7d-4fc1-e96b-9a49408fb3a2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.t()</span>
<span id="cb15-2">z.stride(), y.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>((2, 1), (1, 2))</code></pre>
</div>
</div>
<ul>
<li>The transpose changed the stride but the data blob remain the same:</li>
</ul>
<div id="cell-17" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="31da5384-c4b5-4077-dc63-2d841ece69c2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">z.data_ptr() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y.data_ptr()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="stride-exercises" class="level3">
<h3 class="anchored" data-anchor-id="stride-exercises">Stride exercises:</h3>
<ul>
<li>Learn how stride works with some simple Pytorch examples: #### <strong>Exercise 1: Basic 2D Tensor</strong> Create a 2D tensor and inspect its stride.</li>
</ul>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0128c051-e83d-41ad-fe57-abbd709e80ac">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is a 2D tensor</span></span>
<span id="cb19-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># its shape:</span></span>
<span id="cb19-4">x.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>torch.Size([2, 3])</code></pre>
</div>
</div>
<ul>
<li>How to think about its stride?:
<ul>
<li>In order to move to the next row how many element should we pass? ==&gt; <code>3</code></li>
<li>In order to get to the next column how many elements we need to jump? ==&gt; <code>1</code></li>
</ul></li>
<li>So the stride is <code>(3, 1)</code></li>
</ul>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7f8633d3-3e8f-4e15-bc66-e5a5fa99eedf">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">x, x.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(tensor([[0, 1, 2],
         [3, 4, 5]]),
 (3, 1))</code></pre>
</div>
</div>
<section id="exercise-2-transposed-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-2-transposed-tensor"><strong>Exercise 2: Transposed Tensor</strong></h4>
<ul>
<li>Transpose the tensor and observe how the stride changes.</li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="5284842f-1a8c-4f02-9c6d-8c6d5a5ffc31">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.t()</span>
<span id="cb23-2">y, y.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(tensor([[0, 3],
         [1, 4],
         [2, 5]]),
 torch.Size([3, 2]))</code></pre>
</div>
</div>
<ul>
<li>In this case and since we reversed the shape, its obvious that the stride also will be reversed: <code>(1, 3)</code></li>
<li>What’s important is that <code>Pytorch</code> doesn’t create new <strong>copy</strong> of <code>x</code> when trasnposed, it only redefine the way the new tensor is <code>viewed</code> with creating new shape and new stride.</li>
</ul>
<div id="cell-25" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="347db58d-86ff-46aa-cf41-de0757d736ca">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">y.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(1, 3)</code></pre>
</div>
</div>
</section>
<section id="exercise-3-unsqueezed-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-3-unsqueezed-tensor"><strong>Exercise 3: Unsqueezed Tensor</strong></h4>
<ul>
<li>Add a new dimension and understand how stride adjusts.</li>
</ul>
<div id="cell-27" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="bfa74c70-ad2a-4599-8fa2-f4218eb0ca55">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-2">x.shape, z.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(torch.Size([2, 3]), torch.Size([1, 2, 3]))</code></pre>
</div>
</div>
<ul>
<li>What happend here is that Pytorch pretend there’s a new outer dim, so the shape is changed from <code>[2, 3]</code> to <code>[1, 2, 3]</code>.</li>
<li>the new dim <code>dim[0]</code> should have stride of <code>6</code>, because in order to get to a new element in that dim (even that there’s only one element in that dim) we need to pass all other elements in both dimensions <code>[1]</code> and <code>[2]</code>, which both contain <code>2*3 = 6</code>.</li>
<li><strong>RULE</strong>: the stride of the new dim is always the product of the inner strides
<ul>
<li>so the stride should be: <code>(6, 3, 1)</code></li>
</ul></li>
</ul>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="089e63ea-aaae-4bb0-b63d-1c12e83bc1df">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">z.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(6, 3, 1)</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7ae5955c-bc3d-4aa7-8109-816f3ea6583a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-2">d, d.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(tensor([[0, 1, 2, 3],
         [4, 5, 6, 7]]),
 torch.Size([2, 4]))</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="70c7e7f2-494f-4ec2-a073-ecb563f945fa">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">d.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>(4, 1)</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f9545653-1031-45f9-a7e9-da777a151f22">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-2">d1</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor([[[0, 1, 2, 3]],

        [[4, 5, 6, 7]]])</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9856b77f-b001-49a0-9790-2c8ce2bc6dd8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">d1.shape, d1.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>(torch.Size([2, 1, 4]), (4, 4, 1))</code></pre>
</div>
</div>
</section>
<section id="exercise-4-expanded-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-4-expanded-tensor">Exercise 4: Expanded Tensor</h4>
<ul>
<li>Broadcast a tensor without copying memory.</li>
</ul>
<div id="cell-35" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb39-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.expand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
</div>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="5c45f951-a487-4ecd-ab5c-62752cbecc08">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">a.shape, b.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>(torch.Size([1, 3]), torch.Size([2, 3]))</code></pre>
</div>
</div>
<div id="cell-37" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d88f0675-1d16-4a56-b76f-8664295dd9b2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">a.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(3, 1)</code></pre>
</div>
</div>
<ul>
<li>Here we have a tensor <code>a</code> of shape <code>[1, 3]</code> then we use <code>expand</code> to make tensor <code>b</code> with shape of <code>[2, 3]</code>.</li>
<li>the method <code>expand</code> doesn’t create a new copy of the original tensor rather then virtually expanding a dimension by repeating it without chnaging the memory.</li>
<li>In this case the <code>dim[0]</code> will be virtually repeated <code>2</code> times.</li>
<li>In the original tensor <code>a</code> we have a stride of <code>(3, 1)</code>:
<ul>
<li>In order to get to the next element along <code>dim=0</code>(rows) we have to move 3 steps in memory</li>
<li>To move to the next element along <code>dim=1</code> (columns), step by 1 in memory.</li>
</ul></li>
<li>Now with tensor <code>b</code>, as we say <code>expand</code> add a virtuall element to the <code>dim=0</code>, it add a new row, but in memory we don’t change anything. So to move to the next row we don’t have to step at all, so the stride at that dimension will be <code>0</code>.</li>
<li>The other <code>dim=1</code> remain the same <code>1</code></li>
</ul>
<div id="cell-39" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="73863bc4-8451-4165-f1ad-ecceb8b6ec59">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">b.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>(0, 1)</code></pre>
</div>
</div>
</section>
<section id="exercise-5-permuted-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-5-permuted-tensor">Exercise 5: Permuted Tensor</h4>
<p>Change dimension order and inspect stride layout.</p>
<div id="cell-41" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb46-2">y3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x3.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></div>
</div>
<div id="cell-42" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9c9156d3-835d-43da-fa89-1c2cc1942fa4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">x3, x3.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>(tensor([[[-4.9521e-01, -1.5715e+00,  9.7796e-01, -2.6375e-01],
          [ 1.0992e+00,  4.2912e-01,  7.5855e-02,  1.6052e+00],
          [-7.1012e-01,  7.3460e-01, -3.9331e-01,  1.0008e+00]],
 
         [[ 5.4850e-01, -1.6360e+00,  1.8978e-01, -1.3920e-01],
          [ 1.4362e-01,  4.4029e-01, -2.0576e-01, -2.7227e-01],
          [-1.2247e-03,  1.3967e+00, -5.3473e-01, -7.4465e-01]]]),
 torch.Size([2, 3, 4]))</code></pre>
</div>
</div>
<div id="cell-43" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="32c43f4e-3555-48f4-96fe-c07cce295440">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">x3.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>(12, 4, 1)</code></pre>
</div>
</div>
<div id="cell-44" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="6ae9adec-ace9-415e-e2c5-7fe49b2f320a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">y3, y3.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>(tensor([[[-4.9521e-01,  1.0992e+00, -7.1012e-01],
          [ 5.4850e-01,  1.4362e-01, -1.2247e-03]],
 
         [[-1.5715e+00,  4.2912e-01,  7.3460e-01],
          [-1.6360e+00,  4.4029e-01,  1.3967e+00]],
 
         [[ 9.7796e-01,  7.5855e-02, -3.9331e-01],
          [ 1.8978e-01, -2.0576e-01, -5.3473e-01]],
 
         [[-2.6375e-01,  1.6052e+00,  1.0008e+00],
          [-1.3920e-01, -2.7227e-01, -7.4465e-01]]]),
 torch.Size([4, 2, 3]))</code></pre>
</div>
</div>
<ul>
<li><p>To move along the new dimension 0 (size 4, originally dim 2), you step by 1 in memory (same as original dim 2).</p></li>
<li><p>To move along the new dimension 1 (size 2, originally dim 0), you step by 12 in memory (same as original dim 0).</p></li>
<li><p>To move along the new dimension 2 (size 3, originally dim 1), you step by 4 in memory (same as original dim 1).</p></li>
<li><p>This shows that permutation changes the order of strides but not their values. The new strides correspond to the original strides in the permuted order.</p></li>
</ul>
</section>
</section>
</section>
<section id="view" class="level2">
<h2 class="anchored" data-anchor-id="view">View:</h2>
<ul>
<li><p>In PyTorch, viewing a tensor refers to creating a new tensor that shares the same underlying data storage as the original tensor but with a different shape, stride, or metadata. This means the viewed tensor does not copy the data; instead, it provides an alternative way to interpret the existing data in memory. 1- Memory:</p></li>
<li><p>View allow tensors to share memory.</p></li>
<li><p>Modifying the viewed tensor will modifies the original tensor. 2- Shape and Stride adjustement:</p></li>
<li><p>As we saw earlier view can reinterpret a tensor shape end stride without copying it or changing the memory. 3- Zero-Cost Operation:</p></li>
<li><p>Viewing is efficient because it does not allocate new memory or copy data.</p></li>
<li><p>Operations like <code>view()</code>, <code>transpose()</code>, <code>permute()</code>, <code>expand()</code>, and slicing often return views.</p></li>
</ul>
</section>
<section id="broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="broadcasting">Broadcasting:</h2>
<ul>
<li>Broadcasting automatically expands smaller tensors to match the shape of larger tensors for element-wise operations by following specific rules:
<ul>
<li>Tensors are aligned from rights to left</li>
<li>if sizes are equal then they are compatible</li>
<li>If one tensor size is 1, it’s streched to match the other</li>
<li>If one tensor is missing a dimension, it’s treated like size 1 dimension (then streched to match)</li>
</ul></li>
</ul>
<div id="cell-48" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding vector to scalar</span></span>
<span id="cb53-2">vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb53-3">scal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb53-4">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scal</span></code></pre></div></div>
</div>
<div id="cell-49" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fa1abfec-0f26-4215-f285-01e9d1826370">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vec, vec.shape)</span>
<span id="cb54-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(scal, scal.shape)</span>
<span id="cb54-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out, out.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([1, 2, 3]) torch.Size([3])
tensor(5) torch.Size([])
tensor([6, 7, 8]) torch.Size([3])</code></pre>
</div>
</div>
<div id="cell-50" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor size 1</span></span>
<span id="cb56-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2, 2)</span></span>
<span id="cb56-3">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]])         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (1, 2)</span></span>
<span id="cb56-4">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B</span></code></pre></div></div>
</div>
<div id="cell-51" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="047ae45a-3dc1-4f6e-c882-24269db94526">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(A, A.shape)</span>
<span id="cb57-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B, B.shape)</span>
<span id="cb57-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C, C.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]]) torch.Size([2, 2])
tensor([[10, 20]]) torch.Size([1, 2])
tensor([[11, 22],
        [13, 24]]) torch.Size([2, 2])</code></pre>
</div>
</div>
<div id="cell-52" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor missing a dimension:</span></span>
<span id="cb59-2">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2, 2)</span></span>
<span id="cb59-3">R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2,)</span></span>
<span id="cb59-4">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span></code></pre></div></div>
</div>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="44b5215e-2b41-4cb5-82a6-01edfca09c5f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(D, D.shape)</span>
<span id="cb60-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(R, R.shape)</span>
<span id="cb60-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(S, S.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]]) torch.Size([2, 2])
tensor([10, 20]) torch.Size([2])
tensor([[11, 22],
        [13, 24]]) torch.Size([2, 2])</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Pytorch</category>
  <category>Deep Learning</category>
  <category>Linear Algebra</category>
  <category>GPU Programming</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/GPU engineering/Tensors.html</guid>
  <pubDate>Sat, 26 Jul 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/GPU engineering/Tensors.ipynb" medium="image"/>
</item>
<item>
  <title>Learning Basics of Tensors</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/docs/posts/GPU engineering/Tensors.html</link>
  <description><![CDATA[ 




<div id="cell-1" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div></div>
</div>
<div id="cell-2" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0fc9b2e8-a706-43ff-c359-509d9da426a2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb2-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-3">a.shape, a.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>(torch.Size([2, 3]), (3, 1))</code></pre>
</div>
</div>
<section id="tensors" class="level1">
<h1>Tensors:</h1>
<ul>
<li>We could define a <strong>Tensor</strong> as container for numerical data, arranged in regular grid, with a defined: shape and layout.</li>
<li>basically we have 4 levels of tensors:
<ul>
<li><strong>Scalar</strong>: just a number <em><code>e.i 8</code></em> ==&gt; 0D</li>
<li><strong>Vector</strong>: a <code>1D</code> row of numbers <em><code>[1, 2]</code></em></li>
<li><strong>Matrix</strong>: a <code>2D</code> grid of rows &amp; columns <em><code>[[1, 2], [4, 1]]</code></em></li>
<li><strong>Tensor</strong>: any <code>nD</code> generalization of this <code>3D, 4D..</code></li>
</ul></li>
</ul>
<div id="cell-4" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e5e4ae76-0042-492d-a0c0-890640d9a552">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scalar has 0 dimension:</span></span>
<span id="cb4-2">scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-3">scalar.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>0</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="cd4a02a3-6604-4d69-f98b-9fc181e2a940">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vector is 1D row of numbers:</span></span>
<span id="cb6-2">vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb6-3">vec.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1</code></pre>
</div>
</div>
<div id="cell-6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="c506f567-61e7-4b50-e980-bd894318a866">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix is a 2D grid:</span></span>
<span id="cb8-2">mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])</span>
<span id="cb8-3">mat.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>2</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="2eeac527-92c3-4819-9350-3c494220c7b3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor is and shape of data that could be represented in 3 or more dimensions:</span></span>
<span id="cb10-2">ten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb10-3">ten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ten.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-4">ten.ndim</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>3</code></pre>
</div>
</div>
<section id="data-blobs" class="level2">
<h2 class="anchored" data-anchor-id="data-blobs">Data BLOBs:</h2>
<ul>
<li>The last tensor we’ve created has a very interesting proprety, first we created the number of elements we want <code>12</code> then we reshape it by repspecting 2 rules:
<ul>
<li>the total number of elements should be <code>12</code> exactly</li>
<li>these <code>12</code> elements should be distributed on <code>3</code> dimensions in order to call it tensor</li>
<li>we decided to ge with <code>(2, 3, 2)</code> but we could go with any distribution as long as we respect the 2 rules.</li>
</ul></li>
<li>The <code>12</code> represent the <strong>data BLOB</strong> while the distribution represent the <strong>metadata</strong> that tells us how the data is shaped.</li>
<li>Data Blob is a large, row chunk of numerical data with no assumed structure untill interpreted, it’s shapeless untill we attach metadata to it.</li>
<li>In the context of Kernel engineering we are not working with well defined tensors shapes, but with:
<ul>
<li><strong>pointers</strong> to data blobs in memory</li>
<li>some <strong>metadata</strong> (shape, strides, dtype)</li>
<li>a set of <strong>indexing rules</strong> to access the correct slice</li>
</ul></li>
<li>So if we write a tensor:</li>
</ul>
<div id="cell-9" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div></div>
</div>
<ul>
<li>Under the hood the data is stored in a single flat buffer <strong><code>60 floats</code></strong></li>
<li>The shape tells us: This is 3 blocks of 4 rows of 5 elements.</li>
</ul>
<section id="stride" class="level3">
<h3 class="anchored" data-anchor-id="stride">Stride:</h3>
<ul>
<li>In the context of Kernel engineering the <strong>Stride</strong> is the most important key. Since data is stored in the memory as blobs, stride tells us how many elements to skip in memory to move to the next element along a specific dimension. Think of it as the “memory jump” for each axis.</li>
</ul>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="44372d70-9f1d-4dc7-b979-e6d151386386">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-2">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-3">z.shape, z.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>(torch.Size([3, 2]), (2, 1))</code></pre>
</div>
</div>
<ul>
<li>The stride says:
<ul>
<li>to move one row: jump 3 elements <code>stride[0]</code></li>
<li>to move one column: jumpt one element <code>stride[1]</code></li>
</ul></li>
<li>So in our case the tensor <code>z</code> has a stride of <code>(2, 1)</code>:
<ul>
<li><code>2</code> is the number of jumps in order to get to the next <strong><code>row</code></strong></li>
<li>while <code>1</code> is the number of jump to get to the next <strong><code>column</code></strong></li>
</ul></li>
</ul>
</section>
<section id="transposed-stride" class="level3">
<h3 class="anchored" data-anchor-id="transposed-stride">Transposed Stride:</h3>
<ul>
<li>What if we transposed the tensor <code>z</code>? will the stride remain the same?</li>
</ul>
<div id="cell-15" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fbc25ca1-6b7d-4fc1-e96b-9a49408fb3a2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.t()</span>
<span id="cb15-2">z.stride(), y.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>((2, 1), (1, 2))</code></pre>
</div>
</div>
<ul>
<li>The transpose changed the stride but the data blob remain the same:</li>
</ul>
<div id="cell-17" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="31da5384-c4b5-4077-dc63-2d841ece69c2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">z.data_ptr() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y.data_ptr()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="stride-exercises" class="level3">
<h3 class="anchored" data-anchor-id="stride-exercises">Stride exercises:</h3>
<ul>
<li>Learn how stride works with some simple Pytorch examples: #### <strong>Exercise 1: Basic 2D Tensor</strong> Create a 2D tensor and inspect its stride.</li>
</ul>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0128c051-e83d-41ad-fe57-abbd709e80ac">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is a 2D tensor</span></span>
<span id="cb19-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># its shape:</span></span>
<span id="cb19-4">x.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>torch.Size([2, 3])</code></pre>
</div>
</div>
<ul>
<li>How to think about its stride?:
<ul>
<li>In order to move to the next row how many element should we pass? ==&gt; <code>3</code></li>
<li>In order to get to the next column how many elements we need to jump? ==&gt; <code>1</code></li>
</ul></li>
<li>So the stride is <code>(3, 1)</code></li>
</ul>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7f8633d3-3e8f-4e15-bc66-e5a5fa99eedf">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">x, x.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(tensor([[0, 1, 2],
         [3, 4, 5]]),
 (3, 1))</code></pre>
</div>
</div>
<section id="exercise-2-transposed-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-2-transposed-tensor"><strong>Exercise 2: Transposed Tensor</strong></h4>
<ul>
<li>Transpose the tensor and observe how the stride changes.</li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="5284842f-1a8c-4f02-9c6d-8c6d5a5ffc31">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.t()</span>
<span id="cb23-2">y, y.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(tensor([[0, 3],
         [1, 4],
         [2, 5]]),
 torch.Size([3, 2]))</code></pre>
</div>
</div>
<ul>
<li>In this case and since we reversed the shape, its obvious that the stride also will be reversed: <code>(1, 3)</code></li>
<li>What’s important is that <code>Pytorch</code> doesn’t create new <strong>copy</strong> of <code>x</code> when trasnposed, it only redefine the way the new tensor is <code>viewed</code> with creating new shape and new stride.</li>
</ul>
<div id="cell-25" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="347db58d-86ff-46aa-cf41-de0757d736ca">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">y.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(1, 3)</code></pre>
</div>
</div>
</section>
<section id="exercise-3-unsqueezed-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-3-unsqueezed-tensor"><strong>Exercise 3: Unsqueezed Tensor</strong></h4>
<ul>
<li>Add a new dimension and understand how stride adjusts.</li>
</ul>
<div id="cell-27" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="bfa74c70-ad2a-4599-8fa2-f4218eb0ca55">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-2">x.shape, z.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(torch.Size([2, 3]), torch.Size([1, 2, 3]))</code></pre>
</div>
</div>
<ul>
<li>What happend here is that Pytorch pretend there’s a new outer dim, so the shape is changed from <code>[2, 3]</code> to <code>[1, 2, 3]</code>.</li>
<li>the new dim <code>dim[0]</code> should have stride of <code>6</code>, because in order to get to a new element in that dim (even that there’s only one element in that dim) we need to pass all other elements in both dimensions <code>[1]</code> and <code>[2]</code>, which both contain <code>2*3 = 6</code>.</li>
<li><strong>RULE</strong>: the stride of the new dim is always the product of the inner strides
<ul>
<li>so the stride should be: <code>(6, 3, 1)</code></li>
</ul></li>
</ul>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="089e63ea-aaae-4bb0-b63d-1c12e83bc1df">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1">z.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(6, 3, 1)</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7ae5955c-bc3d-4aa7-8109-816f3ea6583a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-2">d, d.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(tensor([[0, 1, 2, 3],
         [4, 5, 6, 7]]),
 torch.Size([2, 4]))</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="70c7e7f2-494f-4ec2-a073-ecb563f945fa">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">d.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>(4, 1)</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f9545653-1031-45f9-a7e9-da777a151f22">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-2">d1</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor([[[0, 1, 2, 3]],

        [[4, 5, 6, 7]]])</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9856b77f-b001-49a0-9790-2c8ce2bc6dd8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">d1.shape, d1.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>(torch.Size([2, 1, 4]), (4, 4, 1))</code></pre>
</div>
</div>
</section>
<section id="exercise-4-expanded-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-4-expanded-tensor">Exercise 4: Expanded Tensor</h4>
<ul>
<li>Broadcast a tensor without copying memory.</li>
</ul>
<div id="cell-35" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb39-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.expand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
</div>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="5c45f951-a487-4ecd-ab5c-62752cbecc08">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">a.shape, b.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>(torch.Size([1, 3]), torch.Size([2, 3]))</code></pre>
</div>
</div>
<div id="cell-37" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d88f0675-1d16-4a56-b76f-8664295dd9b2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">a.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(3, 1)</code></pre>
</div>
</div>
<ul>
<li>Here we have a tensor <code>a</code> of shape <code>[1, 3]</code> then we use <code>expand</code> to make tensor <code>b</code> with shape of <code>[2, 3]</code>.</li>
<li>the method <code>expand</code> doesn’t create a new copy of the original tensor rather then virtually expanding a dimension by repeating it without chnaging the memory.</li>
<li>In this case the <code>dim[0]</code> will be virtually repeated <code>2</code> times.</li>
<li>In the original tensor <code>a</code> we have a stride of <code>(3, 1)</code>:
<ul>
<li>In order to get to the next element along <code>dim=0</code>(rows) we have to move 3 steps in memory</li>
<li>To move to the next element along <code>dim=1</code> (columns), step by 1 in memory.</li>
</ul></li>
<li>Now with tensor <code>b</code>, as we say <code>expand</code> add a virtuall element to the <code>dim=0</code>, it add a new row, but in memory we don’t change anything. So to move to the next row we don’t have to step at all, so the stride at that dimension will be <code>0</code>.</li>
<li>The other <code>dim=1</code> remain the same <code>1</code></li>
</ul>
<div id="cell-39" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="73863bc4-8451-4165-f1ad-ecceb8b6ec59">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">b.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>(0, 1)</code></pre>
</div>
</div>
</section>
<section id="exercise-5-permuted-tensor" class="level4">
<h4 class="anchored" data-anchor-id="exercise-5-permuted-tensor">Exercise 5: Permuted Tensor</h4>
<p>Change dimension order and inspect stride layout.</p>
<div id="cell-41" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">x3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb46-2">y3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x3.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></div>
</div>
<div id="cell-42" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9c9156d3-835d-43da-fa89-1c2cc1942fa4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">x3, x3.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>(tensor([[[-4.9521e-01, -1.5715e+00,  9.7796e-01, -2.6375e-01],
          [ 1.0992e+00,  4.2912e-01,  7.5855e-02,  1.6052e+00],
          [-7.1012e-01,  7.3460e-01, -3.9331e-01,  1.0008e+00]],
 
         [[ 5.4850e-01, -1.6360e+00,  1.8978e-01, -1.3920e-01],
          [ 1.4362e-01,  4.4029e-01, -2.0576e-01, -2.7227e-01],
          [-1.2247e-03,  1.3967e+00, -5.3473e-01, -7.4465e-01]]]),
 torch.Size([2, 3, 4]))</code></pre>
</div>
</div>
<div id="cell-43" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="32c43f4e-3555-48f4-96fe-c07cce295440">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">x3.stride()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>(12, 4, 1)</code></pre>
</div>
</div>
<div id="cell-44" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="6ae9adec-ace9-415e-e2c5-7fe49b2f320a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">y3, y3.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>(tensor([[[-4.9521e-01,  1.0992e+00, -7.1012e-01],
          [ 5.4850e-01,  1.4362e-01, -1.2247e-03]],
 
         [[-1.5715e+00,  4.2912e-01,  7.3460e-01],
          [-1.6360e+00,  4.4029e-01,  1.3967e+00]],
 
         [[ 9.7796e-01,  7.5855e-02, -3.9331e-01],
          [ 1.8978e-01, -2.0576e-01, -5.3473e-01]],
 
         [[-2.6375e-01,  1.6052e+00,  1.0008e+00],
          [-1.3920e-01, -2.7227e-01, -7.4465e-01]]]),
 torch.Size([4, 2, 3]))</code></pre>
</div>
</div>
<ul>
<li><p>To move along the new dimension 0 (size 4, originally dim 2), you step by 1 in memory (same as original dim 2).</p></li>
<li><p>To move along the new dimension 1 (size 2, originally dim 0), you step by 12 in memory (same as original dim 0).</p></li>
<li><p>To move along the new dimension 2 (size 3, originally dim 1), you step by 4 in memory (same as original dim 1).</p></li>
<li><p>This shows that permutation changes the order of strides but not their values. The new strides correspond to the original strides in the permuted order.</p></li>
</ul>
</section>
</section>
</section>
<section id="view" class="level2">
<h2 class="anchored" data-anchor-id="view">View:</h2>
<ul>
<li><p>In PyTorch, viewing a tensor refers to creating a new tensor that shares the same underlying data storage as the original tensor but with a different shape, stride, or metadata. This means the viewed tensor does not copy the data; instead, it provides an alternative way to interpret the existing data in memory. 1- Memory:</p></li>
<li><p>View allow tensors to share memory.</p></li>
<li><p>Modifying the viewed tensor will modifies the original tensor. 2- Shape and Stride adjustement:</p></li>
<li><p>As we saw earlier view can reinterpret a tensor shape end stride without copying it or changing the memory. 3- Zero-Cost Operation:</p></li>
<li><p>Viewing is efficient because it does not allocate new memory or copy data.</p></li>
<li><p>Operations like <code>view()</code>, <code>transpose()</code>, <code>permute()</code>, <code>expand()</code>, and slicing often return views.</p></li>
</ul>
</section>
<section id="broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="broadcasting">Broadcasting:</h2>
<ul>
<li>Broadcasting automatically expands smaller tensors to match the shape of larger tensors for element-wise operations by following specific rules:
<ul>
<li>Tensors are aligned from rights to left</li>
<li>if sizes are equal then they are compatible</li>
<li>If one tensor size is 1, it’s streched to match the other</li>
<li>If one tensor is missing a dimension, it’s treated like size 1 dimension (then streched to match)</li>
</ul></li>
</ul>
<div id="cell-48" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adding vector to scalar</span></span>
<span id="cb53-2">vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb53-3">scal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb53-4">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scal</span></code></pre></div></div>
</div>
<div id="cell-49" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fa1abfec-0f26-4215-f285-01e9d1826370">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(vec, vec.shape)</span>
<span id="cb54-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(scal, scal.shape)</span>
<span id="cb54-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out, out.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([1, 2, 3]) torch.Size([3])
tensor(5) torch.Size([])
tensor([6, 7, 8]) torch.Size([3])</code></pre>
</div>
</div>
<div id="cell-50" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor size 1</span></span>
<span id="cb56-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2, 2)</span></span>
<span id="cb56-3">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]])         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (1, 2)</span></span>
<span id="cb56-4">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B</span></code></pre></div></div>
</div>
<div id="cell-51" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="047ae45a-3dc1-4f6e-c882-24269db94526">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(A, A.shape)</span>
<span id="cb57-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B, B.shape)</span>
<span id="cb57-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C, C.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]]) torch.Size([2, 2])
tensor([[10, 20]]) torch.Size([1, 2])
tensor([[11, 22],
        [13, 24]]) torch.Size([2, 2])</code></pre>
</div>
</div>
<div id="cell-52" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor missing a dimension:</span></span>
<span id="cb59-2">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2, 2)</span></span>
<span id="cb59-3">R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (2,)</span></span>
<span id="cb59-4">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span></code></pre></div></div>
</div>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="44b5215e-2b41-4cb5-82a6-01edfca09c5f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(D, D.shape)</span>
<span id="cb60-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(R, R.shape)</span>
<span id="cb60-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(S, S.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]]) torch.Size([2, 2])
tensor([10, 20]) torch.Size([2])
tensor([[11, 22],
        [13, 24]]) torch.Size([2, 2])</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Pytorch</category>
  <category>Deep Learning</category>
  <category>Linear Algebra</category>
  <category>GPU Programming</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/docs/posts/GPU engineering/Tensors.html</guid>
  <pubDate>Sat, 26 Jul 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/docs/posts/GPU engineering/Tensors.ipynb" medium="image"/>
</item>
<item>
  <title>Manim Project Part 1: Prepare The Dataset</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Manim-Project/Blog_0.html</link>
  <description><![CDATA[ 





<section id="the-idea-of-the-project" class="level2">
<h2 class="anchored" data-anchor-id="the-idea-of-the-project">The Idea of the project:</h2>
<p>As part of my exploration into building a prototype that generates <strong>Manim</strong> animations from natural language descriptions, I came across the <a href="https://huggingface.co/datasets/bespokelabs/bespoke-manim">bespoke-manim dataset on Hugging Face</a>. It looked like a perfect starting point — each example includes <code>narration</code>, <code>visual structure</code>, and the <code>Python code</code> used to generate an animation video using ManimCE.</p>
<p>But to actually use this dataset for fine-tuning an instruction-following model, I had to reshape it significantly. In this post, I’ll walk through how I approached this process: inspecting the raw dataset, deciding what to keep (and what to filter), and ultimately turning it into a set of <strong>instruction → output</strong> pairs that a model can learn from.</p>
</section>
<section id="exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="exploring-the-dataset">Exploring the Dataset</h2>
<p>When I loaded the dataset, it looked like this:</p>
<pre><code>DatasetDict({
    train: Dataset({
        features: [
            'subject', 'topic', 'question', 'title', 'narration',
            'visual_elements', 'equations', 'key_timestamps', 'visual_style',
            'concept_id', 'python_code', 'scene_class_name', 'generation_time',
            'filename', 'message', 'error', 'stdout', 'stderr', 'video',
            'instruction', 'output'
        ],
        num_rows: 1000
    })
})</code></pre>
<p>At first glance, I noticed that not all of the 1000 entries were usable. Some had Python code that failed to execute (captured in the error field), and others were missing videos entirely — which probably meant the code never produced a usable animation.<br>
Also I noticed that many fields are created in order to store some meta data.<br>
After analyzing each field’s potential value for fine-tuning I think not all fields are necessary:</p>
<ul>
<li><p>Essential Fields:</p>
<ul>
<li><code>question</code> : Core input that defines what the animation should explain</li>
<li><code>python_code</code> - The target output the model needs to generate</li>
<li><code>title</code> - Provides concise focus for the animation</li>
<li><code>narration</code> - Detailed explanation that significantly shapes the animation’s content</li>
<li><code>visual_elements</code>- Critical for understanding what should be visually represented in the code</li>
<li><code>equations</code> - Mathematical formulas that need to be rendered in the animation</li>
</ul></li>
<li><p>Potentially Useful Fields:</p>
<ul>
<li><code>subject and topic</code> - Provide context that might help the model generate more appropriate code</li>
<li><code>visual_style</code> - Contains styling information that influences the visual appearance</li>
<li><code>key_timestamps</code> - Provides structure for the animation sequence</li>
</ul></li>
<li><p>Unnecessary Fields:</p>
<ul>
<li><code>scene_class_name</code> - Typically derived from the code itself</li>
<li><code>generation_time</code> - Metadata unlikely to influence code generation</li>
<li><code>filename, message</code> - More metadata</li>
<li><code>stdout, stderr</code> - Execution logs not needed for generation</li>
<li><code>error</code> - sould be already filtered for successful examples</li>
<li><code>video</code> - The rendered output, not needed for training</li>
<li><code>concept_id</code> - not needed</li>
</ul></li>
</ul>
</section>
<section id="filtering-clean-examples" class="level2">
<h2 class="anchored" data-anchor-id="filtering-clean-examples">Filtering Clean Examples</h2>
<p>To keep the training signal clean, I applied a simple filter to remove any examples where:</p>
<ul>
<li><p>The <code>error</code>field was not None</p></li>
<li><p>The <code>video</code> field was None</p></li>
</ul>
<p>This will reduce the size of the dataset but we will have only data-points where the code is executable.</p>
<div id="cell-5" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> example: example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'video'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-3">)</span></code></pre></div></div>
</div>
<div id="cell-6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="3740758a-fa96-4b7a-e559-9187b06551df">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">dataset</span></code></pre></div></div>
</div>
<p>As expected now we only have <code>252</code> which is not bad, since we are now sure that the dataset is high quality.</p>
</section>
<section id="designing-prompt-format" class="level2">
<h2 class="anchored" data-anchor-id="designing-prompt-format">Designing Prompt-Format:</h2>
<p>At this point we need to create training examples by combining the essential fields into well-structured prompts paired with the working code. This will give our model the most relevant information while removing noise from the training data.<br>
Let’s implement this data transformation using the Hugging Face <code>datasets</code> library.</p>
<div id="cell-9" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_prompt(example):</span>
<span id="cb4-2">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Subject: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subject'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-3">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Topic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'topic'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-4">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-5">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-6">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Narration:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'narration'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'visual_elements'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'visual_elements'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-9">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visual Elements:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, elem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'visual_elements'</span>]):</span>
<span id="cb4-11">            prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>elem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (Timestamp: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>elem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'timestamp'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-12">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-13"></span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equations'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equations'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-15">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Equations:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, eq <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equations'</span>]):</span>
<span id="cb4-17">            prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>eq<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-18">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'visual_style'</span>]:</span>
<span id="cb4-21">        prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Visual Style:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'visual_style'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-22"></span>
<span id="cb4-23">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate manim code to create this animation:"</span></span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> prompt</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the training dataset with input-output pairs</span></span>
<span id="cb4-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_example(example):</span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb4-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>: create_prompt(example),</span>
<span id="cb4-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>: example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'python_code'</span>]</span>
<span id="cb4-32">    }</span></code></pre></div></div>
</div>
<p>This resulted in a rich, semantically meaningful prompt — not just a raw dump of metadata, but something that reads like a real instruction.</p>
</section>
<section id="mapping-instruction-output-pairs" class="level2">
<h2 class="anchored" data-anchor-id="mapping-instruction-output-pairs">Mapping Instruction → Output Pairs</h2>
<p>Once I had a clear structure for the prompt, I turned each example into an input-output pair for fine-tuning:</p>
<div id="cell-12" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map the function over the filtered dataset</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">training_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(process_example)</span></code></pre></div></div>
</div>
<div id="cell-13" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select only the columns we need for fine-tuning</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">training_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_dataset.select_columns([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instruction"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>])</span></code></pre></div></div>
</div>
<p>Now I had exactly what I needed: a list of instructions describing an animation, and the Manim Python code that generates it.</p>
</section>
<section id="train-validation-split-and-saving" class="level2">
<h2 class="anchored" data-anchor-id="train-validation-split-and-saving">Train-Validation Split and Saving</h2>
<p>To prepare for fine-tuning, I split the dataset into a training and validation set:</p>
<div id="cell-16" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span>
<span id="cb7-2">dataset_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].train_test_split(test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb7-3">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_split[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>]</span>
<span id="cb7-4">validation_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_split[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>]</span></code></pre></div></div>
</div>
<p>I also saved each split to disk and pushed the final version to the Hugging Face Hub:</p>
<div id="cell-18" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;f3599eb862f44f27a4afb61ad56ca976&quot;,&quot;e95f275568784d9d8b1bddd2c3609ce5&quot;,&quot;05d136628a5a49deb85ef176313eacdb&quot;,&quot;0dc179b9f19548e694d6f049d90b2d06&quot;,&quot;cd982e7f9b344023a3abadcf43236419&quot;,&quot;fa351e15efef42d097a09080508956bc&quot;,&quot;e999413679de4836952435127b9078fe&quot;,&quot;85fb46af4ed34eeea53c89ebce7e21bb&quot;,&quot;26e182e982d9468b8440deb5aad6f9cb&quot;,&quot;0056ba6d7ab041e6aeafc61c06ba4ab5&quot;,&quot;f32e5e2cc7194159a4963f5852ccd0f2&quot;,&quot;161f382c181941c4b1916fb48e98e6ea&quot;,&quot;8865184851094e5280183143bd14529f&quot;,&quot;bb6df7a2bcbc4bbe8ebe2cbdd7b12ceb&quot;,&quot;8c2f26167e614535acd7c250434b1040&quot;,&quot;aea3be37a3304441b87c5447b1e47749&quot;,&quot;948dc3352c1744aea3faeb37dece9533&quot;,&quot;a868907df3b9418a82c2459dcc4ae028&quot;,&quot;16431fe25a07450db462ecb6f268ae67&quot;,&quot;5bc6dcb729364d8b85b8abf8973fa56f&quot;,&quot;802ea25a90834101beccb7bb0b66e770&quot;,&quot;8f1fb65c46e145268524c4916e58dba4&quot;]}}" data-outputid="ea62a3c0-37f8-498f-e395-5503ad8b9e33">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">train_dataset.save_to_disk(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manim_train_dataset"</span>)</span>
<span id="cb8-2">validation_dataset.save_to_disk(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manim_validation_dataset"</span>)</span></code></pre></div></div>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s next?</h2>
<p>This preprocessing pipeline is just the first step in my journey to build a system that can generate Manim animations from natural language prompts. Now that I have a clean dataset of instruction → output pairs, I can move on to experimenting with fine-tuning small instruction-following models like Mistral or Phi.</p>
<p>The end goal is to create a workflow where you can go from:</p>
<p><strong><code>A structured prompt →  Valid Manim code →  A rendered animation</code></strong></p>
<p>There’s still a lot to explore — from prompt engineering and model evaluation, to automated testing of generated code and scalable video rendering. But having this dataset ready brings me much closer to building a working prototype.</p>


</section>

 ]]></description>
  <category>LLM</category>
  <category>Instruction Tuning</category>
  <category>ManimCE</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Manim-Project/Blog_0.html</guid>
  <pubDate>Wed, 09 Apr 2025 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Manim-Project/manim.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Deep Dive into PyTorch Internals: Autograd and torch.fx</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Understanding Pytorch/pytorch-1.html</link>
  <description><![CDATA[ 





<section id="deep-dive-into-pytorch-internals-autograd-and-torch.fx" class="level1">
<h1>Deep Dive into PyTorch Internals: Autograd and torch.fx</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>As I continue to deepen my understanding of machine learning systems, I’ve realized that knowing how models <em>run</em> is just as important as knowing how to <em>build</em> them. This post kicks off a series where I explore PyTorch internals, starting with two powerful components: <strong>Autograd</strong> and <strong>torch.fx</strong>.</p>
</section>
<section id="pytorch-autograd-the-engine-behind-gradient-descent" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-autograd-the-engine-behind-gradient-descent">PyTorch Autograd – The Engine Behind Gradient Descent</h2>
<section id="what-is-autograd" class="level3">
<h3 class="anchored" data-anchor-id="what-is-autograd">What Is Autograd?</h3>
<p>PyTorch’s <code>autograd</code> is a dynamic automatic differentiation engine. It records operations on tensors to build a computation graph during the forward pass, and then traverses that graph in reverse to compute gradients during the backward pass.</p>
</section>
<section id="how-it-works-internally" class="level3">
<h3 class="anchored" data-anchor-id="how-it-works-internally">How It Works Internally</h3>
<p>When you perform operations on <code>torch.Tensor</code> objects with <code>requires_grad=True</code>, PyTorch:</p>
<ol type="1">
<li>Creates a <strong>computation graph</strong> on the fly.</li>
<li>Each operation produces a <code>Function</code> object (e.g., <code>AddBackward</code>, <code>MulBackward</code>).</li>
<li>When <code>.backward()</code> is called, the engine performs <strong>reverse-mode automatic differentiation</strong>.</li>
</ol>
</section>
<section id="example-simple-chain-rule" class="level3">
<h3 class="anchored" data-anchor-id="example-simple-chain-rule">Example: Simple Chain Rule</h3>
<div id="b7a95e24-cedb-4ebc-a101-eaec289600f5" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x</span>
<span id="cb1-4">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.mean()</span>
<span id="cb1-5">z.backward()</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x.grad)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7.0 = d(x^2 + 3x)/dx at x=2</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(7.)</code></pre>
</div>
</div>
</section>
<section id="key-internals" class="level3">
<h3 class="anchored" data-anchor-id="key-internals">Key Internals</h3>
<ul>
<li><code>Tensor.grad_fn</code>: Points to the function that created the tensor.</li>
<li><code>Tensor.grad</code>: Stores the computed gradient.</li>
<li><code>torch.autograd.Function</code>: Base class for custom differentiable operations.</li>
</ul>
</section>
</section>
<section id="torch.fx-pytorchs-intermediate-representation" class="level2">
<h2 class="anchored" data-anchor-id="torch.fx-pytorchs-intermediate-representation">torch.fx – PyTorch’s Intermediate Representation</h2>
<section id="why-use-torch.fx" class="level3">
<h3 class="anchored" data-anchor-id="why-use-torch.fx">Why Use torch.fx?</h3>
<p><code>torch.fx</code> allows you to <strong>capture and transform</strong> PyTorch programs as Python-level graphs. This is useful for: - Programmatic model transformations - Debugging and visualization - Building custom compiler backends</p>
</section>
<section id="core-components" class="level3">
<h3 class="anchored" data-anchor-id="core-components">Core Components</h3>
<ul>
<li><code>GraphModule</code>: A traced model with a modifiable structure.</li>
<li><code>Tracer</code>: Walks through the model and builds a <code>Graph</code>.</li>
<li><code>Graph</code>: Contains <code>Node</code> objects that represent operations.</li>
</ul>
<div id="48abeadb-bf61-4399-812e-af9cf37c9186" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.fx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fx</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyModel(nn.Module):</span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyModel()</span>
<span id="cb3-11">traced <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fx.symbolic_trace(model)</span>
<span id="cb3-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(traced.graph)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>graph():
    %x : [num_users=1] = placeholder[target=x]
    %mul : [num_users=1] = call_function[target=operator.mul](args = (%x, 2), kwargs = {})
    %add : [num_users=1] = call_function[target=operator.add](args = (%mul, 3), kwargs = {})
    return add</code></pre>
</div>
</div>
</section>
<section id="real-world-use-cases" class="level3">
<h3 class="anchored" data-anchor-id="real-world-use-cases">Real-World Use Cases</h3>
<ul>
<li><strong>TorchDynamo</strong> and <strong>TorchInductor</strong> use FX graphs as part of the compilation pipeline.</li>
<li>FX enables <strong>quantization</strong> and <strong>pruning</strong> workflows by allowing insertion or transformation of operations.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Both Autograd and <code>torch.fx</code> are essential for understanding what happens <em>under the hood</em> in PyTorch. Whether you’re debugging models, optimizing inference, or building custom backends, mastering these tools opens the door to deeper systems-level work in AI.</p>
<p>In future posts, I plan to explore: - Implementing custom autograd functions - Writing your own FX passes for transformations - Diving into TorchDynamo and TorchInductor</p>


</section>
</section>

 ]]></description>
  <category>Pytorch</category>
  <category>Deep Learning</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Understanding Pytorch/pytorch-1.html</guid>
  <pubDate>Sat, 05 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Understanding Pytorch/illu_pytorch-49.png" medium="image" type="image/png" height="79" width="144"/>
</item>
<item>
  <title>Chapter 3: Build a Large Language Model</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-3/Chapter_3.html</link>
  <description><![CDATA[ 





<section id="about-this-chapter" class="level1">
<h1>About This Chapter:</h1>
<ul>
<li>Up to this point we learn how to:
<ul>
<li>prepare the input text for training LLMs</li>
<li>splitting text into individual word and subword tokens</li>
<li>encode tokens into vector representations, embeddings, for the LLM</li>
</ul></li>
<li>In this chapter we will:
<ul>
<li>build the most important part in the LLM architecture: <strong>The Self-Attention Mechanism</strong></li>
<li>implement four different variants of attention mechanisms:
<ol type="1">
<li><strong>Simplified self-attention</strong></li>
<li><strong>Self-attention</strong></li>
<li><strong>Causal attention</strong></li>
<li><strong>Multi-head attention</strong></li>
</ol></li>
</ul></li>
</ul>
<section id="the-problem-with-modeling-long-sequences" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-with-modeling-long-sequences">The problem with modeling long sequences</h3>
<section id="what-are-encoder-decoder-rnns" class="level4">
<h4 class="anchored" data-anchor-id="what-are-encoder-decoder-rnns">What are encoder-decoder RNNs?</h4>
<p>An encoder-decoder Recurrent Neural Network (RNN) is a sequence-to-sequence model often used in tasks like machine translation. how it works?: * <strong>Encoder:</strong> Processes the input sequence step-by-step and summarizes it into a single vector, called the <strong>context vector</strong> or <strong>hidden state</strong>. * <strong>Decoder:</strong> Takes this context vector and generates the output sequence step-by-step.</p>
</section>
<section id="the-limitation" class="level4">
<h4 class="anchored" data-anchor-id="the-limitation">The limitation</h4>
<ul>
<li><strong>Context Compression:</strong>
<ul>
<li>During encoding, the RNN compresses all the input information (e.g., the entire sentence) into a single context vector (hidden state) at the final step of the encoder.</li>
<li>When the decoder starts generating the output, it relies entirely on this compressed context vector to predict the next token.</li>
</ul></li>
<li><strong>Loss of Earlier Context:</strong>
<ul>
<li>RNNs process sequences in a step-by-step manner, and the hidden state at each step only captures information from previous steps.</li>
<li>By the end of the input sequence, earlier hidden states (e.g., for the first few words) are “forgotten” or diluted because the RNN doesn’t store them explicitly.</li>
</ul></li>
<li><strong>Long-Range Dependencies:</strong>
<ul>
<li>Some tasks, like translating long sentences, require retaining and using information from far back in the input sequence.</li>
<li>For example, translating a complex sentence with long dependencies (like pronouns referring to subjects introduced many words earlier) becomes difficult because this information is not directly accessible to the decoder.</li>
</ul></li>
</ul>
</section>
<section id="why-does-this-happen" class="level4">
<h4 class="anchored" data-anchor-id="why-does-this-happen">Why does this happen?</h4>
<p>RNNs process sequences in a linear manner, and their hidden states update iteratively. This means: - Each new hidden state overwrites the previous one with a combination of old and new information. - The longer the sequence, the harder it is to retain the critical details from the beginning.</p>
</section>
<section id="practical-example" class="level4">
<h4 class="anchored" data-anchor-id="practical-example">Practical example</h4>
<p>Imagine translating the sentence: &gt; “The scientist who discovered penicillin was awarded the Nobel Prize.”</p>
<p>The decoder needs to keep track of “The scientist” while processing the information about “penicillin” and “the Nobel Prize.” In an encoder-decoder RNN: - By the time the encoder reaches “Nobel Prize,” the representation of “The scientist” might have been diluted, leading to errors in translation.</p>
</section>
</section>
<section id="capturing-data-dependencies-with-attention-mechanisms" class="level3">
<h3 class="anchored" data-anchor-id="capturing-data-dependencies-with-attention-mechanisms">Capturing data dependencies with attention mechanisms</h3>
<ul>
<li><strong>Attention Mechanism:</strong>
<ul>
<li>Instead of relying solely on the final hidden state, the attention mechanism allows the decoder to look back at all the encoder’s hidden states dynamically.</li>
<li>This makes it easier to focus on specific parts of the input sequence that are relevant to the current decoding step.</li>
</ul></li>
<li><strong>Transformers:</strong>
<ul>
<li>Transformers, like those used in models such as BERT and GPT, completely avoid RNNs. They process sequences in parallel and allow direct access to all positions in the input sequence through self-attention.</li>
</ul></li>
</ul>
</section>
<section id="attending-to-different-parts-of-the-input-with-self-attention" class="level3">
<h3 class="anchored" data-anchor-id="attending-to-different-parts-of-the-input-with-self-attention">Attending to different parts of the input with self-attention</h3>
<ul>
<li><p>In <strong>self-attention</strong>, “self” refers to the idea that each element in a sequence (e.g., a word in a sentence) <strong>attends to all other elements in the same sequence</strong>, including itself. This mechanism allows the model to weigh the importance of other elements when understanding the context of a given element.</p></li>
<li><p>For example:</p>
<ul>
<li>In the sentence <strong>“The cat sat on the mat”</strong>, the word “cat” can attend to itself (<strong>self</strong>) and to other words in the sentence to understand its role or meaning in context.</li>
</ul></li>
<li><p>This “self” aspect ensures that every part of the input can contribute to understanding every other part, leading to a richer representation of the sequence as a whole.</p></li>
</ul>
</section>
<section id="a-simple-self-attention-mechanism-without-trainable-weights" class="level3">
<h3 class="anchored" data-anchor-id="a-simple-self-attention-mechanism-without-trainable-weights">A simple self-attention mechanism without trainable weights</h3>
<ul>
<li><p>First we need to design a system that capture the the idea of self-attention before adding complex elements like trainable weights.</p></li>
<li><p>Let’s consider this illustration: <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-3/Chapter_3_files/figure-html/3778f62b-02b8-4b6f-a674-755df161dfe7-1-fb3d76ff-42bd-443d-8dc5-f67af67ba563.png" class="img-fluid" alt="self_attention_no_weights.png"></p></li>
<li><p>Here we have an <strong>input vecor</strong> that consist of token embedding, each token represent a word in a sentence, and denoted with: <img src="https://latex.codecogs.com/png.latex?x"> consisting <img src="https://latex.codecogs.com/png.latex?T"> elements, from <img src="https://latex.codecogs.com/png.latex?x%5E%7B(1)%7D"> to <img src="https://latex.codecogs.com/png.latex?x%5E%7B(T)%7D">.</p></li>
<li><p>So each word in the sentence <strong>“Your journey starts with one step.”</strong> represent an <img src="https://latex.codecogs.com/png.latex?x%5E%7B(i)%7D"> where <img src="https://latex.codecogs.com/png.latex?i"> is an element of the sequence <img src="https://latex.codecogs.com/png.latex?x">.</p></li>
<li><p>Each input token is represented as 3-dimensionl embeddong vector.</p></li>
<li><p>The goal during the self-attention process is to calculate the <strong>Context Vector</strong> <img src="https://latex.codecogs.com/png.latex?z"></p></li>
<li><p>The context vector captures the <strong>relevant information from the entire sequence</strong> for a particular element, based on the attention mechanism. It allows the model to encode dependencies and relationships across the input sequence effectively.</p></li>
<li><p>For example, in a sentence:</p>
<p>The word <strong>“Journey”</strong> which is processed in this case <img src="https://latex.codecogs.com/png.latex?z%5E%7B(2)%7D"> in “Your journey starts with one step” would have a context vector that emphasizes information related to all other input words helping to clarify meaning and relations among words.</p></li>
<li></li>
</ul>


</section>
</section>

 ]]></description>
  <category>LLM</category>
  <category>Deep Learning</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-3/Chapter_3.html</guid>
  <pubDate>Wed, 04 Dec 2024 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-3/book_cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Chapter 2: Build a Large Language Model</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/Untitled.html</link>
  <description><![CDATA[ 





<section id="about-this-chapter" class="level2">
<h2 class="anchored" data-anchor-id="about-this-chapter">About this Chapter:</h2>
<ul>
<li>In order to build an LLM we need to provide a very large chunk of text.</li>
<li>In this chapter we will discuss how to prepare the text-dataset and feed it to LLM, and various technics and methods used in data preparation context.</li>
</ul>
<section id="understanding-word-embeddings" class="level3">
<h3 class="anchored" data-anchor-id="understanding-word-embeddings">Understanding word embeddings:</h3>
<ul>
<li>LLM cannot perform any kind of computation on raw text, it can only work with numbers.</li>
<li>Therefor we need to apply some kind of numerical transformation to all input text.</li>
<li>This transformation called <strong>Embedding</strong> and the numerical representation of each word is <strong>Vector</strong>.</li>
<li>The embedding process work also on other data format like <em>Audio</em> <em>Video</em> .. but each type has its own embedding model. <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/embeddings.png" class="img-fluid" alt="Embedding Layer with Different types of Data"></li>
<li>Many algorithms have been developed to produce embeddings for words.</li>
<li>The famous one was <em>World2Vec</em>.
<ul>
<li>Its approach was to train Neural Network on predicting embedding of a given word based on its context, and Vice-Versa.</li>
<li>The main idea here is that words that have appear in similar context atend to have similar meaning which also efect their embedding.</li>
<li>So if these words are projected in two dimensional embedding they will be appeared in clusters. <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/two-dimensional.png" class="img-fluid" alt="clusters"></li>
</ul></li>
<li>In current LLM embeddings are way more larger and have higher dimensionality.
<ul>
<li>For example <strong>GPT-2</strong> (117 Millions Parameters) used embeddings of <code>768</code> dimensions, where the largest <strong>GPT-3</strong> (117 Billions Parameters) uses <code>12.288</code>.</li>
<li>Each word will be projected to 12.288 dimensions.</li>
</ul></li>
</ul>
</section>
<section id="tokenizing-text" class="level3">
<h3 class="anchored" data-anchor-id="tokenizing-text">Tokenizing text:</h3>
<ul>
<li><p><strong>Breaking Text into Units</strong>: Tokenization splits text into smaller pieces called <strong>tokens</strong> (words, subwords, or characters), which are the building blocks the model uses to process and understand language.</p></li>
<li><p><strong>Mapping Tokens to Numbers</strong>: Each token is assigned a unique numerical identifier, allowing the LLM to work with numbers instead of raw text during computations.</p></li>
<li><p><strong>Efficient Representation</strong>: The way text is tokenized affects how efficiently the LLM processes input and generates output, balancing between <strong>accuracy</strong> (preserving meaning) and <strong>memory usage</strong> (fewer tokens).</p></li>
<li><p>Here we will work with raw text called <strong>The Veredict</strong> and apply some kind of tokenization on it:</p></li>
</ul>
<div id="ab1c02e1-3236-46dd-9ad1-3ad8a9309e2b" class="cell" data-execution_count="25">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urllib.request</span>
<span id="cb1-2"></span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/rasbt/"</span></span>
<span id="cb1-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LLMs-from-scratch/main/ch02/01_main-chapter-code/"</span></span>
<span id="cb1-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the-verdict.txt"</span>)</span>
<span id="cb1-6">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the-veredict.txt"</span></span>
<span id="cb1-7">urllib.request.urlretrieve(url, file_path)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>('the-veredict.txt', &lt;http.client.HTTPMessage at 0x705fec0466c0&gt;)</code></pre>
</div>
</div>
<ul>
<li>Open the data and check its length (how many chars):
<ul>
<li>the text contains <code>20479</code> charaters:</li>
</ul></li>
</ul>
<div id="31747301-4352-4ac1-a30d-0719f7c4b865" class="cell" data-execution_count="26">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the-veredict.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    raw_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"total number of characters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(raw_text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>total number of characters: 20479</code></pre>
</div>
</div>
<ul>
<li>Take a look on first <code>100 character</code>:</li>
</ul>
<div id="4d456a1a-5ea0-4144-88fb-54cbb2c68a11" class="cell" data-execution_count="27">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">raw_text[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>'I HAD always thought Jack Gisburn rather a cheap genius--though a good fellow enough--so it was no '</code></pre>
</div>
</div>
<ul>
<li>The goal is to tokenize the <code>20479</code> charaters in order to turn them into embeddings.</li>
<li>We will use <code>Regular Expression</code> as a tool to tokenize the text, just to understand the idea of tokenization since it is not the right tool for this but for our context is great.</li>
<li>lets take this simple text:</li>
</ul>
<div id="f4ebbbf5-d60c-4082-a0d1-91a8c2b88ee4" class="cell" data-execution_count="28">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">simple_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hi there! how was your day?'</span></span></code></pre></div></div>
</div>
<ul>
<li>Now lets split it to small pieces (words) with spaces <code>" "</code>:</li>
</ul>
<div id="71e8d37d-10e8-4094-9bba-69de3a83d307" class="cell" data-execution_count="29">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb8-2">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, simple_text)</span>
<span id="cb8-3">tokenz</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>['Hi', 'there!', 'how', 'was', 'your', 'day?']</code></pre>
</div>
</div>
<ul>
<li>We need to make sure to seperate ponctuations from words:</li>
</ul>
<div id="e1dfad5c-85df-4a03-93cf-7e2ae1cdb5c2" class="cell" data-execution_count="30">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[!?]</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, simple_text)</span>
<span id="cb10-2">tokenz</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>['Hi',
 ' ',
 'there',
 '!',
 '',
 ' ',
 'how',
 ' ',
 'was',
 ' ',
 'your',
 ' ',
 'day',
 '?',
 '']</code></pre>
</div>
</div>
<ul>
<li>Remove whitespaces:</li>
</ul>
<div id="b895703b-f483-474d-9f5a-3e3034a4eece" class="cell" data-execution_count="31">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [word <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tokenz <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> word.strip()]</span>
<span id="cb12-2">words</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>['Hi', 'there', '!', 'how', 'was', 'your', 'day', '?']</code></pre>
</div>
</div>
<ul>
<li>Now lets add more special charatcters and ponctuations such as question marks, quotation marks, and the double-dashes :</li>
</ul>
<div id="cc078d85-64cd-45d8-bec2-df5bc509f16d" class="cell" data-execution_count="32">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[,.:!?_;"()</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">--</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,simple_text)</span></code></pre></div></div>
</div>
<ul>
<li>Now lets apply this simple tokenizer on our <code>raw_text</code>:</li>
</ul>
<div id="730396b5-7308-40a0-a8b7-051bf15c99a7" class="cell" data-execution_count="33">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[.,:;()_!?"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">--</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, raw_text)</span>
<span id="cb15-2">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [word.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tokenz <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> word.strip()]</span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokenz)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>4690</code></pre>
</div>
</div>
</section>
<section id="converting-tokens-into-token-ids" class="level3">
<h3 class="anchored" data-anchor-id="converting-tokens-into-token-ids">Converting tokens into token IDs:</h3>
<ul>
<li>Since we now have tokenz we could transform all <code>str</code> words into <code>int</code> ID.</li>
<li>First we need to build vocabulary for all words we have in our <code>tokenz</code> before converting token ID into embeddings. <strong>Image</strong></li>
</ul>
<div id="afd32ee7-b610-4f00-adba-22a378799e57" class="cell" data-execution_count="34">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">vocabulary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokenz))</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocabulary)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>1130</code></pre>
</div>
</div>
<ul>
<li>After sorting the vocabulary and getting rid of all repeated words we have <code>1130</code> unique token in our vovabulary.</li>
<li>Here we assign an <code>int</code> for each vocabulary element:</li>
</ul>
<div id="a912c20c-83de-4bf2-b610-7b8357b0cd71" class="cell" data-execution_count="35">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {tok: integer <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> integer, tok <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vocabulary)}</span></code></pre></div></div>
</div>
<div id="5808f213-a779-4b33-8f68-821ded83c058" class="cell" data-execution_count="36">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vocab.items():</span>
<span id="cb20-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:</span>
<span id="cb20-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>0:!
1:"
2:'
3:(
4:)
5:,
6:--
7:.
8::
9:;
10:?
11:A
12:Ah
13:Among
14:And
15:Are
16:Arrt
17:As
18:At
19:Be
20:Begin
21:Burlington
22:But
23:By
24:Carlo
25:Chicago
26:Claude
27:Come
28:Croft
29:Destroyed
30:Devonshire
31:Don
32:Dubarry
33:Emperors
34:Florence
35:For
36:Gallery
37:Gideon
38:Gisburn
39:Gisburns
40:Grafton
41:Greek
42:Grindle
43:Grindles
44:HAD
45:Had
46:Hang
47:Has
48:He
49:Her</code></pre>
</div>
</div>
<ul>
<li>Now we have create a simple tokenizer class that handles encoding and decoding of text based on a given vocabulary:
<ul>
<li>Takes a <code>vocab</code> dictionary as a class attribute</li>
<li><code>self.str_to_int</code>: Stores the vocabulary mapping from string to integer.</li>
<li><code>self.int_to_str</code>: Creates a reverse dictionary that maps integers back to strings.</li>
</ul></li>
<li><strong><code>encode</code> Method:</strong>
<ul>
<li>Converts text into a list of integer IDs based on the vocabulary.</li>
<li>Splits the text into words and punctuation while preserving punctuation as separate items.</li>
<li>Removes leading/trailing spaces from each item and filters out empty strings.</li>
<li>Converts the processed words/punctuation into a list of corresponding integer IDs using the <code>str_to_int</code> dictionary.</li>
<li>Returns the list of IDs.</li>
</ul></li>
<li><strong><code>decode</code> Method:</strong>
<ul>
<li>Converts a list of integer IDs back into text.</li>
<li>Converts the list of integer IDs into corresponding words/punctuation using the <code>int_to_str</code> dictionary and joins them into a single string with spaces between words.</li>
<li>Cleans up the text by removing spaces before punctuation marks using a regular expression.</li>
<li>Returns the decoded text with properly placed punctuation.</li>
</ul></li>
</ul>
<div id="d676729d-2ea7-45b8-8df1-d55556af0177" class="cell" data-execution_count="37">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleTokenizerV1:</span>
<span id="cb22-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vocab):</span>
<span id="cb22-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.str_to_int <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab</span>
<span id="cb22-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.int_to_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i:s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vocab.items()}</span>
<span id="cb22-5"></span>
<span id="cb22-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text):</span>
<span id="cb22-7">        preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[,.?_!"()</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">--</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, text)</span>
<span id="cb22-8">        preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> preprocessed <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item.strip()]</span>
<span id="cb22-9">        ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.str_to_int[s] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> preprocessed]</span>
<span id="cb22-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ids</span>
<span id="cb22-11"></span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ids):</span>
<span id="cb22-13">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.int_to_str[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ids])</span>
<span id="cb22-14"></span>
<span id="cb22-15">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[,.?!"()</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\1</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, text)</span>
<span id="cb22-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> text</span></code></pre></div></div>
</div>
<ul>
<li>Now we could instentiate a tokenizer object from the class <code>SimpleTokenizerV1</code> and tokenize a passage from our raw text:</li>
</ul>
<div id="6c9411d6-c06e-40da-a3bc-6905bf31d2ec" class="cell" data-execution_count="38">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleTokenizerV1(vocab)</span>
<span id="cb23-2">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""""It's the last he painted, you know,"</span></span>
<span id="cb23-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> Mrs. Gisburn said with pardonable pride."""</span></span></code></pre></div></div>
</div>
<div id="af033886-2db0-4115-ad3c-0a627d8ce443" class="cell" data-execution_count="39">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(text)</span>
<span id="cb24-2">ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>[1,
 56,
 2,
 850,
 988,
 602,
 533,
 746,
 5,
 1126,
 596,
 5,
 1,
 67,
 7,
 38,
 851,
 1108,
 754,
 793,
 7]</code></pre>
</div>
</div>
<ul>
<li>we can also get pass this ids into <code>decode()</code> method and get back the original text:</li>
</ul>
<div id="8e7822c2-2f26-4ab6-a206-bd3b5c409c52" class="cell" data-execution_count="40">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode(ids)</span>
<span id="cb26-2">text</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>'" It\' s the last he painted, you know," Mrs. Gisburn said with pardonable pride.'</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/Untitled_files/figure-html/5d77e725-72c1-41cf-8f16-77b6ffcf9878-1-29868ee0-2f23-49d7-a41f-70bc6085cf5b.png" class="img-fluid figure-img"></p>
<figcaption>decoder_encode.png</figcaption>
</figure>
</div>
</section>
<section id="adding-special-context-tokens" class="level3">
<h3 class="anchored" data-anchor-id="adding-special-context-tokens">Adding special context tokens:</h3>
<ul>
<li>We need to modeify the tokenizer to
<ul>
<li>accept <code>Uknown words</code>.*</li>
<li>use <code>special tokens</code> to handel markers of thes unkown words abd document boundaries.</li>
</ul></li>
<li>If the tokenizer encounter words that doesn’t belong to the vocabulary will use <code>&lt;|Unk|&gt;</code> as marker for it.</li>
<li>We can also specify bondaries between documents that help the model during training to understand where the document ends and where begins.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/Untitled_files/figure-html/118e39e1-d03c-4f06-8bc7-03e6625c5576-1-f877fa4a-5855-45ca-ac1d-06af912f0c30.png" class="img-fluid figure-img"></p>
<figcaption>end_of_text.png</figcaption>
</figure>
</div>
<ul>
<li>Lets modify the vocabulary to incorporate the <code>unkown</code> and <code>endoftext</code> markers:</li>
</ul>
<div id="c8fb7bd1-7ff9-426f-908d-903d245d5328" class="cell" data-execution_count="41">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create vocabulry with unique words</span></span>
<span id="cb28-2">all_tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tokenz))</span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add EOT and UK to the vocabulary</span></span>
<span id="cb28-4">all_tokenz.extend([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;|EOT|&gt;"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;|UK|&gt;"</span>])</span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># give each unique vocabulary an ID</span></span>
<span id="cb28-6">vocab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {tokens: integers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> integers, tokens <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(all_tokenz)}</span></code></pre></div></div>
</div>
<ul>
<li>Check the last to items we just added:</li>
</ul>
<div id="ee747152-d371-4120-b5c3-bd153e4ba371" class="cell" data-execution_count="42">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(vocab.items())[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]):</span>
<span id="cb29-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>('&lt;|EOT|&gt;', 1130)
('&lt;|UK|&gt;', 1131)</code></pre>
</div>
</div>
<ul>
<li>Lets now re-build the tokenizer class adding this two features:</li>
</ul>
<div id="73156d1f-5029-4065-a139-371c562f9f31" class="cell" data-execution_count="43">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleTokenizerV2:</span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vocab):</span>
<span id="cb31-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.str_to_int <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab</span>
<span id="cb31-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.int_to_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v, i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vocab.items()}</span>
<span id="cb31-5"></span>
<span id="cb31-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text):</span>
<span id="cb31-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split each word from [,."'?!();]</span></span>
<span id="cb31-8">        preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[,."!()?;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">--</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, text)</span>
<span id="cb31-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cut white spaces from each item in preprocessed</span></span>
<span id="cb31-10">        preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> preprocessed <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item.strip()]</span>
<span id="cb31-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the token isn't in the vocab mark it as uknown</span></span>
<span id="cb31-12">        preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.str_to_int <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;|UK|&gt;"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> preprocessed]</span>
<span id="cb31-13">        ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.str_to_int[s] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> preprocessed]</span>
<span id="cb31-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ids</span>
<span id="cb31-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ids):</span>
<span id="cb31-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add space after each element in int_to_str</span></span>
<span id="cb31-17">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.int_to_str[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ids])</span>
<span id="cb31-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply some regulare expression magic </span></span>
<span id="cb31-19">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[,.:;?!"()</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\1</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, text)</span>
<span id="cb31-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> text</span>
<span id="cb31-21">        </span></code></pre></div></div>
</div>
<ul>
<li>Lets apply the new version of the tokenizer on some text:</li>
</ul>
<div id="5c80e8fc-63a2-4bd0-8c93-ad373ee09ef9" class="cell" data-execution_count="44">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">txt1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, my name is Ismail!"</span></span>
<span id="cb32-2">txt2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I like to drink Tea."</span></span>
<span id="cb32-3">txts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" &lt;|EOT|&gt; "</span>.join((txt1, txt2))</span>
<span id="cb32-4">txts</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>'Hello, my name is Ismail! &lt;|EOT|&gt; I like to drink Tea.'</code></pre>
</div>
</div>
<ul>
<li>Now we tokenize this example:</li>
</ul>
<div id="bc902968-1838-4391-85fb-aec9245128b8" class="cell" data-execution_count="45">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleTokenizerV2(vocab)</span>
<span id="cb34-2">tokenizer.encode(txts)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>[1131, 5, 697, 1131, 584, 1131, 0, 1130, 53, 628, 1016, 1131, 1131, 7]</code></pre>
</div>
</div>
<ul>
<li>As we see the <code>&lt;|EOT|&gt;</code> token’s ID is <code>1130</code> as axpected.</li>
<li>The list of ids also contains <code>1131</code> which represent unkown words.</li>
<li>We can detokenize the sentences and see them:</li>
</ul>
<div id="df073988-f47c-4a60-9be7-d7cca5ad4094" class="cell" data-execution_count="46">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">tokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(txts)</span>
<span id="cb36-2">detokenized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode(tokenized)</span>
<span id="cb36-3">detokenized</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>'&lt;|UK|&gt;, my &lt;|UK|&gt; is &lt;|UK|&gt;! &lt;|EOT|&gt; I like to &lt;|UK|&gt; &lt;|UK|&gt;.'</code></pre>
</div>
</div>
<ul>
<li>there is more special tokenz we could add to our raw text dataset:
<ul>
<li><code>EOS</code> <strong>End-of-Sentence</strong> similar to <code>EOT</code> it indicate where the sentence begin which allo the llm to learn more the sturcture of the dataset.</li>
<li><code>BOS</code> <strong>Begin-Of-Sentence</strong> works along with <code>EOS</code> to <em>containerize</em> each sentence and force llm to learn boundaries between sentences.</li>
<li><code>PAD</code> <strong>Padding</strong> is added to short sentences in odrer to make sure all sentences has the same size length.</li>
</ul></li>
<li>The origional <strong>GPT</strong> model doesn’t use any of these special tokens except <code>EOT</code> including the <code>UN</code> toekn for out-of-vocabulary marker since it uses <em>bytes-pair-encoding</em>.</li>
</ul>
</section>
<section id="byte-pair-encoding" class="level3">
<h3 class="anchored" data-anchor-id="byte-pair-encoding">Byte pair Encoding:</h3>
<ul>
<li>The <strong>Byte-pair-encoding</strong> <strong><code>BPE</code></strong> is a technique used in the tokenization schema for training most GPT models.</li>
<li>We will use a library called <code>Tiktoken</code> to tokenize our input text in much efficient way that our <code>TokenizeV2</code> class.</li>
</ul>
<div id="f39663f4-83a2-42d2-9a41-57ed1abe9c84" class="cell" data-execution_count="47">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> importlib.metadata <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> version</span>
<span id="cb38-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tiktoken</span>
<span id="cb38-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tiktoken version:"</span>, version(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tiktoken"</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tiktoken version: 0.8.0</code></pre>
</div>
</div>
<ul>
<li>Instantiate the tokenizer using the schema of <strong>GPT</strong>:</li>
</ul>
<div id="85297e2a-89b6-4f91-ae2c-1adf805239a8" class="cell" data-execution_count="48">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiktoken.get_encoding(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt2'</span>)</span></code></pre></div></div>
</div>
<div id="194a8bc7-2e28-40b9-81c6-19b215240d15" class="cell" data-execution_count="49">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hi my name is Ismail &lt;|endoftext|&gt; I like the rainy weather someweirdsyntax!"</span></span>
<span id="cb41-2">tokenz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(text, allowed_special<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;|endoftext|&gt;"</span>})</span>
<span id="cb41-3">tokenz</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>[5303,
 616,
 1438,
 318,
 1148,
 4529,
 220,
 50256,
 314,
 588,
 262,
 37259,
 6193,
 4209,
 68,
 1447,
 1837,
 41641,
 0]</code></pre>
</div>
</div>
<ul>
<li>Now decode the tokenz into words again</li>
</ul>
<div id="998ef1d3-9eb9-4473-b992-1e07a70f812e" class="cell" data-execution_count="50">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode(tokenz)</span>
<span id="cb43-2">words</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>'hi my name is Ismail &lt;|endoftext|&gt; I like the rainy weather someweirdsyntax!'</code></pre>
</div>
</div>
<ul>
<li>The <code>&lt;|endoftext|&gt;</code> is assigned to a large id: <code>50256</code>.
<ul>
<li><strong>GPT2</strong> vocabulary has <strong>5027</strong> so basically <code>&lt;|endoftext|&gt;</code> is assinged to the largest id.</li>
</ul></li>
<li>The tiktoken handels <code>someweirdsyntax</code> just like any other word.</li>
<li>The tiktoken library handles larger or unknown words by breaking them down into subwords or smaller tokens. This process is based on the Byte Pair Encoding (BPE) algorithm, which tiktoken uses.
<ul>
<li><p>For large words: The word is split into smaller, frequently occurring subword units (e.g., “transformation” might become “transform” and “ation”). These subword units are part of the tokenizer’s vocabulary.</p></li>
<li><p>For unknown words: If a word or sequence is not in the vocabulary, the tokenizer falls back to encoding it as a sequence of smaller tokens, often down to individual characters or byte-level tokens if necessary.</p></li>
</ul></li>
<li>This approach ensures that any input can be tokenized, even if the word is rare or entirely unseen</li>
</ul>
<div id="37b8631a-1502-4bf3-b227-f401f554e86c" class="cell" data-execution_count="51">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">weird_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wakapondiom'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jumanymasoodi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kumarytifor'</span>]</span>
<span id="cb45-2">int_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.encode(word) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> words]</span>
<span id="cb45-3">word1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(weird_words[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb45-4">word2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(weird_words[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb45-5">word3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(weird_words[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div></div>
</div>
<div id="a3647166-64dc-46d8-8201-613e8e5b326c" class="cell" data-execution_count="52">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">word1, word2, word3</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>([86, 461, 499, 623, 29005],
 [73, 388, 1092, 5356, 702, 72],
 [74, 388, 560, 49929, 273])</code></pre>
</div>
</div>
</section>
<section id="data-sampling-with-a-sliding-window" class="level3">
<h3 class="anchored" data-anchor-id="data-sampling-with-a-sliding-window">Data sampling with a sliding window:</h3>
<ul>
<li>For Language Modeling (Causal or Autoregressive Models)
<ul>
<li><strong>Input</strong>: A sequence of tokens (e.g., a sentence or text passage).</li>
<li><strong>Target</strong>: The next token(s) in the sequence.</li>
</ul></li>
<li>Example:
<ul>
<li>Input: “The cat sat on the”</li>
<li>Target: “mat”</li>
<li>The model learns to predict the next word or token based on the given input.</li>
</ul></li>
<li>Lets implement dataloader that fetches the input-target pairs from the dataset using the sliding window approch:
<ul>
<li>first tokenize the dataset using <code>BPE</code>:</li>
</ul></li>
</ul>
<div id="c20eb023-39c9-41cc-ba72-a150e24c71c8" class="cell" data-execution_count="53">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">encode_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(raw_text)</span></code></pre></div></div>
</div>
<div id="24a4ea6c-5d6c-42e1-b630-5b0253143c40" class="cell" data-execution_count="54">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slice out the first 50 data points</span></span>
<span id="cb49-2">smpl_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encode_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:]</span></code></pre></div></div>
</div>
<ul>
<li>Here we create the input-target window by assigning <code>x</code> to the <strong>current/input</strong> token and <code>y</code> to the <strong>next/target</strong> token:</li>
</ul>
<div id="78b63332-10e0-4f7a-8353-b21a6badcdd2" class="cell" data-execution_count="55">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First creat context window:</span></span>
<span id="cb50-2">context_window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb50-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the input tokens:</span></span>
<span id="cb50-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[:context_window]</span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the next token to predict:</span></span>
<span id="cb50-6">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: context_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb50-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb50-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"     </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[290, 4920, 2241, 287]
     [4920, 2241, 287, 257]</code></pre>
</div>
</div>
<ul>
<li>After processing the current token the llm will shift to the next token untill the last one:</li>
</ul>
<div id="65123c3b-bc4a-448f-9608-14b91b45d562" class="cell" data-execution_count="56">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,context_window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb52-2">    current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[:i]</span>
<span id="cb52-3">    desired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[i]</span>
<span id="cb52-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(current, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'---&gt;'</span>, desired)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[290] ---&gt; 4920
[290, 4920] ---&gt; 2241
[290, 4920, 2241] ---&gt; 287
[290, 4920, 2241, 287] ---&gt; 257</code></pre>
</div>
</div>
<ul>
<li>Convert the same tokens into words again using the same method:</li>
</ul>
<div id="62b8cf56-4392-434c-9f9f-c45eec9c7473" class="cell" data-execution_count="57">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, context_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb54-2">    current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[:i]</span>
<span id="cb54-3">    desired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smpl_text[i]</span>
<span id="cb54-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>decode(current)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ----&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>decode([desired])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code> and ----&gt;  established
 and established ----&gt;  himself
 and established himself ----&gt;  in
 and established himself in ----&gt;  a</code></pre>
</div>
</div>
<ul>
<li>Now we need to implement efficient data loader that iterate over dataset and returns pairs of <strong><code>Input --&gt; Target</code></strong> pairs tokens as <strong>Tensors</strong>. <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/Untitled_files/figure-html/b5a840c9-191a-4c70-95a0-cc56ead149f2-1-a1006025-7c34-4675-982a-d429efeb1983.png" class="img-fluid" alt="dataLoader.png"></li>
<li>We will built-in <strong>Pytorch</strong> <strong>Dataset</strong> &amp; <strong>DataLoader</strong> classes:</li>
</ul>
<div id="e0b86098-22a9-4438-8f48-1c2726fa5e47" class="cell" data-execution_count="58">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb56-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span></code></pre></div></div>
</div>
<div id="52d003a5-09a1-46cf-ad87-517bd9ea1a68" class="cell" data-execution_count="59">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GPTDatasetV1(Dataset):</span>
<span id="cb57-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, txt, tokenizer, max_length, stride):</span>
<span id="cb57-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb57-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb57-5">        token_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(txt)</span>
<span id="cb57-6">        </span>
<span id="cb57-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(token_ids)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>max_length, stride):</span>
<span id="cb57-8">            input_chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_ids[i:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_length]</span>
<span id="cb57-9">            target_chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_ids[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb57-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_ids.append(torch.tensor(input_chunk))</span>
<span id="cb57-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_ids.append(torch.tensor(target_chunk))</span>
<span id="cb57-12">    </span>
<span id="cb57-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb57-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_ids)</span>
<span id="cb57-15"></span>
<span id="cb57-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb57-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_ids[idx], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_ids[idx]</span>
<span id="cb57-18">                </span></code></pre></div></div>
</div>
<ul>
<li><p><strong>Parameters</strong>:</p>
<ul>
<li><code>txt</code>: A large text sequence to process (e.g., the dataset for training).</li>
<li><code>tokenizer</code>: A tokenizer object that encodes text into token IDs (e.g., Hugging Face tokenizer).</li>
<li><code>max_length</code>: The maximum length of each input sequence for the model.</li>
<li><code>stride</code>: The step size for creating overlapping sequences.</li>
</ul></li>
<li><p><strong>Attributes</strong>:</p>
<ul>
<li><code>self.input_ids</code>: Stores the input token sequences for the model.</li>
<li><code>self.target_ids</code>: Stores the corresponding target sequences (shifted version of input for next-token prediction).</li>
</ul></li>
<li><p><strong>Tokenization</strong>:</p>
<ul>
<li><code>tokenizer.encode(txt)</code> converts the input text into a list of token IDs (<code>token_ids</code>).</li>
</ul></li>
<li><p><strong>Sliding Window with Stride</strong>:</p>
<ul>
<li><code>range(0, len(token_ids) - max_length, stride)</code> iterates through the tokenized text in steps of <code>stride</code>.</li>
<li>At each step:
<ul>
<li><strong>Input Chunk</strong>: <code>token_ids[i:i + max_length]</code> selects <code>max_length</code> tokens starting from index <code>i</code>.</li>
<li><strong>Target Chunk</strong>: <code>token_ids[i + 1: i + max_length + 1]</code> selects the next <code>max_length</code> tokens (input shifted by 1 token for next-token prediction).</li>
</ul></li>
</ul></li>
<li><p><strong>Appending Chunks</strong>:</p>
<ul>
<li>The input and target chunks are converted into PyTorch tensors and appended to <code>self.input_ids</code> and <code>self.target_ids</code>, respectively.</li>
</ul></li>
<li><p>Returns the number of input-target pairs in the dataset.</p></li>
<li><p>Takes an index <code>idx</code> and returns the corresponding <code>input_ids</code> and <code>target_ids</code> as a tuple.</p></li>
<li><p>This allows the dataset to be indexed like a list.</p></li>
<li><p>This dataset would create input-target pairs for training a GPT model, ensuring that the model can learn from overlapping sequences in the text.</p></li>
</ul>
<div id="2f5ca8d2-2516-4b25-8174-8fcf59cd569d" class="cell" data-execution_count="60">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DataLoaderGPTV1(txt, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, </span>
<span id="cb58-2">                    stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, drop_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb58-3">    tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tiktoken.get_encoding(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt2'</span>)</span>
<span id="cb58-4">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GPTDatasetV1(txt, tokenizer, max_length, stride)</span>
<span id="cb58-5">    dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(</span>
<span id="cb58-6">        dataset,</span>
<span id="cb58-7">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size,</span>
<span id="cb58-8">        shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shuffle,</span>
<span id="cb58-9">        drop_last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>drop_last,</span>
<span id="cb58-10">        num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers)</span>
<span id="cb58-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dataloader</span>
<span id="cb58-12">        </span></code></pre></div></div>
</div>
<ul>
<li>Here we test our dataloader for one batch, with context window of size 4:</li>
</ul>
<div id="bd7d7636-ecab-497c-84c5-e69bfecb8b49" class="cell" data-execution_count="61">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the-veredict.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb59-2">    raw_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb59-3">    </span></code></pre></div></div>
</div>
<div id="712822c9-04cf-4247-b01c-858a1a472469" class="cell" data-execution_count="62">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaderGPTV1(raw_txt, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb60-2">data_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader)</span></code></pre></div></div>
</div>
<div id="c67e0301-bd79-4752-8a89-f87b1b8837db" class="cell" data-execution_count="63">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(data_iter)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>[tensor([[  40,  367, 2885, 1464]]), tensor([[ 367, 2885, 1464, 1807]])]</code></pre>
</div>
</div>
<ul>
<li>The first batch returns 2 tensors:
<ul>
<li>the first tensor stores the input token IDs.</li>
<li>and the second tensor stores the target token IDs.</li>
</ul></li>
<li>Since we fixed the <strong><code>max_length</code></strong> in 4 we get tensors of size 4.</li>
<li>The <strong><code>stride</code></strong> decides of the slide from batch to batch. here since we pick<code>1</code> the target input will shift by one only.</li>
<li>Here we use batch of 8 and <strong><code>stride=4</code></strong></li>
</ul>
<div id="dd9858a2-1d33-4676-9e8a-67658d4649f5" class="cell" data-execution_count="64">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaderGPTV1(raw_txt, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb63-2">data_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader)</span></code></pre></div></div>
</div>
<div id="ba8e4ef5-24b0-4436-836e-e06d23b96cb8" class="cell" data-execution_count="65">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(data_iter)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>[tensor([[   40,   367,  2885,  1464],
         [ 1807,  3619,   402,   271],
         [10899,  2138,   257,  7026],
         [15632,   438,  2016,   257],
         [  922,  5891,  1576,   438],
         [  568,   340,   373,   645],
         [ 1049,  5975,   284,   502],
         [  284,  3285,   326,    11]]),
 tensor([[  367,  2885,  1464,  1807],
         [ 3619,   402,   271, 10899],
         [ 2138,   257,  7026, 15632],
         [  438,  2016,   257,   922],
         [ 5891,  1576,   438,   568],
         [  340,   373,   645,  1049],
         [ 5975,   284,   502,   284],
         [ 3285,   326,    11,   287]])]</code></pre>
</div>
</div>
</section>
<section id="creating-token-embeddings" class="level3">
<h3 class="anchored" data-anchor-id="creating-token-embeddings">Creating token embeddings:</h3>
<ul>
<li>Next step is to create <strong>Embeddings</strong> from token ID’s.</li>
<li>Embeddings are <strong>trainable weights</strong> that help the model to <strong>Learn</strong> meanings from words.</li>
<li>To fully understand how embedding works we will create simple embedding layer:</li>
</ul>
<div id="6a844487-c476-4174-ac3a-1a95c6e85b34" class="cell" data-execution_count="66">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb66-2">output_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div></div>
</div>
<ul>
<li>Just in order to grasp the idea of embedding we imagine that we have a vocabulary of size <strong>6</strong> and each vocab is projected to <strong>3</strong> dimensions.</li>
<li>Here we use <strong>Pytorch</strong> to create an embedding layer:</li>
</ul>
<div id="904199d7-9b1b-4003-96da-597ed884f264" class="cell" data-execution_count="68">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb67-2">embedding_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Embedding(vocab_size, output_dim)</span>
<span id="cb67-3"></span></code></pre></div></div>
</div>
<ul>
<li>The embedding layer dimensions as created:</li>
</ul>
<div id="f8a13470-1364-412b-954a-f83fbf9e24cc" class="cell" data-execution_count="69">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1">embedding_layer</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>Embedding(6, 3)</code></pre>
</div>
</div>
<ul>
<li>And those are the weights that are randomely set:</li>
</ul>
<div id="318dba7a-78d1-49c3-86f3-696b91fda28c" class="cell" data-execution_count="71">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb70-1">embedding_layer.weight</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>Parameter containing:
tensor([[ 0.3374, -0.1778, -0.1690],
        [ 0.9178,  1.5810,  1.3010],
        [ 1.2753, -0.2010, -0.1606],
        [-0.4015,  0.9666, -1.1481],
        [-1.1589,  0.3255, -0.6315],
        [-2.8400, -0.7849, -1.4096]], requires_grad=True)</code></pre>
</div>
</div>
<ul>
<li>The <strong>weigth matrix</strong> contains small values that will be optimized during the training of the LLM.</li>
<li>Each of the six rows represent a token.</li>
<li>Each of the three columns represents on dimension of that token.</li>
</ul>
<div id="05146193-2bfc-4d6e-b787-ea2b7b43dbb8" class="cell" data-execution_count="73">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">embedding_layer(torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>tensor([[-0.4015,  0.9666, -1.1481]], grad_fn=&lt;EmbeddingBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="encoding-word-positions" class="level3">
<h3 class="anchored" data-anchor-id="encoding-word-positions">Encoding word positions:</h3>
<ul>
<li>Since transformers lack inherent sequence-awareness (they process tokens in parallel), position encoding adds this information to the input embeddings.</li>
<li>Token position encoding incorporate information about the order of tokens in a sequence.</li>
<li>There are two common methods for position encoding:
<ul>
<li><strong>Absolute Position Encoding</strong>: Assigns a unique position value (e.g., using sinusoidal functions or learned embeddings) to each token’s position in the sequence.</li>
<li><strong>Relative Position Encoding</strong>: Encodes the positional relationship between tokens, focusing on their relative distance rather than their absolute positions.</li>
</ul></li>
<li>Now lets build a larger version of the embedding layer with <strong>256</strong> dimensions instead of <strong>3</strong>, still this number is way smaller than the original <strong>gpt3</strong> with <strong>12288</strong>.</li>
<li>Assuming we have a vocab_size of <code>50257</code>:</li>
</ul>
<div id="d965768c-b737-46a6-bb21-3d644c969d07" class="cell" data-execution_count="74">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1">vocab_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50257</span></span>
<span id="cb74-2">output_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span></code></pre></div></div>
</div>
<div id="35516296-f240-4202-bc3d-3ab9b11e8951" class="cell" data-execution_count="75">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">token_embedding_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Embedding(vocab_size, output_dim)</span></code></pre></div></div>
</div>
<ul>
<li>If we use the our <code>dataloader</code> with this embedding layer, for exmaple with a batch size of 8, for tokens each, we will have tensor of size: <strong><code>8*4*256</code></strong></li>
</ul>
<div id="0a611ff8-d578-48ca-a69a-ca0aada7dbe3" class="cell" data-execution_count="77">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1">max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb76-2">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaderGPTV1(raw_txt, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_length, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div></div>
</div>
<div id="1ae6313e-542d-40c2-b2fa-00b3680c4886" class="cell" data-execution_count="78">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb77-1">data_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader)</span></code></pre></div></div>
</div>
<div id="b133e226-da4e-4b3a-bae2-cbe8ab316e4b" class="cell" data-execution_count="79">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">inputs, targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(data_iter)</span></code></pre></div></div>
</div>
<div id="9fcd35e1-e9da-4c57-8261-437656c35d4f" class="cell" data-execution_count="80">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Token IDs:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, inputs)</span>
<span id="cb79-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Input shape:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, inputs.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Token IDs:
 tensor([[   40,   367,  2885,  1464],
        [ 1807,  3619,   402,   271],
        [10899,  2138,   257,  7026],
        [15632,   438,  2016,   257],
        [  922,  5891,  1576,   438],
        [  568,   340,   373,   645],
        [ 1049,  5975,   284,   502],
        [  284,  3285,   326,    11]])

Input shape:
 torch.Size([8, 4])</code></pre>
</div>
</div>
<ul>
<li>Pass it through the embedding layer we created:</li>
</ul>
<div id="d6be443d-a5e9-4381-a200-9fd1b706745f" class="cell" data-execution_count="81">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb81-1">token_embedding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_embedding_layer(inputs)</span></code></pre></div></div>
</div>
<div id="c57c6719-d74a-47fa-9e42-159856fdbb84" class="cell" data-execution_count="83">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb82-1">token_embedding.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>torch.Size([8, 4, 256])</code></pre>
</div>
</div>
<ul>
<li>To create position encoding layer the <strong>gpt3</strong> way, we just need to create another embedding layer that has the same dimension as <strong>token_embedding_layer</strong>:</li>
</ul>
<div id="dd9da2ab-8015-4b20-84b7-5ed64f0a80b7" class="cell" data-execution_count="85">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb84-1">context_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb84-2">pos_embedding_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.Embedding(context_length, output_dim)</span>
<span id="cb84-3">pos_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos_embedding_layer(torch.arange(context_length))</span>
<span id="cb84-4">pos_embedding.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>torch.Size([4, 256])</code></pre>
</div>
</div>
<ul>
<li>The input to the pos_embeddings is usually a placeholder vector torch.arange(context_length), which contains a sequence of numbers 0, 1, …, up to the maximum input length –1.</li>
</ul>
<div id="c652bcad-cb23-4842-8681-8c59c13496d8" class="cell" data-execution_count="90">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb86-1">input_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> token_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pos_embedding</span>
<span id="cb86-2">input_embedding.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>torch.Size([8, 4, 256])</code></pre>
</div>
</div>
</section>
</section>
<section id="key-takeaways-from-chapter-2" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways-from-chapter-2">Key Takeaways from Chapter 2:</h2>
<ul>
<li><p>Learned how to <strong>tokenize</strong> raw text and convert it into a structured format for model input.</p></li>
<li><p>Explored <strong>Byte Pair Encoding (BPE)</strong> as a way to handle subword units efficiently.</p></li>
<li><p>Understood how to convert tokens into <strong>token IDs</strong> using a vocabulary.</p></li>
<li><p>Added <strong>special context tokens</strong> (like BOS and EOS) to guide the model during training.</p></li>
<li><p>Used a <strong>sliding window</strong> approach for efficient data sampling from long texts.</p></li>
<li><p>Built <strong>token embeddings</strong> to map token IDs into dense vector representations.</p></li>
<li><p>Encoded positional information so the model can understand word order.</p></li>
</ul>


</section>

 ]]></description>
  <category>LLM</category>
  <category>Deep Learning</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/Untitled.html</guid>
  <pubDate>Fri, 15 Nov 2024 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-2/book_cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Chapter 1: Build a Large Language Model</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-1/Build_A_Large_Language_Model_Chapter_1_.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>In this series on notebooks I will share my learning/note-taking of the book <a href="https://www.amazon.com/Build-Large-Language-Model-Scratch/dp/1633437167"><strong>Build a Large Lunguage Model(From Scratch)</strong></a> by the Author <a href="https://x.com/rasbt"><strong>Sebastian Raschka</strong></a>.</p>
<section id="structure-of-the-book" class="level2">
<h2 class="anchored" data-anchor-id="structure-of-the-book">Structure of the Book:</h2>
<pre><code>

├── chapters  
│   ├── chapter1_understanding_LLMs: high-level introduction to the fundamental concepts behind LLMs.  
│   ├── chapter2_text_data: It covers the process ofpreparing text for LLM training, including splitting text into word and subword tokens.  
│   ├── chapter3_attention_mechanisms:  It introduces a basicself-attention framework and progresses to an enhanced self-attention mechanism.  
│   ├── chapter4_GPT_model: focuses on coding a GPT-like LLM that can be trained to generatehuman-like text.  
│   ├── chapter5_pretraining: implements the pretraining process of LLMs.  
│   ├── chapter6_text_classification:  introduces different LLM fine-tuning approaches.  
│   ├── chapter7_instruction_following:  explores the instruction fine-tuning process of LLMs.  
└──  </code></pre>
<ul>
<li><p>The aim of this chapter is to introduce the foundational concepts of large language models (LLMs) and the advancements in deep learning that made them possible</p>
<ul>
<li>this chapter doesn’t contain any code.</li>
</ul></li>
<li><p>Large language models (LLMs), like OpenAI’s ChatGPT, are deep neural networks that revolutionized natural language processing (NLP) in recent years.</p></li>
<li><p>Traditional NLP methods excelled in tasks like spam classification and simple pattern recognition but struggled with complex tasks requiring advanced understanding and generation abilities.</p></li>
<li><p>Contemporary LLMs can handle sophisticated language tasks, such as writing an email from keywords, which was challenging for earlier models.</p></li>
<li><p>When we say language models “understand,” we mean they can produce text that seems coherent and contextually appropriate, not that they have human-like awareness or true comprehension.</p></li>
<li><p>The transformer architecture and large datasets have driven the shift in NLP, enabling more advanced language understanding and interaction.</p></li>
</ul>
<section id="whats-an-llm" class="level3">
<h3 class="anchored" data-anchor-id="whats-an-llm">What’s an LLM:</h3>
<ul>
<li>LLM’s are neural network designed to understand and produce huma-like text.</li>
<li>Large in LLM refer to the size of the datasets those model trained on, but also on the size of parameters ( 100’s of billions)
<ul>
<li>Parameters are adjusted weights during training to predict next word in sentence.</li>
</ul></li>
<li>The architecture of an LLM is called <code>transformers</code> which apply the <code>attention mechanism</code> to different parts of the input while performing the next word prediction. ### Applications of LLM’s:</li>
<li>LLM’s can be used in many contexts to perform different tasks:
<ul>
<li>machine translation</li>
<li>sentiments analysis</li>
<li>text generation<br>
..</li>
</ul></li>
</ul>
</section>
<section id="stages-of-building-and-using-llms" class="level3">
<h3 class="anchored" data-anchor-id="stages-of-building-and-using-llms">Stages of building and using LLMs:</h3>
<ul>
<li>Building LLM form scratch allow us to understand the <strong>mechanics</strong> and <strong>limitations</strong> of language models, and provide us with skills set required for pretraining or fine-tuning phase.</li>
<li>Custom-built LLM outperform general purpose one.
<ul>
<li>Many companies prefer to build their own domain-specific llm to keep their private data in-home and not share it with third party.</li>
<li>developing small lm open the door for deployment on devices like laptops or even mobiles rather than huge servers.</li>
</ul></li>
<li>creating LLM is a process where pre-training and fine-tuning takes place.
<ul>
<li><code>pre</code> indicates that it is the first phase, model is trained on huge chunk of data where it learns basic knowledge and broad pattern of the language.</li>
<li>the <code>fine-tuning</code> phase is where the model get further training but on very specific task and get its knowledge narrowed.</li>
</ul></li>
<li>Fine-tuning can be devised in 2 category:
<ul>
<li><strong>Instruction fine-tuning</strong>: where the model get trained one pair of <strong>instruction =&gt; output</strong> dataset.</li>
<li>Where <strong>classification tuning</strong> the data consist of text and associated class label.</li>
</ul></li>
</ul>
</section>
<section id="introducing-the-transformer-architecture" class="level3">
<h3 class="anchored" data-anchor-id="introducing-the-transformer-architecture">Introducing the Transformer architecture:</h3>
<ul>
<li><p>All modern LLM rely on <strong>Transformer</strong> architecture which was presented for the first time in <a href="https://arxiv.org/abs/1706.03762">this</a> famous paper: <strong>Attention is all you need</strong>.</p></li>
<li><p>Transformer consist of two submodal: 1-encoder and 2-decoder. - encoder module process the input text into some numerical representation that capture meaning.<br>
- decoder uses the numerical values and generate text<br>
</p></li>
<li><p>the key component of the transformer architecture is attention mechanism, we will talk about it later.</p></li>
<li><p><strong>Transformer Variants</strong>:<br>
- Models like BERT and GPT are based on the original transformer architecture but adapt it for different tasks.<br>
- <strong>BERT’s Training Strategy</strong>: BERT uses a masked word prediction approach, where it predicts missing words in a sentence, making it suitable for tasks like text classification and sentiment analysis.<br>
- <strong>GPT vs.&nbsp;BERT</strong>: GPT is designed for generative tasks, whereas BERT excels in tasks requiring understanding of context, like sentiment prediction and document categorization.<br>
- <strong>BERT’s Real-world Application</strong>: Platforms like X (formerly Twitter) use BERT for tasks such as detecting toxic content.</p></li>
<li><p><strong>GPT Focus</strong>: GPT utilizes the <em>Decoder</em> portion of the transformer architecture and is designed for text generation tasks.</p></li>
<li><p><strong>Zero-shot and Few-shot Learning</strong>: GPT models excel in zero-shot learning, meaning they can handle tasks without specific prior examples. They also perform well in few-shot learning, where they learn from a small number of provided examples.</p></li>
<li><p><strong>Versatility</strong>: While GPT models are optimized for text completion, they exhibit broad adaptability and can tackle a wide range of tasks, showcasing their flexibility in natural language processing.</p></li>
</ul>
</section>
<section id="utilizing-large-datasets" class="level3">
<h3 class="anchored" data-anchor-id="utilizing-large-datasets">Utilizing large datasets:</h3>
<ul>
<li><p>Diverse Training Data: Large datasets used for training GPT- and BERT-like models contain billions of words, covering a broad range of topics and languages (both natural and programming).</p></li>
<li><p>Comprehensive Corpus: These datasets are designed to ensure comprehensive exposure to diverse linguistic and contextual patterns.</p></li>
</ul>
</section>
<section id="a-closer-look-at-the-gpt-architecture" class="level3">
<h3 class="anchored" data-anchor-id="a-closer-look-at-the-gpt-architecture">A closer look at the GPT architecture:</h3>
<ul>
<li><p>GPT Origin: GPT was introduced in the paper <a href="https://mng.bz/x2qg">Improving Language Understanding</a> by Generative Pre-Training by Radford et al.&nbsp;from OpenAI.</p></li>
<li><p>GPT-3: A scaled-up version of the original GPT with more parameters and a larger training dataset.</p></li>
<li><p>ChatGPT’s Base Model: The initial ChatGPT model was derived by fine-tuning GPT-3 on a large instruction dataset, using methods from OpenAI’s InstructGPT paper.</p></li>
<li><p>Model Versatility: Despite being trained on a simple next-word prediction task, GPT models excel in various tasks like text completion, spelling correction, classification, and language translation.</p></li>
<li><p>Self-Supervised Learning: The next-word prediction task is a type of self-supervised learning, where the model uses the structure of the data itself for training.</p></li>
<li><p>Label Creation: Labels are generated dynamically, with the next word in a sentence or document serving as the prediction target.</p></li>
<li><p>Training on Massive Datasets: This approach enables the use of large, unlabeled text datasets for training, as explicit labeling of data is unnecessary.</p></li>
</ul>
</section>
<section id="building-a-large-language-model" class="level3">
<h3 class="anchored" data-anchor-id="building-a-large-language-model">Building a large language model:</h3>
<ul>
<li>Now we understand the basic theory behind LLM and how they were introduced, its time to build them from scratch.</li>
</ul>
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-1/pic-1.png" class="img-fluid" alt="Three main phases of coding an LLM"> &gt;Source: Book: Build A Large Language Model by <em>Sebastian Raschka</em></p>


</section>
</section>
</section>

 ]]></description>
  <category>LLM</category>
  <category>Deep Learning</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-1/Build_A_Large_Language_Model_Chapter_1_.html</guid>
  <pubDate>Wed, 13 Nov 2024 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Build a Large Language Model/Chapter-1/book_cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hugging Face Course Notes: Chapter5</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_5/Hugging_Face_Cource_Ch5.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9699ff8f-8a26-41e1-cd19-d6c442548617">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install datasets</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<div class="ansi-escaped-output">
<pre>Collecting datasets

  Downloading datasets-2.17.1-py3-none-any.whl (536 kB)

     <span class="ansi-bright-black-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">536.7/536.7 kB</span> <span class="ansi-red-fg">8.0 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>

Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets) (3.13.1)

Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.10/dist-packages (from datasets) (1.25.2)

Requirement already satisfied: pyarrow&gt;=12.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (14.0.2)

Requirement already satisfied: pyarrow-hotfix in /usr/local/lib/python3.10/dist-packages (from datasets) (0.6)

Collecting dill&lt;0.3.9,&gt;=0.3.0 (from datasets)

  Downloading dill-0.3.8-py3-none-any.whl (116 kB)

     <span class="ansi-bright-black-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">116.3/116.3 kB</span> <span class="ansi-red-fg">14.0 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>

Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from datasets) (1.5.3)

Requirement already satisfied: requests&gt;=2.19.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2.31.0)

Requirement already satisfied: tqdm&gt;=4.62.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (4.66.2)

Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from datasets) (3.4.1)

Collecting multiprocess (from datasets)

  Downloading multiprocess-0.70.16-py310-none-any.whl (134 kB)

     <span class="ansi-bright-black-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">134.8/134.8 kB</span> <span class="ansi-red-fg">16.7 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>

Requirement already satisfied: fsspec[http]&lt;=2023.10.0,&gt;=2023.1.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2023.6.0)

Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.9.3)

Requirement already satisfied: huggingface-hub&gt;=0.19.4 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.20.3)

Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from datasets) (23.2)

Requirement already satisfied: pyyaml&gt;=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (6.0.1)

Requirement already satisfied: aiosignal&gt;=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (1.3.1)

Requirement already satisfied: attrs&gt;=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (23.2.0)

Requirement already satisfied: frozenlist&gt;=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (1.4.1)

Requirement already satisfied: multidict&lt;7.0,&gt;=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (6.0.5)

Requirement already satisfied: yarl&lt;2.0,&gt;=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (1.9.4)

Requirement already satisfied: async-timeout&lt;5.0,&gt;=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp-&gt;datasets) (4.0.3)

Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&gt;=0.19.4-&gt;datasets) (4.9.0)

Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.19.0-&gt;datasets) (3.3.2)

Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.19.0-&gt;datasets) (3.6)

Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.19.0-&gt;datasets) (2.0.7)

Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.19.0-&gt;datasets) (2024.2.2)

Requirement already satisfied: python-dateutil&gt;=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas-&gt;datasets) (2.8.2)

Requirement already satisfied: pytz&gt;=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas-&gt;datasets) (2023.4)

Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil&gt;=2.8.1-&gt;pandas-&gt;datasets) (1.16.0)

Installing collected packages: dill, multiprocess, datasets

Successfully installed datasets-2.17.1 dill-0.3.8 multiprocess-0.70.16
</pre>
</div>
</div>
</div>
<div id="cell-2" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="afe46f37-ea07-4f99-cc92-8a65c48e7e7f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install transformers</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.37.2)
Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.13.1)
Requirement already satisfied: huggingface-hub&lt;1.0,&gt;=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.20.3)
Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)
Requirement already satisfied: packaging&gt;=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (23.2)
Requirement already satisfied: pyyaml&gt;=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)
Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.12.25)
Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)
Requirement already satisfied: tokenizers&lt;0.19,&gt;=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.15.2)
Requirement already satisfied: safetensors&gt;=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.2)
Requirement already satisfied: tqdm&gt;=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.2)
Requirement already satisfied: fsspec&gt;=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.19.3-&gt;transformers) (2023.6.0)
Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.19.3-&gt;transformers) (4.9.0)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (3.3.2)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (3.6)
Requirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (2.0.7)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;transformers) (2024.2.2)</code></pre>
</div>
</div>
<div id="cell-3" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span></code></pre></div></div>
</div>
<div id="cell-4" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span></code></pre></div></div>
</div>
<section id="intrudoction" class="level2">
<h2 class="anchored" data-anchor-id="intrudoction">Intrudoction:</h2>
<ul>
<li>In chapter 3 we learn how to use the library <code>datsets</code> by loading datest from the hub and building a <code>compute_metrics</code> function, and using <code>Dataset.map()</code> function, however this functionalities doesn’t represent the whole picture about <code>dataset</code> library.</li>
<li>In this chapetr we will go deeper and try understand :
<ul>
<li>How to load a dataset when it’s not available on the Hub</li>
<li>How to slice and dice a dataset</li>
<li>What to do when the datset is large</li>
<li>What is “memory mapping” and Apache row?</li>
<li>How to create our own dataset and push it to the hub?</li>
</ul></li>
</ul>
</section>
<section id="what-if-my-dataset-isnt-on-the-hub" class="level2">
<h2 class="anchored" data-anchor-id="what-if-my-dataset-isnt-on-the-hub">What if my dataset isn’t on the Hub?</h2>
<ul>
<li>Most of the time we will deal with situation when the dataset we want to work with isn’t on the HUB, In this section we’ll show you how huggingface Datasets can be used to load datasets that aren’t available on the Hugging Face Hub.</li>
</ul>
<section id="working-with-local-and-remote-datasets" class="level3">
<h3 class="anchored" data-anchor-id="working-with-local-and-remote-datasets">Working with local and remote datasets:</h3>
<ul>
<li>Hugging face Datasets provides loading scripts to handle the loading of local and remote datasets. It supports several common data formats, such as:</li>
</ul>
<pre><code>load_dataset("csv", data_files="my_file.csv")
load_dataset("text", data_files="my_file.txt")
load_dataset("json", data_files="my_file.jsonl")
load_dataset("pandas", data_files="my_dataframe.pkl")



* As shown , for each data format we just need to specify the type of loading script in the `load_dataset()` function, along with a `data_files` argument that specifies the path to one or more files.
* First we will deal with loading a dataset from local files; later we’ll see how to do the same with remote files.



### Loading a local dataset

* Here we'll use the [SQuAD-it](https://github.com/crux82/squad-it/) dataset, which is a large-scale dataset for question answering in Italian.

    * The training and test splits are hosted on GitHub, so we can download them with a simple wget command:


::: {#cell-9 .cell quarto-private-1='{"key":"colab","value":{"base_uri":"https://localhost:8080/"}}' outputId='6433a784-3bd2-4b27-f0fc-3135e17e61bb'}
``` {.python .cell-code}
!wget https://github.com/crux82/squad-it/raw/master/SQuAD_it-train.json.gz
!wget https://github.com/crux82/squad-it/raw/master/SQuAD_it-test.json.gz</code></pre>
<div class="cell-output cell-output-stdout">
<pre><code>--2024-02-27 13:44:06--  https://github.com/crux82/squad-it/raw/master/SQuAD_it-train.json.gz
Resolving github.com (github.com)... 140.82.114.4
Connecting to github.com (github.com)|140.82.114.4|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/crux82/squad-it/master/SQuAD_it-train.json.gz [following]
--2024-02-27 13:44:06--  https://raw.githubusercontent.com/crux82/squad-it/master/SQuAD_it-train.json.gz
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 7725286 (7.4M) [application/octet-stream]
Saving to: ‘SQuAD_it-train.json.gz’

SQuAD_it-train.json 100%[===================&gt;]   7.37M  --.-KB/s    in 0.1s    

2024-02-27 13:44:06 (68.4 MB/s) - ‘SQuAD_it-train.json.gz’ saved [7725286/7725286]

--2024-02-27 13:44:06--  https://github.com/crux82/squad-it/raw/master/SQuAD_it-test.json.gz
Resolving github.com (github.com)... 140.82.112.3
Connecting to github.com (github.com)|140.82.112.3|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/crux82/squad-it/master/SQuAD_it-test.json.gz [following]
--2024-02-27 13:44:07--  https://raw.githubusercontent.com/crux82/squad-it/master/SQuAD_it-test.json.gz
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.108.133, 185.199.111.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1051245 (1.0M) [application/octet-stream]
Saving to: ‘SQuAD_it-test.json.gz’

SQuAD_it-test.json. 100%[===================&gt;]   1.00M  --.-KB/s    in 0.07s   

2024-02-27 13:44:07 (15.1 MB/s) - ‘SQuAD_it-test.json.gz’ saved [1051245/1051245]
</code></pre>
</div>
<p>:::</p>
<ul>
<li>We need decompress them frist:</li>
</ul>
<div id="cell-11" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7fc8b0ff-4815-428a-85f8-61955b3199b0">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>gzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dkv SQuAD_it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-*</span>.json.gz</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>SQuAD_it-test.json.gz:   87.5% -- created SQuAD_it-test.json
SQuAD_it-train.json.gz:  82.3% -- created SQuAD_it-train.json</code></pre>
</div>
</div>
<div id="cell-12" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rf SQuAD_it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-*</span>.json.gz</span></code></pre></div></div>
</div>
<ul>
<li>Now we can download our dataset from local file as if it from the hub:</li>
</ul>
<div id="cell-14" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:49,&quot;referenced_widgets&quot;:[&quot;02c4de3e6d494ada9814411dbb0d9493&quot;,&quot;0e41df6027ce489592589eafe1a67645&quot;,&quot;1b7228e7207d4e139dae95df35db7d46&quot;,&quot;4c3dda52c38e4352b2172a421304e13b&quot;,&quot;903c01b33c9d4c76a6d945ed04abc863&quot;,&quot;6dfd63eb86a84d64b1846b579cf2020a&quot;,&quot;cc4cea6ef4894521a22ad3d0984bb66a&quot;,&quot;e8abc1e34ea649b3827f020bd4af2037&quot;,&quot;c74863db21764c8bb348c02fb4284a01&quot;,&quot;5abc52dc8e4a4cb9ba4a68eb6d4b2a1f&quot;,&quot;fef8c62aec954330a5a2d34fc10dbd8c&quot;]}}" data-outputid="576ffe7d-f40d-4d9a-8723-40e6e33dd076">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'json'</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQuAD_it-train.json"</span>, field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span> )</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"02c4de3e6d494ada9814411dbb0d9493","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li>Be default downloading local file creates a DatasetDict with train split:</li>
</ul>
<div id="cell-16" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="6ea839b5-9566-4272-e147-a39a0dddb4a9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">dataset</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['title', 'paragraphs'],
        num_rows: 442
    })
})</code></pre>
</div>
</div>
<ul>
<li>We can view that we have <code>442</code> rows, let’s see one of them:</li>
</ul>
<div id="cell-18" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></div>
</div>
<ul>
<li>Great, we’ve loaded our first local dataset! But while this worked for the training set, what we really want is to include both the train and test splits in a single DatasetDict object so we can apply Dataset.map() functions across both splits at once.</li>
<li>To do this, we can provide a dictionary to the <code>data_files</code> argument that maps each split name to a file associated with that split:</li>
</ul>
<div id="cell-20" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:255,&quot;referenced_widgets&quot;:[&quot;4f7eef42c00e454e9c029dfb28712593&quot;,&quot;5126d68f0ed64b22832722af19a373bf&quot;,&quot;97b2e233b38a4b739e7a9b94f8515859&quot;,&quot;9734ad3215f34ce48464a10e19bc3764&quot;,&quot;561149884421418bbb59db3398846b41&quot;,&quot;f7a07d6543ce4c6591fa4066f983af69&quot;,&quot;ac55b5af07574274b4470e63ff768724&quot;,&quot;b25880948c3e4c308b273e87b3e95a8a&quot;,&quot;13c094d7148f472aae712bf37a2ef2e4&quot;,&quot;52b806e7b21c4a7c8058f36234138242&quot;,&quot;7844346b2e11456995f8826a1883e7c9&quot;,&quot;27bc1aeae8fe4f32b7d85c78cd0d8e9b&quot;,&quot;69a2715a74484956a263978c9fd0b56a&quot;,&quot;efc9119d28004546bd3eaadf5db2bac0&quot;,&quot;7a6f36bed79b47379d1db4dfc8f5489f&quot;,&quot;b83b59fcb06f46c48a3ac74621572188&quot;,&quot;218e34a152664dccaa4022acebd1c68c&quot;,&quot;fb6b3f7b69f648519036ec00f146e423&quot;,&quot;853293be1bd24bd3b7ef501a4b9e68d6&quot;,&quot;f6a6abcd1cb84f41bb6445920f56d665&quot;,&quot;00b3d2b7cc34443dbe37b5b9155bc6d4&quot;,&quot;f1fe8a9b52f44fa8b230a2a998072a04&quot;]}}" data-outputid="7db6a711-9b2c-4fa9-92c4-26595f759626">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the proper way to load dataset from local file:</span></span>
<span id="cb15-2">data_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQuAD_it-train.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQuAD_it-test.json"</span>}</span>
<span id="cb15-3">squad_it_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_files, field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb15-4">squad_it_dataset</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4f7eef42c00e454e9c029dfb28712593","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"27bc1aeae8fe4f32b7d85c78cd0d8e9b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['title', 'paragraphs'],
        num_rows: 442
    })
    test: Dataset({
        features: ['title', 'paragraphs'],
        num_rows: 48
    })
})</code></pre>
</div>
</div>
<ul>
<li><p>This is exactly what we wanted. Now, we can apply various preprocessing techniques to clean up the data, tokenize the reviews, and so on.</p></li>
<li><p>The loading scripts in Datasets acually support the automatic decompression of the input files, we could have skipped the use of gzip by pointing the data_files argument directly to the compressed files:</p></li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:255,&quot;referenced_widgets&quot;:[&quot;e375acaaa4db4ef7a62a2c26e1125eec&quot;,&quot;d24d33ca1fd949df89a086efebcaf2f3&quot;,&quot;e84aca0c230f403098ee9a956651768d&quot;,&quot;60e1b74653544cd6ac0a652538490700&quot;,&quot;a785953f390b4d8f8efd719a6103f5e9&quot;,&quot;8b5484e37f4c486b9d0f5140f09b085a&quot;,&quot;059de4fdd1294dce8fa9998bdb6ced17&quot;,&quot;e4b793b2b4c44466a8ef157eae7e8b9e&quot;,&quot;6220cd3f71af431a89aad55540682c00&quot;,&quot;cce78e05a7f74e139192ece8d2996a6f&quot;,&quot;0fd676644c354c98aae582bd951b0b5a&quot;,&quot;48c60e819f694fcab2fa8b52e9238a59&quot;,&quot;0a0fac48840446d1b1c939f60bf7a0db&quot;,&quot;8e657f31c9ca4321af9ef24db25cf03c&quot;,&quot;f5235e51c4b64d4e9aae3afccfad7c61&quot;,&quot;de5d843a4ab64fc49ffa66afa9639bdc&quot;,&quot;909a08400099465a872f3400e5d41bd0&quot;,&quot;373b2ac0353146bdb2e5cba677be6a54&quot;,&quot;453c7b19a9f84cbc9593b2294a257d9c&quot;,&quot;c5a761ffdb5644a482b5c9e28e27d96f&quot;,&quot;61a7184b239d4ff79e9d38463e8be3a9&quot;,&quot;b989ef199f784006b60ed8f9704f03ad&quot;]}}" data-outputid="216f1526-f2c4-41fa-8576-734496f4c181">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">data_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SQuAD_it-train.json.gz'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SQuAD_it-test.json.gz'</span>}</span>
<span id="cb17-2">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'json'</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_files, field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span>
<span id="cb17-3">dataset</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e375acaaa4db4ef7a62a2c26e1125eec","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"48c60e819f694fcab2fa8b52e9238a59","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['title', 'paragraphs'],
        num_rows: 442
    })
    test: Dataset({
        features: ['title', 'paragraphs'],
        num_rows: 48
    })
})</code></pre>
</div>
</div>
<ul>
<li>The automatic decompression also applies to other common formats like ZIP and TAR, so you just need to point data_files to the compressed files and you’re good to go!</li>
</ul>
</section>
<section id="loading-a-remote-dataset" class="level3">
<h3 class="anchored" data-anchor-id="loading-a-remote-dataset">Loading a remote dataset:</h3>
<ul>
<li>Loading remote files is very similar to loading locally, we just need to point to <code>data_file</code> the <code>url</code> where the data is stored instead to providing the path to lacal files.</li>
<li>For example the <code>SQuAD_it</code> dataset is stored on <code>github</code> so we could build our dataset from that <code>url</code> directly:</li>
</ul>
<div id="cell-26" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:145,&quot;referenced_widgets&quot;:[&quot;58cb0dd39c784500999b2afb463bf290&quot;,&quot;393f77ddd4b7431ea7c88a0c71434442&quot;,&quot;a15b3f773417481e8052264f0396d283&quot;,&quot;2b90592acc664d1b991919ff939836a6&quot;,&quot;1d7be5a1a3eb4e8e9f217ee2d229f5d5&quot;,&quot;29fe3ed0ae894227b36eb8af20415794&quot;,&quot;6e6f223ac30a4ea89cf3c5238e0432b9&quot;,&quot;74c05d2a92c3444dac00e291b0064464&quot;,&quot;f3ebaec296f24d36aaf49b4a0a1b8fd9&quot;,&quot;e2aded15b9c0494b8a8852b752d5d8a0&quot;,&quot;0d34c3d3087647e68628d67346ad1beb&quot;,&quot;72b6a65d83f44ec3b9a91268aafc901d&quot;,&quot;4a1e047f5a9b40f3b9867864f5ec7ecd&quot;,&quot;dd24bd2c069146d38886b144b0196c48&quot;,&quot;21586e2b53344308add0ed8296f8bd02&quot;,&quot;2c8ea3d3f30646189b424250e007a326&quot;,&quot;7188a61bd83749a5a9edb2c0477ffc37&quot;,&quot;9487d8d5b2774cca8bd57efcdfe47aa9&quot;,&quot;b905baf0f09c438c8f05d923f7213fa1&quot;,&quot;2458878c0ae543ef85c1b4b69cb6f697&quot;,&quot;5c60f4ff8cce4d81a6815d6e687a0f33&quot;,&quot;e2d5432da27f40dd9c86be206669f488&quot;,&quot;1e7889d4df984efd9d7dabb219700cff&quot;,&quot;1f53bbc9c8a44b579ad669fca7f0cfd4&quot;,&quot;f66db4d647ee436dac9ee93bba5d5358&quot;,&quot;49a79629a7aa48e99897398111369c4d&quot;,&quot;fe9cb706c50d4b28837788de7cc206cc&quot;,&quot;581caed7ff944f2aa509ff66095791be&quot;,&quot;b7721d07397b497599ca33bce152b560&quot;,&quot;fa9d6e5336f24618941fc3e11b6fc597&quot;,&quot;bfb62e953c3c41dbb2fabe05cbfbfc8d&quot;,&quot;3a5c38fc3990468dbb702ceb7dc90e15&quot;,&quot;19a1a0dc5063462294d725f8c109d78a&quot;,&quot;9b0b038085184ca2ac7be2f65dbeb85d&quot;,&quot;14d206e269ed4ec3a76d83c15ce4621f&quot;,&quot;ba0e29ba5cae46a8a88ef506836ec30b&quot;,&quot;dadcca126cf54c868bde7d13f017af3d&quot;,&quot;bf8b7c7b62f144d2ad5032fe7c5081b0&quot;,&quot;cee77665480245f4a52c9d99de17800d&quot;,&quot;0a105fbbfdfd4fa29070ddfc24fc59b7&quot;,&quot;61a0b81cd4cd4f4da0028fe276d884ae&quot;,&quot;2120beb71e0042bd83643a1cb39d1910&quot;,&quot;1fb6cc20f59e4b5495aca4c25e7872ff&quot;,&quot;1258cc0c35ce45e8b9efd3e5b8ab921f&quot;]}}" data-outputid="02a3aea5-6693-4dab-bd21-3931092917f5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">data_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://github.com/crux82/squad-it/raw/master/SQuAD_it-train.json.gz'</span>,</span>
<span id="cb19-2">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://github.com/crux82/squad-it/raw/master/SQuAD_it-test.json.gz'</span>}</span>
<span id="cb19-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'json'</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_files, field<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"58cb0dd39c784500999b2afb463bf290","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"72b6a65d83f44ec3b9a91268aafc901d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1e7889d4df984efd9d7dabb219700cff","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9b0b038085184ca2ac7be2f65dbeb85d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
</section>
<section id="time-to-slice-and-dice" class="level2">
<h2 class="anchored" data-anchor-id="time-to-slice-and-dice">Time to slice and dice:</h2>
<ul>
<li>In this section we will explore various features Datasets provide in order to clean and prepare the dataset for the next steps.</li>
</ul>
<section id="slicing-and-dicing-our-data" class="level3">
<h3 class="anchored" data-anchor-id="slicing-and-dicing-our-data">Slicing and dicing our data:</h3>
<ul>
<li><p>Like <code>Pandas</code> Datasets provides several functions to manipulate the content of DatasetDict Data object, we already use the <code>.map()</code> method.</p></li>
<li><p>Here we will use <a href="https://archive.ics.uci.edu/static/public/462/drug+review+dataset+drugs+com.zip">Drug Review Dataset</a> from <a href="https://archive.ics.uci.edu/ml/index.php">UC Irvine Machine Learning Repository</a> which contains patient reviews on various drugs, along with the condition being treated and a 10-star rating of the patient’s satisfaction.</p></li>
<li><p>First we need to download it and unzip it:</p></li>
</ul>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="85e0488b-52a4-4ddb-a650-de546a731018">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>archive.ics.uci.edu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>static<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>public<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">462</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>drug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>review<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>drugs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>com.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>--2024-02-27 14:22:46--  https://archive.ics.uci.edu/static/public/462/drug+review+dataset+drugs+com.zip
Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.252
Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.252|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified
Saving to: ‘drug+review+dataset+drugs+com.zip’

drug+review+dataset     [       &lt;=&gt;          ]  41.00M  30.7MB/s    in 1.3s    

2024-02-27 14:22:48 (30.7 MB/s) - ‘drug+review+dataset+drugs+com.zip’ saved [42989872]
</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0b94e920-9624-47a4-b5b8-5ca00a096159">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>unzip drug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>review<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>drugs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>com.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Archive:  drug+review+dataset+drugs+com.zip
  inflating: drugsComTest_raw.tsv    
  inflating: drugsComTrain_raw.tsv   </code></pre>
</div>
</div>
<ul>
<li>We will use <code>csv</code> arguments here even though we have <code>tsv</code> files, we just need to specifying the delimiter argument in the load_dataset() function as follows:</li>
</ul>
<div id="cell-32" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;d77328af1969417babf4b6f61d5bc64f&quot;,&quot;825033d315a942c79ae38d7784872db0&quot;,&quot;92eef319f17e495094980336a3d91a60&quot;,&quot;7b37ba65ba084a928f8064a2bca742e7&quot;,&quot;7c52aebab239468faee6bcabd53c1868&quot;,&quot;b410170a11cb4854b71dafd717f714bb&quot;,&quot;268b2fea738d415383598f5d544fb4ff&quot;,&quot;fd95ebe7a8dd41dba04055bf49bd0cbe&quot;,&quot;f297ee14f4a046c8a7d4d088d54200f1&quot;,&quot;2bce7ccadb13414884dee6e7a97db76c&quot;,&quot;c137758800e64fa18e9d865e40eb7293&quot;,&quot;6c244b993ac044ac88a3d7b30062fd96&quot;,&quot;5e5f66dbc2d84582afa8a70ff8ad307a&quot;,&quot;1d0feb25b8be4678b65efb44ff038f20&quot;,&quot;2106109b93a44b0f87b353aa019aefe6&quot;,&quot;f74be4a998b7496ab739be307e085c89&quot;,&quot;2c78fbcd1a4b42e694228fca01b9bb0b&quot;,&quot;dcf87080aec1428a8fe5718f85376e08&quot;,&quot;76c0a42f93714fad96015b9a0d48c464&quot;,&quot;865585b3c4044f63a0cce7650301fe97&quot;,&quot;1d018106d07a4dd5b5e7d07e1c611cfe&quot;,&quot;998d3da530d64a7999ddd7f5261d6484&quot;]}}" data-outputid="3fd11f48-f251-4b99-c9a0-7df8224402ca">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">data_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drugsComTrain_raw.tsv'</span>,</span>
<span id="cb24-2">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drugsComTest_raw.tsv'</span>}</span>
<span id="cb24-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv'</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_files, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d77328af1969417babf4b6f61d5bc64f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6c244b993ac044ac88a3d7b30062fd96","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li>A good practice when doing any sort of data analysis is to grab a small random sample to get a quick feel for the type of data you’re working with. In Datasets, we can create a random sample by chaining the Dataset.shuffle() and Dataset.select() functions together:</li>
</ul>
<div id="cell-34" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="275bc99e-643d-4bd4-9a51-6600d8ae1ac2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">drug_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].shuffle(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>).select(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb25-2">drug_sample[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>{'Unnamed: 0': [87571, 178045],
 'drugName': ['Naproxen', 'Duloxetine'],
 'condition': ['Gout, Acute', 'ibromyalgia'],
 'review': ['"like the previous person mention, I&amp;#039;m a strong believer of aleve, it works faster for my gout than the prescription meds I take. No more going to the doctor for refills.....Aleve works!"',
  '"I have taken Cymbalta for about a year and a half for fibromyalgia pain. It is great\r\nas a pain reducer and an anti-depressant, however, the side effects outweighed \r\nany benefit I got from it. I had trouble with restlessness, being tired constantly,\r\ndizziness, dry mouth, numbness and tingling in my feet, and horrible sweating. I am\r\nbeing weaned off of it now. Went from 60 mg to 30mg and now to 15 mg. I will be\r\noff completely in about a week. The fibro pain is coming back, but I would rather deal with it than the side effects."'],
 'rating': [9.0, 3.0],
 'date': ['September 2, 2015', 'November 7, 2011'],
 'usefulCount': [36, 13]}</code></pre>
</div>
</div>
<ul>
<li><p>Here we fixed the <code>seed</code> for reproducibility.</p></li>
<li><p><code>.select()</code> method works with iterator so we provide a <code>range()</code></p></li>
<li><p>Then we slice that sample the python way.</p></li>
<li><p>From this sample we can already see a few quirks in our dataset:</p>
<ul>
<li>The Unnamed: 0 column looks suspiciously like an anonymized ID for each patient.</li>
<li>The condition column includes a mix of uppercase and lowercase labels.</li>
<li>The reviews are of varying length and contain a mix of Python line separators () as well as HTML character codes like &amp;#039;.</li>
</ul></li>
<li><p>We will adress each issue with Dataset library:</p></li>
<li><p>First the <code>unnamed</code> column may be just Id fro each patient, so we check if each one of those IDs is unique or not:</p></li>
</ul>
<div id="cell-37" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> split <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset.keys():</span>
<span id="cb27-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset[split]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset[split].unique(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unnamed: 0"</span>))</span></code></pre></div></div>
</div>
<ul>
<li>It’s better to rename that column to something more meaningfull:</li>
</ul>
<div id="cell-39" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a0d1350a-efff-4aea-a40e-e5ade5881053">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.rename_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unnamed: 0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'patient_id'</span>)</span>
<span id="cb28-2">dataset</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount'],
        num_rows: 161297
    })
    test: Dataset({
        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount'],
        num_rows: 53766
    })
})</code></pre>
</div>
</div>
<ul>
<li>Now we have to lower case all the <code>condition</code> values. This can be easily achieved by <code>.map()</code> method:</li>
</ul>
<div id="cell-41" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lower_case(example):</span>
<span id="cb30-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'condition'</span>: example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'condition'</span>].lower()}</span></code></pre></div></div>
</div>
<div id="cell-42" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:267,&quot;referenced_widgets&quot;:[&quot;961847dbf5784af7911886e78bc0fd97&quot;,&quot;f47e03b5ec4a4105b8798e0d217405f3&quot;,&quot;41f765544ceb4b618f9e616f46668474&quot;,&quot;8ac69ea4703740adb565243dbc19a120&quot;,&quot;3da4d8c99f274642b007073a96f83aa1&quot;,&quot;160e618eadaf46be9b2f3202e7ed3d80&quot;,&quot;bba9fe9ca1d546b4b982d954221fe5f1&quot;,&quot;55a7eca489c24b91840e562dfd064f13&quot;,&quot;4fa4b4790daa4c7e89accef366147c2f&quot;,&quot;b7e32d0ce04a47deb8e1ec5057acae56&quot;,&quot;c262120f069d49cba2795e20af8fb627&quot;]}}" data-outputid="3df6da34-3171-4161-b0f0-91abe41d27b2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(lower_case)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"961847dbf5784af7911886e78bc0fd97","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">AttributeError</span>                            Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-27-b34dfc422493&gt;</span> in <span class="ansi-cyan-fg">&lt;cell line: 1&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>dataset<span class="ansi-blue-fg">.</span>map<span class="ansi-blue-fg">(</span>lower_case<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/dataset_dict.py</span> in <span class="ansi-cyan-fg">map</span><span class="ansi-blue-fg">(self, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, load_from_cache_file, cache_file_names, writer_batch_size, features, disable_nullable, fn_kwargs, num_proc, desc)</span>
<span class="ansi-green-fg ansi-bold">    866</span>             cache_file_names <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">{</span>k<span class="ansi-blue-fg">:</span> <span class="ansi-green-fg">None</span> <span class="ansi-green-fg">for</span> k <span class="ansi-green-fg">in</span> self<span class="ansi-blue-fg">}</span>
<span class="ansi-green-fg ansi-bold">    867</span>         return DatasetDict(
<span class="ansi-green-fg">--&gt; 868</span><span class="ansi-red-fg">             {
</span><span class="ansi-green-fg ansi-bold">    869</span>                 k: dataset.map(
<span class="ansi-green-fg ansi-bold">    870</span>                     function<span class="ansi-blue-fg">=</span>function<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/dataset_dict.py</span> in <span class="ansi-cyan-fg">&lt;dictcomp&gt;</span><span class="ansi-blue-fg">(.0)</span>
<span class="ansi-green-fg ansi-bold">    867</span>         return DatasetDict(
<span class="ansi-green-fg ansi-bold">    868</span>             {
<span class="ansi-green-fg">--&gt; 869</span><span class="ansi-red-fg">                 k: dataset.map(
</span><span class="ansi-green-fg ansi-bold">    870</span>                     function<span class="ansi-blue-fg">=</span>function<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">    871</span>                     with_indices<span class="ansi-blue-fg">=</span>with_indices<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">    591</span>             self<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">"Dataset"</span> <span class="ansi-blue-fg">=</span> kwargs<span class="ansi-blue-fg">.</span>pop<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"self"</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    592</span>         <span class="ansi-red-fg"># apply actual function</span>
<span class="ansi-green-fg">--&gt; 593</span><span class="ansi-red-fg">         </span>out<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">"DatasetDict"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> func<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    594</span>         datasets<span class="ansi-blue-fg">:</span> List<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">.</span>values<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> isinstance<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">,</span> dict<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">else</span> <span class="ansi-blue-fg">[</span>out<span class="ansi-blue-fg">]</span>
<span class="ansi-green-fg ansi-bold">    595</span>         <span class="ansi-green-fg">for</span> dataset <span class="ansi-green-fg">in</span> datasets<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">    556</span>         }
<span class="ansi-green-fg ansi-bold">    557</span>         <span class="ansi-red-fg"># apply actual function</span>
<span class="ansi-green-fg">--&gt; 558</span><span class="ansi-red-fg">         </span>out<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">"DatasetDict"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> func<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    559</span>         datasets<span class="ansi-blue-fg">:</span> List<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">.</span>values<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> isinstance<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">,</span> dict<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">else</span> <span class="ansi-blue-fg">[</span>out<span class="ansi-blue-fg">]</span>
<span class="ansi-green-fg ansi-bold">    560</span>         <span class="ansi-red-fg"># re-apply format to the output</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">map</span><span class="ansi-blue-fg">(self, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, load_from_cache_file, cache_file_name, writer_batch_size, features, disable_nullable, fn_kwargs, num_proc, suffix_template, new_fingerprint, desc)</span>
<span class="ansi-green-fg ansi-bold">   3103</span>                     desc<span class="ansi-blue-fg">=</span>desc <span class="ansi-green-fg">or</span> <span class="ansi-blue-fg">"Map"</span><span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">   3104</span>                 ) as pbar:
<span class="ansi-green-fg">-&gt; 3105</span><span class="ansi-red-fg">                     </span><span class="ansi-green-fg">for</span> rank<span class="ansi-blue-fg">,</span> done<span class="ansi-blue-fg">,</span> content <span class="ansi-green-fg">in</span> Dataset<span class="ansi-blue-fg">.</span>_map_single<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">**</span>dataset_kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3106</span>                         <span class="ansi-green-fg">if</span> done<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3107</span>                             shards_done <span class="ansi-blue-fg">+=</span> <span class="ansi-cyan-fg">1</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">_map_single</span><span class="ansi-blue-fg">(shard, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, cache_file_name, writer_batch_size, features, disable_nullable, fn_kwargs, new_fingerprint, rank, offset)</span>
<span class="ansi-green-fg ansi-bold">   3456</span>                     _time <span class="ansi-blue-fg">=</span> time<span class="ansi-blue-fg">.</span>time<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   3457</span>                     <span class="ansi-green-fg">for</span> i<span class="ansi-blue-fg">,</span> example <span class="ansi-green-fg">in</span> shard_iterable<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 3458</span><span class="ansi-red-fg">                         </span>example <span class="ansi-blue-fg">=</span> apply_function_on_filtered_inputs<span class="ansi-blue-fg">(</span>example<span class="ansi-blue-fg">,</span> i<span class="ansi-blue-fg">,</span> offset<span class="ansi-blue-fg">=</span>offset<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   3459</span>                         <span class="ansi-green-fg">if</span> update_data<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3460</span>                             <span class="ansi-green-fg">if</span> i <span class="ansi-blue-fg">==</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">apply_function_on_filtered_inputs</span><span class="ansi-blue-fg">(pa_inputs, indices, check_same_num_examples, offset)</span>
<span class="ansi-green-fg ansi-bold">   3359</span>             <span class="ansi-green-fg">if</span> with_rank<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3360</span>                 additional_args <span class="ansi-blue-fg">+=</span> <span class="ansi-blue-fg">(</span>rank<span class="ansi-blue-fg">,</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">-&gt; 3361</span><span class="ansi-red-fg">             </span>processed_inputs <span class="ansi-blue-fg">=</span> function<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>fn_args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>additional_args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>fn_kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   3362</span>             <span class="ansi-green-fg">if</span> isinstance<span class="ansi-blue-fg">(</span>processed_inputs<span class="ansi-blue-fg">,</span> LazyDict<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3363</span>                 processed_inputs = {

<span class="ansi-green-fg">&lt;ipython-input-26-98b6e79f37ab&gt;</span> in <span class="ansi-cyan-fg">lower_case</span><span class="ansi-blue-fg">(example)</span>
<span class="ansi-green-fg ansi-bold">      1</span> <span class="ansi-green-fg">def</span> lower_case<span class="ansi-blue-fg">(</span>example<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">----&gt; 2</span><span class="ansi-red-fg">   </span><span class="ansi-green-fg">return</span> <span class="ansi-blue-fg">{</span><span class="ansi-blue-fg">'condition'</span><span class="ansi-blue-fg">:</span> example<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">'condition'</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">.</span>lower<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">}</span>

<span class="ansi-red-fg">AttributeError</span>: 'NoneType' object has no attribute 'lower'</pre>
</div>
</div>
</div>
<ul>
<li>Its seems like some of <code>condition</code> values are <code>NoneType</code>, which the map function cannot support.</li>
<li>Let’s drop these rows using Dataset.filter(), which works in a similar way to Dataset.map() and expects a function that receives a single example of the dataset.</li>
<li>We will use the <code>lambda</code> function:</li>
</ul>
<div id="cell-44" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;4297e5fcf44d4cf281a2d73b49774173&quot;,&quot;1b51675d20dd4ae88705c33d4c734dbd&quot;,&quot;59b9c52cd6d041f1873df50a03cad7d4&quot;,&quot;af43d07afe5a43e58d1a410a18d39e7e&quot;,&quot;07fb4e67bac94b0ebdd2fb37610ee035&quot;,&quot;e9e81394c0224e8181f1020d4a29794c&quot;,&quot;93c874563a2e48298e2d1e5e5489ae09&quot;,&quot;af41ba2da4714a5eb0af78f0e08aff98&quot;,&quot;ab949339aff14b2b9b08875abaa9f2e4&quot;,&quot;37d4ef3f619a4c63a72b60c9ef1896a9&quot;,&quot;970c640829c842fb8dff22a9edb6e744&quot;,&quot;26a5f61c499347aab7ae3fc498c2a7e7&quot;,&quot;dc15198a1f384b7e9bb3aa01a47c8e36&quot;,&quot;4b2783ff83714bc0a212a863a52dabf2&quot;,&quot;427735239a0d433d9214a8c055769584&quot;,&quot;5f4d18ba50af48a39e8a82a731049b63&quot;,&quot;ad38788bcbd247739b1fb6785ce39d2f&quot;,&quot;daeafc7d0df849d49dc69e8e4ea93623&quot;,&quot;26df9a3bed4c4004af225524f05417fd&quot;,&quot;2050c0cd1e9a4a78aa729b392506e226&quot;,&quot;030dbf6613024c3ea052ef4b2ae47cfb&quot;,&quot;85bd67b357484ede8e5b08ddd61c3c43&quot;]}}" data-outputid="f4d5e75d-7817-4c89-b4c7-96b0a1cfee91">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'condition'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4297e5fcf44d4cf281a2d73b49774173","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"26a5f61c499347aab7ae3fc498c2a7e7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li>Now lets aplly <code>.map()</code> method on lower_case() funtion:</li>
</ul>
<div id="cell-46" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;ef234f70d12a4a398d4caa545290315e&quot;,&quot;98245feb0ea14250a77ab20e312d3c27&quot;,&quot;9ceb1da4338046989cfb2cbbb8878f74&quot;,&quot;83a12f14d21d4c988b8172195039c429&quot;,&quot;4bd7c7e3b91c4bc0a54263f446551c7b&quot;,&quot;3300835d1c8740e9b6d9b08c84eb092d&quot;,&quot;db92ba4cbd0f44e892392542abcb9b92&quot;,&quot;c275403f5f2145498a25246b51da79be&quot;,&quot;effa27666ad0481b9abda154824e3496&quot;,&quot;50776fba6aa741589b58378c38433b72&quot;,&quot;5549bcc1b8794c9fb60db6c2efe2c45e&quot;,&quot;296e03fd8ce84548b59a2b71b4e9addf&quot;,&quot;634f40a9c4be403f97349563ec192bde&quot;,&quot;8cd5767878c34fa78c054489593ee47c&quot;,&quot;28df15c7ee5f47cf98580b2fe779c3b4&quot;,&quot;48102c46664549a5858a1384c3858e06&quot;,&quot;9821c95f061946fcb1a9a11b9c8d08fa&quot;,&quot;b045543e33b34957986c2127d3cba5ee&quot;,&quot;1bc10320889248f096e905d36e904a70&quot;,&quot;1b7cb68b406a40618ea7a0fa72884b10&quot;,&quot;257e997735844af89827138b673958f1&quot;,&quot;0486e43c123b412db440846cdf18e0ff&quot;]}}" data-outputid="ab590615-8528-4382-9ec9-13cd6bb8ab79">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(lower_case)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ef234f70d12a4a398d4caa545290315e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"296e03fd8ce84548b59a2b71b4e9addf","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="creating-new-columns" class="level3">
<h3 class="anchored" data-anchor-id="creating-new-columns">Creating new columns:</h3>
<ul>
<li>When dealing with reviews datasets, its good practice to count the number of words in each review, so lets create a function that achieve that goal:</li>
</ul>
<div id="cell-48" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_review_length(example):</span>
<span id="cb34-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review_length'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>].split())}</span></code></pre></div></div>
</div>
<ul>
<li><code>compute_review_length()</code> returns a dictionary whose key does not correspond to one of the column names in the dataset. In this case, when <code>compute_review_length()</code> is passed to <code>Dataset.map()</code>, it will be applied to all the rows in the dataset to create a new review_length column:</li>
</ul>
<div id="cell-50" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;b2078fe3572c46d786beb6f5b2320455&quot;,&quot;82dee8b7ca9d48899ebd5e3a04f8b35e&quot;,&quot;1223bbc9bbe046d89280072d55a7f092&quot;,&quot;c556ead5e2f243de8919182f2516dba5&quot;,&quot;7c4d22494d5244e0926495473f8691de&quot;,&quot;a42e5c72d70a450a85b57b493af0acb7&quot;,&quot;a2a0f4c2516e4e8593d8f8ffa2b66613&quot;,&quot;13ba9a9d919544e9a7a45852d94c6c8b&quot;,&quot;122a0bbb951e4ca598fdc9be599e678b&quot;,&quot;7cdea81d4b7645ca9519c67c6e844036&quot;,&quot;b0ea4dc36bd1479d99026516aa1dc80c&quot;,&quot;f67361c705c744a19cb6e5e350691d26&quot;,&quot;6cd63adacc8b46e9ad3e06b9f6b20c90&quot;,&quot;3d405f0e3f304b2287e4672f270f8122&quot;,&quot;66f26512636f4538be566117e4780ff0&quot;,&quot;39d0afe7f2344d9f8ead1e688b9403e4&quot;,&quot;8656880351a546a18932165b8ad08a3a&quot;,&quot;35a2df7989f5489abc745a73272c0145&quot;,&quot;2f845a98923d447ebb50801a5b2a568e&quot;,&quot;6a005d61ab2d43fe8641a7d5f677df43&quot;,&quot;43d70cb202ac4c7f8cc913f3649a5093&quot;,&quot;c284fb8dd4b24c74b9fff7901edfe84e&quot;]}}" data-outputid="caf32fed-4de9-47c4-ad94-2685a73f1e53">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(compute_review_length)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b2078fe3572c46d786beb6f5b2320455","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f67361c705c744a19cb6e5e350691d26","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-51" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="4007e8c1-20be-4b22-e91c-48d05099a39f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>{'patient_id': 92703,
 'drugName': 'Lybrel',
 'condition': 'birth control',
 'review': '"I used to take another oral contraceptive, which had 21 pill cycle, and was very happy- very light periods, max 5 days, no other side effects. But it contained hormone gestodene, which is not available in US, so I switched to Lybrel, because the ingredients are similar. When my other pills ended, I started Lybrel immediately, on my first day of period, as the instructions said. And the period lasted for two weeks. When taking the second pack- same two weeks. And now, with third pack things got even worse- my third period lasted for two weeks and now it&amp;#039;s the end of the third week- I still have daily brown discharge.\r\nThe positive side is that I didn&amp;#039;t have any other side effects. The idea of being period free was so tempting... Alas."',
 'rating': 5.0,
 'date': 'December 14, 2009',
 'usefulCount': 17,
 'review_length': 134}</code></pre>
</div>
</div>
<ul>
<li>As expected, we can see a review_length column has been added to our training set. We can sort this new column with Dataset.sort() to see what the extreme values look like:</li>
</ul>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="2f5fb303-bee8-493a-c186-e13857902957">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].sort(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review_length'</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>{'patient_id': [111469, 13653, 53602],
 'drugName': ['Ledipasvir / sofosbuvir',
  'Amphetamine / dextroamphetamine',
  'Alesse'],
 'condition': ['hepatitis c', 'adhd', 'birth control'],
 'review': ['"Headache"', '"Great"', '"Awesome"'],
 'rating': [10.0, 10.0, 10.0],
 'date': ['February 3, 2015', 'October 20, 2009', 'November 23, 2015'],
 'usefulCount': [41, 3, 0],
 'review_length': [1, 1, 1]}</code></pre>
</div>
</div>
<ul>
<li>We could delete rows that countains review with less than 30 words, by using the combination of lambda function + <code>.filter()</code>:</li>
</ul>
<div id="cell-55" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;8eab9c1cb8044bda9f2a8502d96ee90e&quot;,&quot;da6fc08094384e019c2e3688d6c4049d&quot;,&quot;e239e784d8af4957ad38d4a170a4fccd&quot;,&quot;f2ea211645484200a6a7ed4a9f1e73d4&quot;,&quot;ae71a6af628b4564bafe46136da3611f&quot;,&quot;840d481e54834ce4b8f9870dfb7194b2&quot;,&quot;de88583621a5455b86825cf5e9cbb724&quot;,&quot;fe73785ad0d441ce8bca2b99a6952b0f&quot;,&quot;010fe39658384f0f98548fa9f4ad3b16&quot;,&quot;fc52011221c9490aa82d5393cf7b39e4&quot;,&quot;47a7cc5b90164485b28f746c602439f5&quot;,&quot;f0e32c8ea2b64418b56da89ea505f094&quot;,&quot;7dc1e53fdf8f47eb9bc363451c0320d2&quot;,&quot;3ca94586e05e488eaa1f0415ce977617&quot;,&quot;a099f1d3f07b496d8921ec863dd65485&quot;,&quot;56f1852924744c24b0d119b911336033&quot;,&quot;850496a08a6f4a47bee8314c334b7adb&quot;,&quot;ecb80b5327d849ccb6319afd59f09886&quot;,&quot;f944f1f780804c34b2b9a545df64a2a4&quot;,&quot;e25676ed0ae2493c9e64baf09c2ae196&quot;,&quot;5197e5a2634d404188c87326a5904334&quot;,&quot;beeefe13a9b3435c9e60dd7492233db0&quot;]}}" data-outputid="ede8bb80-3560-4b0b-e967-e616bb18f952">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review_length'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8eab9c1cb8044bda9f2a8502d96ee90e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f0e32c8ea2b64418b56da89ea505f094","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li>The last problemm we have to deal with is <code>html</code> characters, We can use Python’s html module to unescape these characters, like so:</li>
</ul>
<div id="cell-57" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> html</span></code></pre></div></div>
</div>
<ul>
<li>We’ll use Dataset.map() to unescape all the HTML characters in our corpus:</li>
</ul>
<div id="cell-59" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;c8884dd4f31a49a09ddbae750a63c28b&quot;,&quot;2278d8f30ee24e12b1dc30804abd6870&quot;,&quot;8ca1927fdf144f43a91ed15a00246192&quot;,&quot;d5c7b4591a8f4f93a17082f6714e770c&quot;,&quot;a4f2363665714a5bb26baceaf050517b&quot;,&quot;63da45c2cc544161a46359ee451df0b9&quot;,&quot;5af9d6d4687f4b6a89f3d7e27a99c03b&quot;,&quot;29d696abdc714d6f8111e83d98167432&quot;,&quot;2e82e08f36dc4022a30dd15b27de064f&quot;,&quot;94b6138ecd704d18b230c00824e971cd&quot;,&quot;ca5132fc219e4c8786355abb02ba47a5&quot;,&quot;dcfb816b9d844a5b8355444c44298ecd&quot;,&quot;0ffbbd11a7e243189d47a452a5f17acf&quot;,&quot;d8dd56df16044d8f9c708d85941bcab4&quot;,&quot;88aa4b63dc294e8aa172ba33e71e908b&quot;,&quot;e20c8c1fe12548ab943b2946ed29cdc2&quot;,&quot;e9b17f026c9c4cffb11e7603eb2b40c4&quot;,&quot;c23530936b7b4a6fa8fcfde8171327fa&quot;,&quot;0764566452ce485eacd25e60cc1c34e6&quot;,&quot;64955aec3c3145fb866baa4f3a1c6d2f&quot;,&quot;c1d8d9ce337e43e6b3457119fc67925b&quot;,&quot;3c2c9e96a08b44348071b98611492afd&quot;]}}" data-outputid="a81f824c-17ea-41e3-8565-233da6fe59fa">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>: html.unescape(x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>])})</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c8884dd4f31a49a09ddbae750a63c28b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dcfb816b9d844a5b8355444c44298ecd","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="the-map-methods-superpowers" class="level3">
<h3 class="anchored" data-anchor-id="the-map-methods-superpowers">The map() method’s superpowers:</h3>
<ul>
<li>The last mapping we apply on dataset takes almost <code>40s</code> to execute, this duration can be reduced if we pass an argument to the <code>.map()</code> method: <code>batched=True</code>, this will create batches and lets the code applied in many elements at once, we could also construct the code in list comprehension instead of regular for loop, which also add preformance the operation:</li>
</ul>
<div id="cell-61" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;4a68222379b8436d8d8911593bbc7997&quot;,&quot;d9bbb05d1d104b399e98c99b74a6b9a7&quot;,&quot;cd4307f3b37a4e4a90a4a88e49bf93d4&quot;,&quot;2c14fa893bdd402bb88f80cc2ac8612a&quot;,&quot;965b825af8bb4bdf89a908475b39c071&quot;,&quot;e23fb7a6f5794639af19d8da3b0b08ba&quot;,&quot;2063b2f9bf7c4f85a6b847869d14dffd&quot;,&quot;43db877358e94076b5214bbb23ddd986&quot;,&quot;fa0262b149bd49e99706374b98639458&quot;,&quot;04507f6618564e638db64fdb4537260e&quot;,&quot;8dd26d4296834b32a11fef8c87f61425&quot;,&quot;a6a1fcb4267f49b995eacb04c675e235&quot;,&quot;2dc4dca21ed34c29b3f8137738b0e81c&quot;,&quot;82db304f474a4894a0d000a9870e20d4&quot;,&quot;00968d58e414499eb6502558744ca449&quot;,&quot;223052d90b28493babadcebdea2f376e&quot;,&quot;64300166ad2f4048a8e4c2545ce5215b&quot;,&quot;40dfd31d8df5418691b429d880e5cb35&quot;,&quot;d4469f4a4b2b4e47badabead2a26d24c&quot;,&quot;0619b8f742854e21840990c46868ee7d&quot;,&quot;81abf3e69b97418fa30a9e6a15f477de&quot;,&quot;bfcc4c8d26b343e683e3b6854e952e6a&quot;]}}" data-outputid="3aff5cdb-692b-497e-c811-8657a5c832b3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">new_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>: [html.unescape(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>]]}, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4a68222379b8436d8d8911593bbc7997","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a6a1fcb4267f49b995eacb04c675e235","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li><p>This time our <code>map()</code> function execute in <code>1s</code>, 40x time faster!</p></li>
<li><p>Using <code>.map()</code> with batched set to true is very powerful tool that will help us later with <code>tokenizer()</code></p></li>
<li><p>Now lets tokenize our dataset since we are done EDA part:</p></li>
</ul>
<div id="cell-64" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:145,&quot;referenced_widgets&quot;:[&quot;ae784e9f53a645d89f5bef2fdd5cf4b4&quot;,&quot;fd7f4824c3254813afe21b0ca2fa5c15&quot;,&quot;88c164596eed441098016ae6af629d02&quot;,&quot;b97cf108f35342c39a36eb9e1317068b&quot;,&quot;037062c9e54447b9b86606694881cca1&quot;,&quot;d5a05ac8fbc540dd8438bfd338891d35&quot;,&quot;534b3684c4d84a9fbde6047a992c4f03&quot;,&quot;3361d71b990a49868ff9911869eee7ca&quot;,&quot;fed442bef09b455fa4a94442270fa4cd&quot;,&quot;6679769377d44425afa517ede0f3d548&quot;,&quot;7a8451f22d03416db2545ad0e05f20fd&quot;,&quot;fdea4c5aecf841589de33129e138cc43&quot;,&quot;b9917a91d4cf4ffa9ae68a2f4419088c&quot;,&quot;bd4a22c5651d47c9843a805fa6d0ee00&quot;,&quot;2f7a07aea1cf4428ab3e285fba1d7f68&quot;,&quot;7e592652f1824930a37e4eeec53921d0&quot;,&quot;91a98aafa63f4ac6b90799637535b28b&quot;,&quot;1d4429eee1c144e6a5aa63d4f74426c0&quot;,&quot;ecdbcc5eab8d464199b8ed3fffc17a9e&quot;,&quot;d62ff9cee9634d2b9d675026ee0c3be8&quot;,&quot;2035139010074b48bc12f3ccc53da148&quot;,&quot;fc8c209d0c764fcd8b25abd3466d73c7&quot;,&quot;5b5a93115fcc4c4884100ed3cfdbc375&quot;,&quot;078d77fa98124ceba66135ed5541d472&quot;,&quot;051d437f8d0f405f80dc6f25ae45bb80&quot;,&quot;59a953b6fbf44872bba912d9dcaecc98&quot;,&quot;b9857477e81d4fd2b62f4078689b04be&quot;,&quot;a8a3e84034e44e9da40cf67c24169075&quot;,&quot;bdfd3a47fea443e788ae8283b344f5e7&quot;,&quot;1590042d9b1f4f0783ef8737b7986067&quot;,&quot;12cc571e80b841b8a4cf4073dbde4321&quot;,&quot;434df546c89542aa86b1c2d37169ac27&quot;,&quot;2056ad36a2534af48fd8630081a75672&quot;,&quot;f7d1d1df4a09437a8fa733e8c5f3112d&quot;,&quot;07943aabb52b4a9c854a948ece51c38e&quot;,&quot;9bd16d76a24d4f58a4ac0c6709472cfa&quot;,&quot;159ef30204194cd2885e9f1d866701fb&quot;,&quot;830f591da13e440cbf3ee9e67f6e6131&quot;,&quot;48ebf0619ec44730bfcaff703b5f0da1&quot;,&quot;f04a4365b4b447c38bfe42cc2d4f52e1&quot;,&quot;a4ddc2ea53cf4a7b95740826a1bed596&quot;,&quot;f41a754717d04e1381438e7f22c95e13&quot;,&quot;cb7cda4021a64cc8a9232280e1070eff&quot;,&quot;49d9603c371044518a4c25f7fa1138de&quot;]}}" data-outputid="be79062e-42a7-4d06-b3c6-dc5fd695bb16">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span></span>
<span id="cb44-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl)</span>
<span id="cb44-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tokenizer_function(example):</span>
<span id="cb44-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tokenizer(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>], truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ae784e9f53a645d89f5bef2fdd5cf4b4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fdea4c5aecf841589de33129e138cc43","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5b5a93115fcc4c4884100ed3cfdbc375","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f7d1d1df4a09437a8fa733e8c5f3112d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-65" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;1b0ec9bfea7945698e8dcb8aa84baa25&quot;,&quot;c865ecfedded448e95b158975327aff6&quot;,&quot;fc2bdd8b19e642448fb1d9036774c548&quot;,&quot;07448e73de4347158c70bfa32161895f&quot;,&quot;0e528a2c54c34c0b8e935e022c4fff17&quot;,&quot;2ce41edd76874bdf9bd3d92f00cedd26&quot;,&quot;0aff75a020d6432cbee22be88c438870&quot;,&quot;85c9c06e4eb246a8afe06f021b09903e&quot;,&quot;4b5b61f69f6c4694b0f496b1b85e8304&quot;,&quot;a039b23bf75d44079ff5e832b006c043&quot;,&quot;bdf57260c68145819a89aa85a15927da&quot;,&quot;fd2b5f4b7db54cf3a553f83489415f0f&quot;,&quot;d99d62a38ca04eb29ff88dd9b822c7dd&quot;,&quot;84e0ff703ab1439599ad59d67497bcd6&quot;,&quot;4ce94108b4af47328d91ea668f5bdc48&quot;,&quot;1f520e04c85c44018a5b3660a9bb7366&quot;,&quot;a541e90b10964053ac419dc9f7c3bf2f&quot;,&quot;0b01629e272441f0b612901080b258b7&quot;,&quot;d005f23948f14f1e8a4026ae1f6aa896&quot;,&quot;4b3d602645b348b896f67f37cdae7273&quot;,&quot;023093be041f4d3999a5f3bbc5a3c5e0&quot;,&quot;6582a8de4a944fe998c871f695d5cc14&quot;]}}" data-outputid="0a7ae41b-df1b-4425-e6f8-9dc09ca69c0b">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">tokenized_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tokenizer_function, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1b0ec9bfea7945698e8dcb8aa84baa25","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fd2b5f4b7db54cf3a553f83489415f0f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li><p>All of this functionality condensed into a single method is already pretty amazing, but there’s more! With Dataset.map() and batched=True you can change the number of elements in your dataset. This is super useful in many situations where you want to create several training features from one example, and we will need to do this as part of the preprocessing for several of the NLP tasks we’ll undertake in Chapter 7.</p></li>
<li><p>In machine learning, an example is usually defined as the set of features that we feed to the model. In some contexts, these features will be the set of columns in a Dataset, but in others (like here and for question answering), multiple features can be extracted from a single example and belong to a single column.</p></li>
<li><p>Let’s have a look at how it works! Here we will tokenize our examples and truncate them to a maximum length of 128, but we will ask the tokenizer to return all the chunks of the texts instead of just the first one. This can be done with return_overflowing_tokens=True:</p></li>
</ul>
<div id="cell-69" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tokenize_split(example):</span>
<span id="cb46-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tokenizer(</span>
<span id="cb46-3">      example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'review'</span>],</span>
<span id="cb46-4">      truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb46-5">      max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,</span>
<span id="cb46-6">      return_overflowing_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb46-7">  )</span></code></pre></div></div>
</div>
<ul>
<li>Let’s test this before we pass it to the map() function:</li>
</ul>
<div id="cell-71" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a999f89e-8f4a-41b3-8684-1df9bda2a740">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenize_split(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb47-2">[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inp) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> inp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> res[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>[128, 45]</code></pre>
</div>
</div>
<ul>
<li>So, our first example in the training set became two features because it was tokenized to more than the maximum number of tokens we specified: the first one of length 128 and the second one of length 45. Now let’s do this for all elements of the dataset!</li>
</ul>
<div id="cell-73" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:232,&quot;referenced_widgets&quot;:[&quot;6a7342307efd43e6a23f48e092f03694&quot;,&quot;a3755a8220f740df808da8ea12a7e45e&quot;,&quot;21b505fa9a6849b8815de8e4d8ef2a9e&quot;,&quot;5015584141f04721af1178015531a702&quot;,&quot;e7a0096b038044f38713103aae2779c6&quot;,&quot;88bc7ce3f60f464697c3da662e47e3db&quot;,&quot;9c854ace437246a9824a63182cf5c384&quot;,&quot;1a4b1b5c46fc428b86b881ad36ac54e0&quot;,&quot;cec3ffd7789c4c7c9e35290a5099a718&quot;,&quot;e232c2d95e514fb6b408045f1417505b&quot;,&quot;291dfd282da6491699a9c9696d95245c&quot;]}}" data-outputid="f5dd5c78-f9ab-460f-f051-489e479d09b6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">tokenized_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tokenize_split, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6a7342307efd43e6a23f48e092f03694","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">ArrowInvalid</span>                              Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-47-4c142a3791ef&gt;</span> in <span class="ansi-cyan-fg">&lt;cell line: 1&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>tokenized_ds <span class="ansi-blue-fg">=</span> dataset<span class="ansi-blue-fg">.</span>map<span class="ansi-blue-fg">(</span>tokenize_split<span class="ansi-blue-fg">,</span> batched<span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/dataset_dict.py</span> in <span class="ansi-cyan-fg">map</span><span class="ansi-blue-fg">(self, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, load_from_cache_file, cache_file_names, writer_batch_size, features, disable_nullable, fn_kwargs, num_proc, desc)</span>
<span class="ansi-green-fg ansi-bold">    866</span>             cache_file_names <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">{</span>k<span class="ansi-blue-fg">:</span> <span class="ansi-green-fg">None</span> <span class="ansi-green-fg">for</span> k <span class="ansi-green-fg">in</span> self<span class="ansi-blue-fg">}</span>
<span class="ansi-green-fg ansi-bold">    867</span>         return DatasetDict(
<span class="ansi-green-fg">--&gt; 868</span><span class="ansi-red-fg">             {
</span><span class="ansi-green-fg ansi-bold">    869</span>                 k: dataset.map(
<span class="ansi-green-fg ansi-bold">    870</span>                     function<span class="ansi-blue-fg">=</span>function<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/dataset_dict.py</span> in <span class="ansi-cyan-fg">&lt;dictcomp&gt;</span><span class="ansi-blue-fg">(.0)</span>
<span class="ansi-green-fg ansi-bold">    867</span>         return DatasetDict(
<span class="ansi-green-fg ansi-bold">    868</span>             {
<span class="ansi-green-fg">--&gt; 869</span><span class="ansi-red-fg">                 k: dataset.map(
</span><span class="ansi-green-fg ansi-bold">    870</span>                     function<span class="ansi-blue-fg">=</span>function<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">    871</span>                     with_indices<span class="ansi-blue-fg">=</span>with_indices<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">    591</span>             self<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">"Dataset"</span> <span class="ansi-blue-fg">=</span> kwargs<span class="ansi-blue-fg">.</span>pop<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"self"</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    592</span>         <span class="ansi-red-fg"># apply actual function</span>
<span class="ansi-green-fg">--&gt; 593</span><span class="ansi-red-fg">         </span>out<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">"DatasetDict"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> func<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    594</span>         datasets<span class="ansi-blue-fg">:</span> List<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">.</span>values<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> isinstance<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">,</span> dict<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">else</span> <span class="ansi-blue-fg">[</span>out<span class="ansi-blue-fg">]</span>
<span class="ansi-green-fg ansi-bold">    595</span>         <span class="ansi-green-fg">for</span> dataset <span class="ansi-green-fg">in</span> datasets<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">wrapper</span><span class="ansi-blue-fg">(*args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">    556</span>         }
<span class="ansi-green-fg ansi-bold">    557</span>         <span class="ansi-red-fg"># apply actual function</span>
<span class="ansi-green-fg">--&gt; 558</span><span class="ansi-red-fg">         </span>out<span class="ansi-blue-fg">:</span> Union<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">"DatasetDict"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> func<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    559</span>         datasets<span class="ansi-blue-fg">:</span> List<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">"Dataset"</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">.</span>values<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> isinstance<span class="ansi-blue-fg">(</span>out<span class="ansi-blue-fg">,</span> dict<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">else</span> <span class="ansi-blue-fg">[</span>out<span class="ansi-blue-fg">]</span>
<span class="ansi-green-fg ansi-bold">    560</span>         <span class="ansi-red-fg"># re-apply format to the output</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">map</span><span class="ansi-blue-fg">(self, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, load_from_cache_file, cache_file_name, writer_batch_size, features, disable_nullable, fn_kwargs, num_proc, suffix_template, new_fingerprint, desc)</span>
<span class="ansi-green-fg ansi-bold">   3103</span>                     desc<span class="ansi-blue-fg">=</span>desc <span class="ansi-green-fg">or</span> <span class="ansi-blue-fg">"Map"</span><span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">   3104</span>                 ) as pbar:
<span class="ansi-green-fg">-&gt; 3105</span><span class="ansi-red-fg">                     </span><span class="ansi-green-fg">for</span> rank<span class="ansi-blue-fg">,</span> done<span class="ansi-blue-fg">,</span> content <span class="ansi-green-fg">in</span> Dataset<span class="ansi-blue-fg">.</span>_map_single<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">**</span>dataset_kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3106</span>                         <span class="ansi-green-fg">if</span> done<span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3107</span>                             shards_done <span class="ansi-blue-fg">+=</span> <span class="ansi-cyan-fg">1</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_dataset.py</span> in <span class="ansi-cyan-fg">_map_single</span><span class="ansi-blue-fg">(shard, function, with_indices, with_rank, input_columns, batched, batch_size, drop_last_batch, remove_columns, keep_in_memory, cache_file_name, writer_batch_size, features, disable_nullable, fn_kwargs, new_fingerprint, rank, offset)</span>
<span class="ansi-green-fg ansi-bold">   3499</span>                                 writer<span class="ansi-blue-fg">.</span>write_table<span class="ansi-blue-fg">(</span>pa<span class="ansi-blue-fg">.</span>Table<span class="ansi-blue-fg">.</span>from_pandas<span class="ansi-blue-fg">(</span>batch<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   3500</span>                             <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 3501</span><span class="ansi-red-fg">                                 </span>writer<span class="ansi-blue-fg">.</span>write_batch<span class="ansi-blue-fg">(</span>batch<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   3502</span>                         num_examples_progress_update <span class="ansi-blue-fg">+=</span> num_examples_in_batch
<span class="ansi-green-fg ansi-bold">   3503</span>                         <span class="ansi-green-fg">if</span> time<span class="ansi-blue-fg">.</span>time<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">&gt;</span> _time <span class="ansi-blue-fg">+</span> config<span class="ansi-blue-fg">.</span>PBAR_REFRESH_TIME_INTERVAL<span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/datasets/arrow_writer.py</span> in <span class="ansi-cyan-fg">write_batch</span><span class="ansi-blue-fg">(self, batch_examples, writer_batch_size)</span>
<span class="ansi-green-fg ansi-bold">    567</span>                 inferred_features<span class="ansi-blue-fg">[</span>col<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> typed_sequence<span class="ansi-blue-fg">.</span>get_inferred_type<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    568</span>         schema <span class="ansi-blue-fg">=</span> inferred_features<span class="ansi-blue-fg">.</span>arrow_schema <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>pa_writer <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span> <span class="ansi-green-fg">else</span> self<span class="ansi-blue-fg">.</span>schema
<span class="ansi-green-fg">--&gt; 569</span><span class="ansi-red-fg">         </span>pa_table <span class="ansi-blue-fg">=</span> pa<span class="ansi-blue-fg">.</span>Table<span class="ansi-blue-fg">.</span>from_arrays<span class="ansi-blue-fg">(</span>arrays<span class="ansi-blue-fg">,</span> schema<span class="ansi-blue-fg">=</span>schema<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    570</span>         self<span class="ansi-blue-fg">.</span>write_table<span class="ansi-blue-fg">(</span>pa_table<span class="ansi-blue-fg">,</span> writer_batch_size<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    571</span> 

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/pyarrow/table.pxi</span> in <span class="ansi-cyan-fg">pyarrow.lib.Table.from_arrays</span><span class="ansi-blue-fg">()</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/pyarrow/table.pxi</span> in <span class="ansi-cyan-fg">pyarrow.lib.Table.validate</span><span class="ansi-blue-fg">()</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/pyarrow/error.pxi</span> in <span class="ansi-cyan-fg">pyarrow.lib.check_status</span><span class="ansi-blue-fg">()</span>

<span class="ansi-red-fg">ArrowInvalid</span>: Column 8 named input_ids expected length 1000 but got length 1447</pre>
</div>
</div>
</div>
<ul>
<li>Looking at the error message will give us a clue: there is a mismatch in the lengths of one of the columns, one being of length 1,463 and the other of length 1,000. here those 1,000 examples gave 1,463 new features, resulting in a shape error.</li>
<li>The problem is that we’re trying to mix two different datasets of different sizes: the drug_dataset columns will have a certain number of examples (the 1,000 in our error), but the tokenized_dataset we are building will have more (the 1,463 in the error message; it is more than 1,000 because we are tokenizing long reviews into more than one example by using return_overflowing_tokens=True). That doesn’t work for a Dataset, so we need to either remove the columns from the old dataset or make them the same size as they are in the new dataset. We can do the former with the remove_columns argument:</li>
</ul>
<div id="cell-75" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:81,&quot;referenced_widgets&quot;:[&quot;37991ca076564c268f72becdd2c2bba2&quot;,&quot;d9abe7afaafc441eba30bf5ed542c072&quot;,&quot;6e8f42d769de4e89b0972e2ddc6b174d&quot;,&quot;ac3d6fa9920944d8ae54e15c2c19ac4c&quot;,&quot;696e5c3b32dc4c41a6caf377e6940716&quot;,&quot;204e0d6bc35f4250a33334fcba22a458&quot;,&quot;4d11334bac4640da95c5a4f1caaab5a3&quot;,&quot;afb4cb6ea8a144a6a3139bb596d22e47&quot;,&quot;383ec8248d64465a8d4550054416cd9b&quot;,&quot;85b86e78db554c2b9669ec0ff8305d61&quot;,&quot;a516a0b86ed043af9792fe2f0b6045e8&quot;,&quot;2152fb7c58154c3394e8f25201c53dfc&quot;,&quot;e7f9cb1952764e1492ab9a99ae641214&quot;,&quot;7e9d53c5eca84ea3bf79f2445d5e5592&quot;,&quot;786b016758a24ad79424c3ee0831c340&quot;,&quot;d5cf970baf88496d96e4521ea9bc471d&quot;,&quot;853af04df9c449fe9a8ae22d6dafeef6&quot;,&quot;9ef7a9ef16b2429bb5fd71ca9b315c47&quot;,&quot;e3c5d58e8ea74d15bd0dbf01c7dbf4a3&quot;,&quot;823060b2dc6f46418793f6c8c9b33271&quot;,&quot;6c3c0ee6da334c0bac3d4b47e7e26d68&quot;,&quot;7111a1e9413347b9a6ee55739f9733a4&quot;]}}" data-outputid="d2c45dbf-8298-4335-c12b-6204b11e2e74">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">tokenized_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tokenize_split, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, remove_columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].column_names)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"37991ca076564c268f72becdd2c2bba2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2152fb7c58154c3394e8f25201c53dfc","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-76" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="eb21c298-694a-49d4-a5c6-e7e6110f344f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tokenized_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>])</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>204198</code></pre>
</div>
</div>
<div id="cell-77" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a953c111-db36-4f4d-fd51-e904696a48d3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>])</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>138514</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Hugging Face</category>
  <category>Pytorch</category>
  <category>Deep Learning</category>
  <category>NLP</category>
  <category>LLM</category>
  <category>HuggingFaceHub</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_5/Hugging_Face_Cource_Ch5.html</guid>
  <pubDate>Mon, 26 Feb 2024 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_5/nlp-course.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Hugging Face Course Notes: Chapter4</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_4/Hugging_Face_course_Notes_Chapter4.html</link>
  <description><![CDATA[ 





<section id="the-hugging-face-hub" class="level1">
<h1>The Hugging Face Hub:</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction:</h2>
<ul>
<li>The <a href="https://huggingface.co/">hugging Face Hub</a> is the place where every Model, Dataset is deployed and stored.</li>
<li>In this chapter we will focus on how to:
<ul>
<li>Use a fine-tuned model from the Hub</li>
<li>Share and deploy a our model to the Hub</li>
<li>Build a model card</li>
</ul></li>
<li>At its core a shared model is just a Git reposetory, which means that it can be cloned and used by others.</li>
<li>When a new model is shared to the community a hosted inference API is deployed automatically, so anyone can test that model directly or build on top of it.</li>
</ul>
</section>
<section id="using-pretrained-models" class="level2">
<h2 class="anchored" data-anchor-id="using-pretrained-models">Using pretrained models</h2>
<ul>
<li>As we saw in previous chapters, using finetuned models from the Hub on our tasks is easy and can be achieved with few lines of code</li>
</ul>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:492,&quot;referenced_widgets&quot;:[&quot;a11fae95cdc14e019b0ace4eecde1361&quot;,&quot;13ebbc1ecf014e79914346ff5a04b688&quot;,&quot;db9eb07253f14f72ad23ff4ad8711e65&quot;,&quot;d837b1afb8414e0aaf7c8028038d251e&quot;,&quot;14f5211081884f059355960bcdb1bf8f&quot;,&quot;cf94c51628c44b979afa6f8017c03845&quot;,&quot;1222570104594ef8ac77f41a9a499e4d&quot;,&quot;5d6b67f2ab0744c89446b462c31cbdb8&quot;,&quot;d63d9d2f662549eaaa10d3e51df511ca&quot;,&quot;a635edc1671c4e98b8c087bcb13beca3&quot;,&quot;2a74a9d6a1eb49afae312c262fadcb23&quot;,&quot;6d089d4f3b1246c0867439b39ee77b84&quot;,&quot;0332b3c40e2a4529a046a95e6f0638be&quot;,&quot;9eb2bd9f1bc0448fb83123f643252f73&quot;,&quot;5b7a6d74bafe4270b51b6e8e38b1f59e&quot;,&quot;7c55d2fe75f14afe94f639dbf805f6dc&quot;,&quot;648394b83ac0401892c47abdcf19a08c&quot;,&quot;a95c54f2101b4ecd843a3e7258aff211&quot;,&quot;034ab57ff4bd4035b018241569516bbe&quot;,&quot;0f1986d5d4bb4fb2b2ea1e8afdbf43b8&quot;,&quot;ba233800ee3c4bb9862b1835bd50eb88&quot;,&quot;aacdd92d576e4516b6d93df46f6bbfe5&quot;,&quot;6bb130d7ac1b498b9c15dd7d05e3e18d&quot;,&quot;673252b26c6143a181a34a2fb9e7b086&quot;,&quot;833730f8b60e408d8279760e51bc4090&quot;,&quot;762910d1ad9d43c4853f0428baea70f5&quot;,&quot;83f666171c1b4217938307388328779e&quot;,&quot;0f843fc701df46dfa30c8f3338c49655&quot;,&quot;977e9d8a99a040e2938e3e834e97374b&quot;,&quot;aa691e40b78e4ab3abef0011b781760d&quot;,&quot;a9c4c1a2fd9947468df6ac785baa020c&quot;,&quot;980823eeda514249a1f41c4c976dc6aa&quot;,&quot;3559ac832ded495b9db1c20139c658cb&quot;,&quot;7d106964229d454d84a366884457c9fa&quot;,&quot;2b2f4641c9da418082c7228e141bd342&quot;,&quot;68494fb05df64702ac6af8163564028a&quot;,&quot;2a43cd59553f42738142fc8aeb50ff56&quot;,&quot;14a2a11b0f934d5e81be243cdaa56b6d&quot;,&quot;87bbe83ba0c94686a9cc209cee337697&quot;,&quot;7d0b3bf58fc04baebe90183cef1e88ad&quot;,&quot;8d47b0c89c57425080e894fd0c75540d&quot;,&quot;78caada99a8b4a249c107b1e2c0d5014&quot;,&quot;28a9caeca7a3410290fd47beaa7972ff&quot;,&quot;9f131407429a4581b82b9a100da804f8&quot;,&quot;1fe7fac34e0e491c972489394185bbf6&quot;,&quot;56f017d8b0994729b9dffab97b4f3d94&quot;,&quot;11a872e193ec4c71ad64874689e0d0dd&quot;,&quot;032a551fc36a495997661a204ff51f19&quot;,&quot;c703438cf3ef4dcc8ba87296efef5b41&quot;,&quot;fdc0103b449b45369fcdcf6949a65b5b&quot;,&quot;e1d385bb198344919f26156c77b47292&quot;,&quot;992a9a252b4f486f86840a286352a533&quot;,&quot;1b5adc9cdb664c41babde12c80754095&quot;,&quot;b75c7b9280de4d91882491f8a5f081b9&quot;,&quot;5911c4cde57b4cfdbc43c22c76da28cf&quot;]}}" data-outputid="30171a13-efee-4d5a-bc85-f2e4b734358a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb1-2">unmasker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fill-mask"</span>, model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camembert-base'</span>)</span>
<span id="cb1-3">unmasker(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This course will teach you all about &lt;mask&gt; models."</span>, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a11fae95cdc14e019b0ace4eecde1361","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6d089d4f3b1246c0867439b39ee77b84","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at camembert-base were not used when initializing CamembertForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing CamembertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CamembertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6bb130d7ac1b498b9c15dd7d05e3e18d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7d106964229d454d84a366884457c9fa","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1fe7fac34e0e491c972489394185bbf6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>[{'score': 0.1466376781463623,
  'token': 808,
  'token_str': 'the',
  'sequence': 'This course will teach you all about the models.'},
 {'score': 0.06081351637840271,
  'token': 9098,
  'token_str': 'this',
  'sequence': 'This course will teach you all about this models.'}]</code></pre>
</div>
</div>
<ul>
<li>Of course we need to pick a checkpoint that suitable for our task, otherwise we will get results that don’t male sense at all.
<ul>
<li>in this case we pick <code>camembert-base</code> which is a good checkpoint for filling mask tasks.</li>
</ul></li>
<li>We could also insentiate the checkpoint from the model calss directly:</li>
</ul>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="af171a8b-7e74-4bf7-ad25-8aed9cccf1a9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CamembertTokenizer, CamembertForMaskedLM</span>
<span id="cb5-2">ckpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'camembert-base'</span></span>
<span id="cb5-3">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CamembertTokenizer.from_pretrained(ckpt)</span>
<span id="cb5-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CamembertForMaskedLM.from_pretrained(ckpt)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
Some weights of the model checkpoint at camembert-base were not used when initializing CamembertForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing CamembertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CamembertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
</div>
<ul>
<li>However its recommended to use the <code>auto</code> class to handel the insentitating of model and tokenizers:</li>
</ul>
<div id="cell-7" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="c9512975-e03f-4a93-cf5c-60d76c7ae537">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForMaskedLM</span>
<span id="cb7-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(ckpt)</span>
<span id="cb7-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForMaskedLM.from_pretrained(ckpt)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at camembert-base were not used when initializing CamembertForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing CamembertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CamembertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
</div>
<ul>
<li>What’s important is to inderstand how that specific model is trained, which dataset is used, and what’s its limitations and biases.
<ul>
<li>all of this informastions should be mentioned in the model card (which we will build later)</li>
</ul></li>
</ul>
</section>
<section id="sharing-a-pretrained-model" class="level2">
<h2 class="anchored" data-anchor-id="sharing-a-pretrained-model">Sharing a pretrained model:</h2>
<ul>
<li><p>In general there’s 3 ways to create a new model reposetories:</p>
<ul>
<li>Using the push_to_hub API</li>
<li>Using the huggingface_hub Python library</li>
<li>Using the web interface</li>
</ul></li>
<li><p>One the repo is created, we can add and edit files just like any other repo on github</p></li>
</ul>
<section id="using-the-push_to_hub-api" class="level3">
<h3 class="anchored" data-anchor-id="using-the-push_to_hub-api">Using the push_to_hub API:</h3>
<ul>
<li>The simplest way to create a model repo is to use <code>push_to_hub</code> API.
<ul>
<li>but first we need to get our credentials in order to use the API:</li>
</ul></li>
</ul>
<div id="cell-11" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:160,&quot;referenced_widgets&quot;:[&quot;a4228b88aecd42a5b654bc375e1b18e2&quot;,&quot;d15061c249394b259559140fbd3bf467&quot;,&quot;f0231b431dcb4f0880a937d92e5fe94d&quot;,&quot;eda1b00a3c894cbe8a7d872c53843729&quot;,&quot;f1298be8e23b40639291de149786ad59&quot;,&quot;e2a80dc577c045f9a6d750e2f40d0907&quot;,&quot;1f0bfb3b55884ff5b2c26208d11f1f9e&quot;,&quot;86a99479c10544efaddc508a455b1565&quot;,&quot;839e534c7b864718af714bcaee0337d0&quot;,&quot;0d348bf316d74f6992af23a5ff2eabf9&quot;,&quot;10f5406d50304be4a2242e3166a31dc8&quot;,&quot;0b868d499a26407ca40a8646c0f78a9c&quot;,&quot;735e79d3c9fc4b1f82c27cee0fbf9b37&quot;,&quot;1f6aca79071c4047b826952aeca5aaa2&quot;,&quot;c13942dfdbd24dc496125a5fd4dfed7b&quot;,&quot;7eab5928d1364d8cb10c2b85bbf21acd&quot;,&quot;912f268ddab7427ea85110ef2fcd13c1&quot;,&quot;450d72b29347417c9b469cd273ba2ceb&quot;,&quot;f21beaec85f143f7aebc933c02e7e998&quot;,&quot;dfdc921453b94b9dad50075fad624372&quot;,&quot;323e60057f154beab35412f46c9471df&quot;,&quot;859d6aa16f524f24bd33f3036f28e36d&quot;,&quot;89415a3cb2634a17915e87523eb8d55c&quot;,&quot;5baea2d87f814aebaf4169c8380171c2&quot;,&quot;1f8afd8101ec49fa881bf1c488a70848&quot;,&quot;a18c2f2669f74e5687e51b84ade83801&quot;,&quot;2a2c4fde56594a0db8b949445cc49afa&quot;,&quot;e696b57043244e179d31230147008eab&quot;,&quot;18c1c4c31a81409fb2b1762fe4a37b25&quot;,&quot;a436e5c202ce4e42a19824a7e60e5b34&quot;,&quot;b7b227d67e224eee821e7d3b6761d134&quot;,&quot;3638c8602eef457e8f1e81b947266e3b&quot;]}}" data-outputid="d57feeb9-cf79-440e-a800-2f1b88ba1e29">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> notebook_login</span>
<span id="cb9-2">notebook_login()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a4228b88aecd42a5b654bc375e1b18e2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li>We used earlier the <code>TrainingArguments</code> class to pass hyper-parameters during the building of the training loop, the easiest way to push a model is by setting <code>push_to_hub= True</code> as an arguments:</li>
</ul>
<div id="cell-13" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Trainer, TrainingArguments</span>
<span id="cb10-2">training_arguments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test-train-0'</span>, save_strategy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>, push_to_hub<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
</div>
<ul>
<li>Once the model is trained and the <code>trainer.train()</code> is called, the api will upload the model to the hub and save it in a repo with the name we pick <code>test-train-0</code>, but we can chose another name by passing <code>hub_model_id="my_model_name"</code></li>
<li>Once the training is complete we should do the final <code>trainer_push_to_hub()</code> to upload the last version of the model. This will also generate the model card, which contains all the metadata, hyperparameters and evaluation results.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_4/model_card.png" class="img-fluid figure-img"></p>
<figcaption>model card <em>From Hugging Face</em></figcaption>
</figure>
</div>
<ul>
<li>The <code>push_to_hub()</code> method can be applied on model, tokenizer, configs. It take care of both: creating the repo and pushing the model and tokenizer directly to that repository.</li>
<li>Now let’s see exactly how this work:</li>
</ul>
<div id="cell-17" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:249,&quot;referenced_widgets&quot;:[&quot;4960a2e4940d4deda552069230d813a5&quot;,&quot;21f02b0610e54f6987af2bb9dc618837&quot;,&quot;a4deac63ebbb481bb089752c7d6ffe1a&quot;,&quot;f2ce3b70ee404d209e24ce45e3e5c1a1&quot;,&quot;eba6bd43a6824ef6965c96e15364b153&quot;,&quot;1edc1b4f76cf47bca683354a7891f242&quot;,&quot;27293e1d65234538a9b40ff2427f0b6b&quot;,&quot;6e9f2f1082a74046b31e53a7c69a2015&quot;,&quot;81ff1deaca2f4aafac30c9c8c9fff92d&quot;,&quot;8eb402524cd94f8896efc81acc426c76&quot;,&quot;3c6524f527bf445095c60dc4de8892ca&quot;,&quot;43b8d3ebe27e4bb98d5d82b038387c75&quot;,&quot;abd1c9f9544f4223b42042f1d66e93e7&quot;,&quot;4edd55bdd49240f8ac0bc4e5a6e452eb&quot;,&quot;7b17bf00fb6d47fe916cbc24eb555118&quot;,&quot;df08f44dc9e8468cb5c4214507c2d5be&quot;,&quot;b7a738c26ab64088abbe6c3709b80364&quot;,&quot;948160e279eb4f43ac97727e309a9566&quot;,&quot;1026d0a8eda649d997301f2e62a85589&quot;,&quot;33a0b64061b447679ed42b99e87880e7&quot;,&quot;987ec542714e49e58f31df90898395b2&quot;,&quot;9d4f6ef0e1324b0689f9db5bec7be28e&quot;,&quot;554ffae7f5c4452dab0f9826ff3437a3&quot;,&quot;9e94350899e94ab3a228df9c111de57e&quot;,&quot;b4e3a50e355947bcaa4713a78fda00a1&quot;,&quot;5ec34aebdde9498ab4e2b6abd3420b2a&quot;,&quot;34d6e0a1168c41109cbb6bd0d6a04835&quot;,&quot;3372971cc0bd41e7bbe14d92fe5689a1&quot;,&quot;19b3af51ec274f2483da1e20cf99f635&quot;,&quot;6007f6e5fca5449fba2859a3be01b879&quot;,&quot;475c20f1c6934569883112e97c73afdb&quot;,&quot;c43972d3d5294162b340d537b2581f9e&quot;,&quot;68f973e2dddd4af89719b79913ce324a&quot;,&quot;e961930e2442481592c714ff87a4cc4b&quot;,&quot;21cb4842583b4e33871b94543c686a22&quot;,&quot;8e214f156b8f45a2ab9f0b313612c0dd&quot;,&quot;386bdb22d0144849b3b3491d0b1c81b9&quot;,&quot;675401acc2a84f828ba7947c735345a1&quot;,&quot;ad5828066cf74244b980c2ce8d8fb975&quot;,&quot;ee807c79547445a9801b36d7986cae5b&quot;,&quot;02fb768b6504482ca58e1b98bc5dbcb3&quot;,&quot;33413b1fa3214aeeacaa9fb10e4e7b4b&quot;,&quot;aff894692ee6475c84e0afb241a1dfa5&quot;,&quot;1642cf55e10a4d60babef5d82aa64620&quot;,&quot;a3cb8a4d44434c10ab048e758269c8e2&quot;,&quot;57b319417c6f4a4aa3c57e54a11d38ab&quot;,&quot;2f1086764c6741768530cfc7874e820e&quot;,&quot;03b7f1975d994a77b1e6cbab3a68597b&quot;,&quot;89b10dda779f482dabedbbff4d542032&quot;,&quot;e238e82e94694fb3bed8c7706312a465&quot;,&quot;b8e9378548a447b4806baeb2e55b8053&quot;,&quot;f6ce17442e0b4cf0a0764a6c7cd1f472&quot;,&quot;1a76c078024847aa802e832eb78fdd0c&quot;,&quot;9e536ac9022d40c2991b72843896cfec&quot;,&quot;997314d1c73f4a8e8743cde2e13ced3e&quot;]}}" data-outputid="53e87a1b-d9f3-4a7c-bf24-9a9975f79f53">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForMaskedLM</span>
<span id="cb11-2">ckpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span></span>
<span id="cb11-3">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(ckpt)</span>
<span id="cb11-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForMaskedLM.from_pretrained(ckpt)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4960a2e4940d4deda552069230d813a5","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"43b8d3ebe27e4bb98d5d82b038387c75","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"554ffae7f5c4452dab0f9826ff3437a3","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e961930e2442481592c714ff87a4cc4b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a3cb8a4d44434c10ab048e758269c8e2","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['bert.pooler.dense.bias', 'bert.pooler.dense.weight', 'cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
</div>
<ul>
<li>Now we can take these model and build whatever we want with them, modify, add..and when we are satisfied with the results we can use <code>push_to_hup()</code> method:</li>
</ul>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:118,&quot;referenced_widgets&quot;:[&quot;c6e6e02d3d4946f6a803b58f489b0283&quot;,&quot;beeb49b422ee48f4b1253e516b8b85be&quot;,&quot;9e72e3faac9447f5a42a065c3c89085f&quot;,&quot;88459e0842ef45e0895dbffb91263489&quot;,&quot;ee9de2c8e6ea4c929fdabf364975dbf2&quot;,&quot;0595b965c0bc427485a18844c928d4da&quot;,&quot;9e7ee044e7324d359aaa93b411b862af&quot;,&quot;2ce4d58990064f8788380c38bb9e158f&quot;,&quot;f615c61cf92b4b8985c46ec4d2318193&quot;,&quot;d125614d37434c398016304f5021f7eb&quot;,&quot;ab675939b3084f34aeea7881f5a4d976&quot;]}}" data-outputid="42dd998e-73f3-4c25-8ce3-9202daec459a">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">model.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test-ch4'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c6e6e02d3d4946f6a803b58f489b0283","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>CommitInfo(commit_url='https://huggingface.co/Smail/test-ch4/commit/2f5a775ac7e24540a43374fa820db4e225b195e2', commit_message='Upload BertForMaskedLM', commit_description='', oid='2f5a775ac7e24540a43374fa820db4e225b195e2', pr_url=None, pr_revision=None, pr_num=None)</code></pre>
</div>
</div>
<ul>
<li>This will create a new repo <code>"test-ch4"</code> in our profile and populate it with model files. We can do the same with <code>tokenizer</code></li>
</ul>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:118,&quot;referenced_widgets&quot;:[&quot;0c07033d7b834e478b81d8428017e9ab&quot;,&quot;c4ce0067cd6d4ac0842d01dfe7c6c6e7&quot;,&quot;274e4dbf56e34e21a7794880d97a08ba&quot;,&quot;a75620a2aac947718db66a44ab5d9e10&quot;,&quot;518b85d31b97466c887eccb11189c0cc&quot;,&quot;ae67cfc6b3774ab89cf6adf959a6acd0&quot;,&quot;a6e6c48840a74477b714c40f22380d41&quot;,&quot;7ad1b48d759940da9ab17846046e2b62&quot;,&quot;011776a80ce04936abc4da8fe379f02d&quot;,&quot;6dcbcae39ce94ec18782f7ffd73e6b8b&quot;,&quot;21c58b35a01e4c7fa916cdb869261eff&quot;]}}" data-outputid="083a1163-90b0-4c59-adcb-85fd2051e00c">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">tokenizer.push_to_hub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test-ch4'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0c07033d7b834e478b81d8428017e9ab","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>CommitInfo(commit_url='https://huggingface.co/Smail/test-ch4/commit/e0b505500d75768b52d549adc8f67c3f40b015dd', commit_message='Upload tokenizer', commit_description='', oid='e0b505500d75768b52d549adc8f67c3f40b015dd', pr_url=None, pr_revision=None, pr_num=None)</code></pre>
</div>
</div>
<ul>
<li>we can also add the organization, tokenization key and other arguments that can be specified while pushing the model into the hub through API</li>
</ul>
</section>
<section id="using-the-huggingface_hub-python-library" class="level3">
<h3 class="anchored" data-anchor-id="using-the-huggingface_hub-python-library">Using the huggingface_hub Python library</h3>
<ul>
<li>We can also use the Huggingface_hub library that offer more tools that are simple and very effective to achieve various tasks such as pushing a model, adding files, deleting files, creating repos, editing, managing, getting informations etc.. *Similar to <code>push_to_hub()</code> method the package requires a key token to access the hub:</li>
</ul>
<div id="cell-24" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="db8ff6b6-86e8-4bf8-9f09-e07512540faa">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>huggingface<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli login</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|
    _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|
    _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|
    _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|
    _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|

    A token is already saved on your machine. Run `huggingface-cli whoami` to get more information or `huggingface-cli logout` if you want to log out.
    Setting a new token will erase the existing one.
    To login, `huggingface_hub` requires a token generated from https://huggingface.co/settings/tokens .
Token: 
Add token as git credential? (Y/n) n
Token is valid (permission: write).
Your token has been saved to /root/.cache/huggingface/token
Login successful</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a609cd83-4cac-4f84-b912-8c1bdd204c7b">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>huggingface<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cli whoami</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Smail</code></pre>
</div>
</div>
<ul>
<li>The huggingface_hub offers several methods and classes which are useful for our purpose. Firstly, there are a few methods to manage repository creation, deletion, and others:</li>
</ul>
<div id="cell-27" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#User Management</span></span>
<span id="cb21-3">    login,</span>
<span id="cb21-4">    logout,</span>
<span id="cb21-5">    whoami,</span>
<span id="cb21-6"></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Repo creation and management</span></span>
<span id="cb21-8">    create_repo,</span>
<span id="cb21-9">    delete_repo,</span>
<span id="cb21-10">    update_repo_visibility,</span>
<span id="cb21-11"></span>
<span id="cb21-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And some methods to retrieve/change information about the content</span></span>
<span id="cb21-13">    list_models,</span>
<span id="cb21-14">    list_datasets,</span>
<span id="cb21-15">    list_metrics,</span>
<span id="cb21-16">    list_repo_files,</span>
<span id="cb21-17">    upload_file,</span>
<span id="cb21-18">    delete_file,</span>
<span id="cb21-19"></span>
<span id="cb21-20">)</span></code></pre></div></div>
</div>
<ul>
<li>We could for example try to create a repo like this:</li>
</ul>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:52}}" data-outputid="1bb320b4-d071-4608-ad55-0f8348d86dd0">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">create_repo(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dummi_repo'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>RepoUrl('https://huggingface.co/Smail/dummi_repo', endpoint='https://huggingface.co', repo_type='model', repo_id='Smail/dummi_repo')</code></pre>
</div>
</div>
<ul>
<li><p>Other arguments which may be useful are:</p>
<ul>
<li>private, in order to specify if the repository should be visible from others or not.</li>
<li>token, if you would like to override the token stored in your cache by a given token.</li>
<li>repo_type, if you would like to create a dataset or a space instead of a model. Accepted values are “dataset” and “space”.</li>
</ul></li>
</ul>
<p>Once the repository is created, we should add files to it! Jump to the next section to see the three ways this can be handled</p>
</section>
<section id="uploading-files" class="level3">
<h3 class="anchored" data-anchor-id="uploading-files">Uploading Files:</h3>
<ul>
<li><p>The system to manage files on the Hugging Face Hub is based on git for regular files, and git-lfs (which stands for Git Large File Storage) for larger files.</p></li>
<li><p>In general there is 3 ways to upload files to the HUB:</p></li>
</ul>
</section>
<section id="the-upload-file-approach" class="level3">
<h3 class="anchored" data-anchor-id="the-upload-file-approach">The upload file approach</h3>
<ul>
<li>this approach doesn’t require installing <code>git</code> or <code>git-lf</code> on our system, it uses HTTP POST requests to push the files directly to the hub.</li>
<li>It’s limitation is the size of the file shouldn’t be larger than 5 GB.</li>
<li>Since I work in a google colab, I will create a folder and work with it “locally”.</li>
</ul>
<div id="cell-33" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="94cb46dc-ea26-4939-fc28-efc3234443dc">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir my_folder</span>
<span id="cb24-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForMaskedLM, AutoTokenizer</span>
<span id="cb24-3"></span>
<span id="cb24-4">checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"camembert-base"</span></span>
<span id="cb24-5"></span>
<span id="cb24-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForMaskedLM.from_pretrained(checkpoint)</span>
<span id="cb24-7">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(checkpoint)</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do whatever with the model, train it, fine-tune it...</span></span>
<span id="cb24-10"></span>
<span id="cb24-11">model.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/my_folder"</span>)</span>
<span id="cb24-12">tokenizer.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/my_folder"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at camembert-base were not used when initializing CamembertForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing CamembertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CamembertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>('/content/my_folder/tokenizer_config.json',
 '/content/my_folder/special_tokens_map.json',
 '/content/my_folder/sentencepiece.bpe.model',
 '/content/my_folder/added_tokens.json',
 '/content/my_folder/tokenizer.json')</code></pre>
</div>
</div>
<div id="cell-34" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:89}}" data-outputid="c5ab6295-da76-48f6-c542-1cdb60f1d6ab">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> upload_file</span>
<span id="cb27-2">upload_file(</span>
<span id="cb27-3">    path_or_fileobj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/my_folder/config.json"</span>,</span>
<span id="cb27-4">    path_in_repo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"config.json"</span>,</span>
<span id="cb27-5">    repo_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smail/dummi_repo"</span>,</span>
<span id="cb27-6">)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>CommitInfo(commit_url='https://huggingface.co/Smail/dummi_repo/commit/1af5f861f0e0a3398d3856c69ff83bd5f04c372a', commit_message='Upload config.json with huggingface_hub', commit_description='', oid='1af5f861f0e0a3398d3856c69ff83bd5f04c372a', pr_url=None, pr_revision=None, pr_num=None)</code></pre>
</div>
</div>
<ul>
<li>This will upload the <code>config.json</code> file exists in <code>path_to_file</code> to the root of the repo as <code>config.json</code>.</li>
</ul>
</section>
<section id="the-repository-class" class="level3">
<h3 class="anchored" data-anchor-id="the-repository-class">The Repository Class:</h3>
<ul>
<li>The repository class abstract a local repo and handle all the work in a<code>git</code> like manner, it requires having <code>git</code> and <code>git-lf</code> installed in our system.</li>
</ul>
<div id="cell-37" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="4c5f960c-d8fb-45e7-86bc-7ebf7b8ceaeb">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>LFS</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Collecting git-LFS
  Downloading git_lfs-1.6-py2.py3-none-any.whl (5.6 kB)
Installing collected packages: git-LFS
Successfully installed git-LFS-1.6</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fa6beac8-7c39-47dd-af38-3e13ccdf90b4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git lfs install</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Git LFS initialized.</code></pre>
</div>
</div>
<div id="cell-39" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Repository</span>
<span id="cb33-2"></span>
<span id="cb33-3">repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Repository(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content'</span>, clone_from<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smail/dummi_repo'</span>)</span></code></pre></div></div>
</div>
<ul>
<li>This will create a folder in the path we decide and will import all the files in the repo from the hub.</li>
<li>Since we didn’t create any files in that repo when we insantiate it, the only file we have is <code>.gitattributes</code>, from here we could deal with that repo as if it a git repo:</li>
</ul>
<div id="cell-41" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">repo.git_pull()</span>
<span id="cb34-2">repo.git_add()</span>
<span id="cb34-3">repo.git_commit()</span>
<span id="cb34-4">repo.git_push()</span>
<span id="cb34-5">repo.git_tag()</span></code></pre></div></div>
</div>
<ul>
<li>First we have to make the repo up-to-date with:</li>
</ul>
<div id="cell-43" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">repo.git_pull()</span></code></pre></div></div>
</div>
<ul>
<li>We can now save the model and tokenizer in the directotry</li>
</ul>
<div id="cell-45" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">model.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_folder'</span>)</span>
<span id="cb36-2">tokenizer.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_folder'</span>)</span></code></pre></div></div>
</div>
<ul>
<li>Now our local folder countains 2 new files and we could push them to the hub:</li>
</ul>
<div id="cell-47" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">repo.git_add()</span>
<span id="cb37-2">repo.git_commit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add model and tokenizer'</span>)</span>
<span id="cb37-3">repo.git_push()</span></code></pre></div></div>
</div>
</section>
<section id="the-git-based-approach" class="level3">
<h3 class="anchored" data-anchor-id="the-git-based-approach">The git-based approach</h3>
<ul>
<li>This method is very similar to the one before, its barbone method that in pure <code>git</code> and <code>bash</code>.</li>
<li>First let’s install git and git-lf:</li>
</ul>
<div id="cell-49" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e5ed4b7f-7bb7-40f4-fb8c-50a1bc022045">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install git<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>LFS</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: git-LFS in /usr/local/lib/python3.10/dist-packages (1.6)</code></pre>
</div>
</div>
<ul>
<li>And the initialize git and lfs</li>
</ul>
<div id="cell-51" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="6314720b-dd94-448c-e778-92de9c8247a4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git lfs install</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Updated git hooks.
Git LFS initialized.</code></pre>
</div>
</div>
<ul>
<li>Now we can clone the repo from the hub the normal way:</li>
</ul>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="c1d1f169-a886-4253-a6ea-4a63858f4d88">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>huggingface.co<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Smail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cloning into 'test-model-2'...
remote: Enumerating objects: 4, done.
remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 4
Unpacking objects:  25% (1/4)Unpacking objects:  50% (2/4)Unpacking objects:  75% (3/4)Unpacking objects: 100% (4/4)Unpacking objects: 100% (4/4), 1.12 KiB | 1.12 MiB/s, done.</code></pre>
</div>
</div>
<ul>
<li>Since we are using bash, we could naigate the directory like this:</li>
</ul>
<div id="cell-55" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="31fb1e2d-0ded-4ade-dce3-725bd03e52c1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> ls</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>README.md</code></pre>
</div>
</div>
<ul>
<li>This will chnage the directory the repo we just cloned, and print all the files in it.</li>
<li>Now we can build a model like we did before and save all the files in the repo we cloned and push them to the hub:</li>
</ul>
<div id="cell-57" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="57bf1ca9-d41d-4900-9b65-2f3bd1e3e956">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForMaskedLM, AutoTokenizer</span>
<span id="cb46-2"></span>
<span id="cb46-3">checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"camembert-base"</span></span>
<span id="cb46-4"></span>
<span id="cb46-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForMaskedLM.from_pretrained(checkpoint)</span>
<span id="cb46-6">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(checkpoint)</span>
<span id="cb46-7"></span>
<span id="cb46-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do whatever with the model, train it, fine-tune it...</span></span>
<span id="cb46-9"></span>
<span id="cb46-10">model.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/test-model-2"</span>)</span>
<span id="cb46-11">tokenizer.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/content/test-model-2"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of the model checkpoint at camembert-base were not used when initializing CamembertForMaskedLM: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
- This IS expected if you are initializing CamembertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CamembertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>('/content/test-model-2/tokenizer_config.json',
 '/content/test-model-2/special_tokens_map.json',
 '/content/test-model-2/sentencepiece.bpe.model',
 '/content/test-model-2/added_tokens.json',
 '/content/test-model-2/tokenizer.json')</code></pre>
</div>
</div>
<div id="cell-58" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="01c4c049-35fc-446f-efb2-f1343dade4f1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>my_folder  sample_data  test-model-2</code></pre>
</div>
</div>
<div id="cell-59" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8bd9018f-ef11-40b2-e5d3-5628f6609d90">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> ls</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>added_tokens.json  model.safetensors  sentencepiece.bpe.model  tokenizer_config.json
config.json    README.md          special_tokens_map.json  tokenizer.json</code></pre>
</div>
</div>
<ul>
<li>Now that we’ve saved some model and tokenizer artifacts, let’s take another look at the folder:</li>
</ul>
<p>If you look at the file sizes (for example, with ls -lh), you should see that the model state dict file (pytorch_model.bin) is the only outlier, at more than 400 MB.</p>
<p>We can now go ahead and proceed like we would usually do with traditional Git repositories. We can add all the files to Git’s staging environment using the git add command:</p>
<div id="cell-62" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git add .</span></code></pre></div></div>
</div>
<div id="cell-63" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="b2b5d9ff-624e-41a5-d9e5-694f5df5cc0e">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git status</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<div class="ansi-escaped-output">
<pre>On branch main

Your branch is up to date with 'origin/main'.



Changes to be committed:

  (use "git restore --staged &lt;file&gt;..." to unstage)

    <span class="ansi-green-fg">new file:   added_tokens.json</span>

    <span class="ansi-green-fg">new file:   config.json</span>

    <span class="ansi-green-fg">new file:   model.safetensors</span>

    <span class="ansi-green-fg">new file:   sentencepiece.bpe.model</span>

    <span class="ansi-green-fg">new file:   special_tokens_map.json</span>

    <span class="ansi-green-fg">new file:   tokenizer.json</span>

    <span class="ansi-green-fg">new file:   tokenizer_config.json</span>


</pre>
</div>
</div>
</div>
<ul>
<li>Similarly, we can make sure that git-lfs is tracking the correct files by using its status command:</li>
</ul>
<div id="cell-65" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e1ee0cea-6322-46a3-b888-a37036b6d87c">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git lfs status</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>On branch main
Objects to be pushed to origin/main:


Objects to be committed:

    added_tokens.json (Git: 43734cd)
    config.json (Git: 4b8db4b)
    model.safetensors (LFS: 2785d2e)
    sentencepiece.bpe.model (LFS: 988bc5a)
    special_tokens_map.json (Git: b547935)
    tokenizer.json (Git: 9a9362e)
    tokenizer_config.json (Git: c49982e)

Objects not staged for commit:

</code></pre>
</div>
</div>
<ul>
<li><p>We can see that all files have Git as a handler, except pytorch_model.bin and sentencepiece.bpe.model, which have LFS. Great!</p></li>
<li><p>Let’s proceed to the final steps, committing and pushing to the huggingface.co remote repository:</p></li>
</ul>
<div id="cell-67" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="77a14ba6-1b1b-4386-965f-01b573076a25">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git commit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First model version"</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[main adaa023] First model version
 7 files changed, 128351 insertions(+)
 create mode 100644 added_tokens.json
 create mode 100644 config.json
 create mode 100644 model.safetensors
 create mode 100644 sentencepiece.bpe.model
 create mode 100644 special_tokens_map.json
 create mode 100644 tokenizer.json
 create mode 100644 tokenizer_config.json</code></pre>
</div>
</div>
<p>*Pushing can take a bit of time, depending on the speed of your internet connection and the size of your files:</p>
<div id="cell-69" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="487b4e97-7f54-4c3e-dbe0-7d75bc5487ee">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> git push</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 2 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (9/9), 592.06 KiB | 5.10 MiB/s, done.
Total 9 (delta 0), reused 0 (delta 0), pack-reused 0
To https://huggingface.co/Smail/test-model-2
   6266b40..adaa023  main -&gt; main</code></pre>
</div>
</div>
</section>
</section>
<section id="building-model-card" class="level2">
<h2 class="anchored" data-anchor-id="building-model-card">Building Model Card:</h2>
<ul>
<li><p>Model card plays a crucial role in open source model, it allow others to build an idea about the important element of the model without spending time and effort, it ensures reusability and reproducibility of the results.</p></li>
<li><p>By documenting the training and evaluation process we hepl other understand what they expect from the model, its limitations and capabilities, also we have to provide enough iformations about the data we train the model and how it was preprocessed.</p></li>
<li><p>The model card usually starts with a very brief, high-level overview of what the model is for, followed by additional details in the following sections:</p>
<ul>
<li>Model description</li>
<li>Intended uses &amp; limitations</li>
<li>How to use</li>
<li>Limitations and bias</li>
<li>Training data</li>
<li>Training procedure</li>
<li>Evaluation results</li>
</ul></li>
</ul>
<section id="model-description" class="level3">
<h3 class="anchored" data-anchor-id="model-description">Model Description:</h3>
<ul>
<li>The model description provides basic details about the model. This includes the architecture, version, if it was introduced in a paper, if an original implementation is available, the author, and general information about the model. Any copyright should be attributed here. General information about training procedures, parameters, and important disclaimers can also be mentioned in this section.</li>
</ul>
</section>
<section id="intended-uses-limitations" class="level3">
<h3 class="anchored" data-anchor-id="intended-uses-limitations">Intended uses &amp; limitations</h3>
<ul>
<li>Here you describe the use cases the model is intended for, including the languages, fields, and domains where it can be applied. This section of the model card can also document areas that are known to be out of scope for the model, or where it is likely to perform suboptimally.</li>
</ul>
</section>
<section id="how-to-use" class="level3">
<h3 class="anchored" data-anchor-id="how-to-use">How to use</h3>
<ul>
<li>This section should include some examples of how to use the model. This can showcase usage of the pipeline() function, usage of the model and tokenizer classes, and any other code you think might be helpful.</li>
</ul>
</section>
<section id="training-data" class="level3">
<h3 class="anchored" data-anchor-id="training-data">Training data</h3>
<ul>
<li>This part should indicate which dataset(s) the model was trained on. A brief description of the dataset(s) is also welcome.</li>
</ul>
</section>
<section id="training-procedure" class="level3">
<h3 class="anchored" data-anchor-id="training-procedure">Training procedure</h3>
<ul>
<li>In this section you should describe all the relevant aspects of training that are useful from a reproducibility perspective. This includes any preprocessing and postprocessing that were done on the data, as well as details such as the number of epochs the model was trained for, the batch size, the learning rate, and so on.</li>
</ul>
</section>
<section id="variable-and-metrics" class="level3">
<h3 class="anchored" data-anchor-id="variable-and-metrics">Variable and metrics</h3>
<ul>
<li>Here you should describe the metrics you use for evaluation, and the different factors you are mesuring. Mentioning which metric(s) were used, on which dataset and which dataset split, makes it easy to compare you model’s performance compared to that of other models. These should be informed by the previous sections, such as the intended users and use cases.</li>
</ul>
</section>
<section id="evaluation-results" class="level3">
<h3 class="anchored" data-anchor-id="evaluation-results">Evaluation results</h3>
<ul>
<li>Finally, provide an indication of how well the model performs on the evaluation dataset. If the model uses a decision threshold, either provide the decision threshold used in the evaluation, or provide details on evaluation at different thresholds for the intended uses.</li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>Hugging Face</category>
  <category>Pytorch</category>
  <category>Deep Learning</category>
  <category>NLP</category>
  <category>LLM</category>
  <category>HuggingFaceHub</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_4/Hugging_Face_course_Notes_Chapter4.html</guid>
  <pubDate>Sun, 25 Feb 2024 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_4/nlp-course.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Multi Choice with Swag Dataset</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Data PreProcessing For NLP Problem/Multi_choice_with_SWAG.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction:</h1>
<ul>
<li>In this notebook I will try to investigate the <strong><code>SWAG</code></strong> datasets.</li>
<li>The idea is to understand how to deal with multiple choice datasets and how to prepare them for the next step.</li>
<li>Multiple choice is frequent problem in the filed of LLMs and NLP in general</li>
<li>So the preprocessing of data will have a huge effect on the success of any proposed solution</li>
</ul>
<div id="cell-2" class="cell" data-execution_count="55">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the dataset</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb1-3">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'swag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'regular'</span>)</span></code></pre></div></div>
</div>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="77217f90-a443-47cd-aeda-db885317e33a" data-execution_count="56">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let's grab a sample</span></span>
<span id="cb2-2">dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>{'video-id': 'anetv_jkn6uvmqwh4',
 'fold-ind': '3416',
 'startphrase': 'Members of the procession walk down the street holding small horn brass instruments. A drum line',
 'sent1': 'Members of the procession walk down the street holding small horn brass instruments.',
 'sent2': 'A drum line',
 'gold-source': 'gold',
 'ending0': 'passes by walking down the street playing their instruments.',
 'ending1': 'has heard approaching them.',
 'ending2': "arrives and they're outside dancing and asleep.",
 'ending3': 'turns the lead singer watches the performance.',
 'label': 0}</code></pre>
</div>
</div>
<ul>
<li>These fields represent the idea begind this dataset
<ul>
<li>a situation where we have to predict the right ending</li>
<li><code>sent1</code> and <code>sent2</code> represent the given situation and they added up to <code>startphrase</code></li>
<li><code>endings 0 to 3</code> represent the the endings for that situation, only one is the right</li>
<li><code>label</code> index the right answer</li>
</ul></li>
<li>Now let’s initialized <code>BERT</code> and load its <code>tokenizer</code>.</li>
</ul>
<div id="cell-6" class="cell" data-execution_count="58">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span>
<span id="cb4-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span>)</span></code></pre></div></div>
</div>
<ul>
<li>The idea here is to tokenize a start sentence with each one of the 4 choices,</li>
</ul>
<div id="cell-8" class="cell" data-execution_count="59">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">ending_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending3"</span>]</span>
<span id="cb5-2"></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_function(examples):</span>
<span id="cb5-5">    first_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[context] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> context <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sent1"</span>]]</span>
<span id="cb5-6">    question_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> examples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sent2"</span>]</span>
<span id="cb5-7">    second_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-8">        [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>header<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>examples[end][i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> end <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ending_names]</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, header <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(question_headers)</span>
<span id="cb5-10">    ]</span>
<span id="cb5-11"></span>
<span id="cb5-12">    first_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(first_sentences, [])</span>
<span id="cb5-13">    second_sentences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(second_sentences, [])</span>
<span id="cb5-14"></span>
<span id="cb5-15">    tokenized_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(first_sentences, second_sentences, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {k: [v[i : i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tokenized_examples.items()}</span></code></pre></div></div>
</div>
<ul>
<li><p>To understand each operation of that function we will do it step-by-step:</p>
<ul>
<li>First let’s create a sub-set of the training set</li>
<li>Create a <code>endings</code> list that we will use later</li>
</ul></li>
</ul>
<div id="cell-10" class="cell" data-execution_count="60">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">endings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ending3"</span>]</span>
<span id="cb6-2">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>]</span>
<span id="cb6-3">smp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_ds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span></code></pre></div></div>
</div>
<ul>
<li>Multiply each <code>sent1</code> by 4 and stack them all in a list:</li>
</ul>
<div id="cell-12" class="cell" data-execution_count="61">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">sent_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[sent] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sent1'</span>]]</span></code></pre></div></div>
</div>
<ul>
<li>Let’s retrieve the length of that list and see what’s inside one element of it.</li>
</ul>
<div id="cell-14" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="51416942-b830-4a47-e26f-c6453d2f0c1c" data-execution_count="62">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">sent_1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sent_1)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>(['A group of members in green uniforms walks waving flags.',
  'A group of members in green uniforms walks waving flags.',
  'A group of members in green uniforms walks waving flags.',
  'A group of members in green uniforms walks waving flags.'],
 20)</code></pre>
</div>
</div>
<ul>
<li>So basically we have 4 copies of each first-sentence of the dataset.</li>
<li>Now we will create a list of the second-sentence or the header.</li>
</ul>
<div id="cell-16" class="cell" data-execution_count="63">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sent2'</span>]</span></code></pre></div></div>
</div>
<ul>
<li>At this point we have:
<ul>
<li><code>sent_1</code> which each element is multiplied by 4</li>
<li><code>headers</code> that complete <code>sent_1</code></li>
</ul></li>
<li>The idea here is to create pairs of each <code>header</code> +<code>sent_2</code> for each <code>sent_1</code>.</li>
</ul>
<div id="cell-18" class="cell" data-execution_count="64">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">sent_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>head<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>smp[end][i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> end <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> endings] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(headers)]</span></code></pre></div></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Data PreProcessing For NLP Problem/Preprocessing_1.png" class="img-fluid figure-img"></p>
<figcaption>Pre-processing</figcaption>
</figure>
</div>
<ul>
<li>Now we need to <strong>flatten</strong> the pair of sentences, so we could tokenize them:</li>
</ul>
<div id="cell-21" class="cell" data-execution_count="65">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">frst_sent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(sent_1, [])</span>
<span id="cb12-2">scnd_sent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(sent_2, [])</span>
<span id="cb12-3">tok_smp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(frst_sent, scnd_sent, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
</div>
<ul>
<li>We tokenize the pair of list sentences which will return a dictionary with 3 keys:</li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a580136c-b58f-42d7-f71c-4a059c5e69a7" data-execution_count="68">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">tok_smp.keys()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>dict_keys(['input_ids', 'token_type_ids', 'attention_mask'])</code></pre>
</div>
</div>
<ul>
<li>But since we already flattend the pairs before the tokenization step, we need to get them unflatten again so we can pass it through the <code>map()</code> function in order to be computed by the model.</li>
</ul>
<div id="cell-25" class="cell" data-execution_count="69">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: [v[i: i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tok_smp.items()}</span></code></pre></div></div>
</div>
<ul>
<li>Lets check if we get the unflatten step right, we just need to make sure that the <code>input_ids</code> of the first sentence has the same values in both: <code>tok_smp</code> and <code>outputs</code>:</li>
</ul>
<div id="cell-27" class="cell" data-execution_count="74">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">flatten_smp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tok_smp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]</span>
<span id="cb16-2">unflatten_smp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]</span></code></pre></div></div>
</div>
<div id="cell-28" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="21ff1639-09f6-4aec-bfd3-4a866a21f985" data-execution_count="76">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1">flatten_smp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> unflatten_smp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>True</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>HuggingFace</category>
  <category>Pytorch</category>
  <category>NLP</category>
  <category>Datasets</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Data PreProcessing For NLP Problem/Multi_choice_with_SWAG.html</guid>
  <pubDate>Mon, 27 Nov 2023 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Data PreProcessing For NLP Problem/datasets.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Hugging Face Course Notes: Chapter2</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/HuggingFace_NLP_course_Notes_2.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction:</h1>
<ul>
<li>Transformer models are very large with Ms to 10s of Billions of parameters, which make the process of training and fine-tuning and deploying them very hard.</li>
<li>Here comes the <strong>Hugging Face</strong> library which adress that problem, the goal is to provide a single <code>API</code> through which any transformer model can be loaded, trained and saved.</li>
<li>With <strong><code>Transformer</code></strong> library we can: - Download, load and use models for inference or fine-tuning with just couple lines of code - all models in the library are stored like any other model, at their core they are just a simple pytorch <code>nn.Module</code> class. - All components of the models are stored in one file, so no abstarctions or shared modules across files</li>
</ul>
</section>
<section id="behind-the-pipeline" class="level1">
<h1>Behind the PipeLine:</h1>
<ul>
<li>To understand what’s happenening behind the scene we must first start with what already know: <strong>Pipeline</strong></li>
</ul>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="476937af-1205-4b9b-8163-f668cfd56158">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb1-2">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentiment-analysis'</span>)</span>
<span id="cb1-3">classifier([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My birthday is today!'</span>])</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>No model was supplied, defaulted to distilbert-base-uncased-finetuned-sst-2-english and revision af0f99b (https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english).
Using a pipeline without specifying a model name and revision in production is not recommended.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>[{'label': 'POSITIVE', 'score': 0.9996117949485779}]</code></pre>
</div>
</div>
<ul>
<li>As we saw in the previous chapter the <code>pipeline</code> goups 3 steps in order to perform such a task:<br>
<img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/pic1.png" class="img-fluid" alt="pipeline"></li>
</ul>
<section id="preprocessing-with-a-tokenizer" class="level2">
<h2 class="anchored" data-anchor-id="preprocessing-with-a-tokenizer">Preprocessing with a Tokenizer:</h2>
<ul>
<li>In order to convert raw text to its numerical form before we feed it to the model, we use <strong>Tokenizer</strong>.</li>
<li>Here is how we tokenize any input words:</li>
</ul>
<div id="cell-6" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="9ac39f1a-423f-42d7-f716-275325e4afb9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span>
<span id="cb4-2">mdl_ckpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilbert-base-uncased-finetuned-sst-2-english"</span></span>
<span id="cb4-3">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckpt)</span>
<span id="cb4-4">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My birthday is today!'</span></span>
<span id="cb4-5">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(inputs, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb4-6">outputs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>{'input_ids': tensor([[ 101, 2026, 5798, 2003, 2651,  999,  102]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1]])}</code></pre>
</div>
</div>
<ul>
<li>First we pick a model <code>distilbert-base-uncased-finetuned-sst-2-english</code> which is basically the same model our pipeline used to classify the sentence.</li>
<li>We use <code>AutoTokenizer</code> to get to tokenization method according to that model, because each model has its own method of tokenizing words.</li>
<li>Then we feed the text to the tokenizer, and we pick which type of tensors we want to get returned
<ul>
<li><code>pt</code> stands for pytorch</li>
<li>other parameters will be covered later</li>
</ul></li>
<li>We get a dictionary with 2 keys: <code>input_ids</code> and <code>attention_mask</code></li>
<li><code>attention_mask</code> will be covered later, <code>input_ids</code> contains one list of integers.</li>
</ul>
</section>
<section id="going-through-the-model" class="level2">
<h2 class="anchored" data-anchor-id="going-through-the-model">Going through the model:</h2>
<ul>
<li>We can download the pretraind model same we did with tokenizer, by usin <code>AutoModel</code> class which also has <code>from_pretrained</code> method.</li>
<li>We just need to download the same model as used in tokenization process.</li>
</ul>
<div id="cell-9" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModel</span>
<span id="cb6-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModel.from_pretrained(mdl_ckpt)</span></code></pre></div></div>
</div>
<ul>
<li>This architecture we just downloaded conatins onlly the base transformer module: given some inputs, it outputs what we call <strong>Hidden_state</strong>.</li>
<li>For each model inputs we will retrieve a high-dimensional vector representing the contextual understanding of that input by the model</li>
<li>These Hidden_states can be used as it is, but usually it will be feeded as input to another part of the model called the <strong>Head</strong>.</li>
<li>Each Head is a task_specific head.</li>
</ul>
</section>
<section id="a-high-dimensional-vector" class="level2">
<h2 class="anchored" data-anchor-id="a-high-dimensional-vector">A high-dimensional vector?</h2>
<ul>
<li>Usually the model outputs a large vector with 3 dimensions:
<ul>
<li><strong>Batch-size</strong>: the number of sequence processed (in our case we pass only one sentence)</li>
<li><strong>Sequence-length</strong>: The length of the numerical representation of the sequence (8 in our example)</li>
<li><strong>Hidden size</strong>: The vector dimension of each model input.</li>
</ul></li>
<li>The high-dimentionality of this vector comes from the last dimension, the hidden-size is very large dimension: usually ~700:</li>
</ul>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="52133427-783f-492d-dc91-be3f3effc848">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>outputs)</span>
<span id="cb7-2">outs.last_hidden_state.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>torch.Size([1, 7, 768])</code></pre>
</div>
</div>
</section>
<section id="model-heads-making-sense-out-of-numbers" class="level2">
<h2 class="anchored" data-anchor-id="model-heads-making-sense-out-of-numbers">Model heads: Making sense out of numbers:</h2>
<ul>
<li>So to wrap-up the whole process: First get inputs converted input ID then the embedding layer convert them into tokenized vectors.</li>
<li>The subsequent layers manipulate thes vectors using attention mechanism to produce a contextual understanding of that input in form of <strong>High-dimensional-vector</strong>.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/pic2.png" class="img-fluid figure-img"></p>
<figcaption>model</figcaption>
</figure>
</div>
<ul>
<li>There rae many architecture available in the Transformers library, each is designed to tackle specific task.</li>
<li>For example if we want a model for a sequence classification head, we will use <code>AutoModelForSequenceClassification</code> instead of <code>AutoModel</code>.</li>
</ul>
<div id="cell-14" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'do you feel any better today?'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I feel warm and cosy in my house'</span>]</span>
<span id="cb9-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckpt)</span>
<span id="cb9-3">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(text, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span></code></pre></div></div>
</div>
<div id="cell-15" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f93f33f0-574e-4f79-bcdf-b4a029249453">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification</span>
<span id="cb10-2">mdl_ckpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilbert-base-uncased-finetuned-sst-2-english"</span></span>
<span id="cb10-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_ckpt)</span>
<span id="cb10-4">outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inps)</span>
<span id="cb10-5">outs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>SequenceClassifierOutput(loss=None, logits=tensor([[-0.2121,  0.4987],
        [-3.9382,  4.1996]], grad_fn=&lt;AddmmBackward0&gt;), hidden_states=None, attentions=None)</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="7ade4d11-0861-4cb0-f0aa-578a9d200f9f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">outs.logits.shape</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>torch.Size([2, 2])</code></pre>
</div>
</div>
<ul>
<li>In this case we have 2 sentences and 2 labels <code>negative</code> <code>positive</code>.</li>
<li>The model will take the high dimensional vector as input and outputs a vector that match our task.</li>
</ul>
<section id="post-processing" class="level3">
<h3 class="anchored" data-anchor-id="post-processing">Post processing:</h3>
<ul>
<li>The vector we get doesn’t make any sense as it is, so we need to make it meaningful for our task.</li>
</ul>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="08a9531b-a0dc-4bda-997e-675b202e6a99">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">outs.logits</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([[-0.2121,  0.4987],
        [-3.9382,  4.1996]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>those are prediction for each sentence, and each prediction can be mapped to a label, so we need to know each label which, then convert those logits into some meaningful values.</li>
<li>To convert the logits into probabilies we will pass them through a softmax layer.</li>
</ul>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0701368e-574a-4f60-d80f-230fef87d929">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.functional.softmax(outs.logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-3">preds</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([[3.2942e-01, 6.7058e-01],
        [2.9218e-04, 9.9971e-01]], grad_fn=&lt;SoftmaxBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>Now we need to know the label of each colomn:</li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="66c82ec7-af43-4636-996b-ca51bc3185bf">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">model.config.id2label</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>{0: 'NEGATIVE', 1: 'POSITIVE'}</code></pre>
</div>
</div>
<ul>
<li>So the position [0] is negative where the position [1] positive</li>
</ul>
</section>
</section>
</section>
<section id="models" class="level1">
<h1>Models</h1>
<ul>
<li>As we saw before the <code>AutoModel()</code> class is handy tool to instantiate a model from a <code>chekcpoint(weights)</code></li>
<li>It can guess the correspondent architecture for the checkpoint.</li>
</ul>
<section id="building-the-transformer" class="level3">
<h3 class="anchored" data-anchor-id="building-the-transformer">Building the transformer:</h3>
<ul>
<li>We also could call the class of the model precisely if we know exactly the model we want to use.</li>
</ul>
<div id="cell-26" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BertConfig, BertModel</span>
<span id="cb20-2">cnfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BertConfig()</span>
<span id="cb20-3">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BertModel(cnfg)</span></code></pre></div></div>
</div>
<ul>
<li>The configurations contains many attributes related the architecture:</li>
</ul>
<div id="cell-28" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d3a4e181-a8a3-4222-b93b-15b092f2a89c">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">cnfg</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>BertConfig {
  "attention_probs_dropout_prob": 0.1,
  "classifier_dropout": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "pad_token_id": 0,
  "position_embedding_type": "absolute",
  "transformers_version": "4.34.1",
  "type_vocab_size": 2,
  "use_cache": true,
  "vocab_size": 30522
}</code></pre>
</div>
</div>
<ul>
<li>We can understand many of these attributes like:
<ul>
<li><code>hidden_act</code>: activation function : <code>gelu</code></li>
<li><code>hidden_size</code>: vector dimensions of each input word</li>
<li><code>attention_head</code>, <code>num_hidden_layer</code>, <code>model_type</code> …</li>
</ul></li>
<li>While it is possible to build model like this way and using it, but it will produce very low predictions beacause its weights are set randomly.</li>
<li>This forces us to train it from scratch, which is a very daunting and time, noney, energy consuming process.</li>
<li>This is way its very preferably to use to other way of loading the model by starting with a pretrained one:</li>
</ul>
<div id="cell-31" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BertModel</span>
<span id="cb23-2">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BertModel.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-cased'</span>)</span></code></pre></div></div>
</div>
<ul>
<li><p>we even could use <code>AutoModel</code> instead of <code>BertModel</code> since it will produce agnostic code that fits all situations</p></li>
<li><p>At this point the model is initialized with all the weights of the checkpoint, it can be used for inference directly on the tasks it was trained on, and also it can be fine-tuned on new tasks or more data.</p></li>
</ul>
</section>
<section id="saving-the-model" class="level2">
<h2 class="anchored" data-anchor-id="saving-the-model">Saving the model:</h2>
<ul>
<li>To save a model we are satisfied with its prformance:</li>
</ul>
<div id="cell-35" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1">mdl.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>)</span></code></pre></div></div>
</div>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8a585ae9-7d44-42ec-d74a-53ded3889ca6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>config.json  pytorch_model.bin  special_tokens_map.json  tokenizer_config.json  vocab.txt</code></pre>
</div>
</div>
<ul>
<li>This saves 2 files:
<ul>
<li><code>config.json</code>: contains all attributes necessary to build the model architecture, and also it contains some metadata</li>
<li><code>pytorch_model.bin</code>: contains the learnable weights.</li>
</ul></li>
</ul>
</section>
<section id="using-a-transformer-model-for-inference" class="level2">
<h2 class="anchored" data-anchor-id="using-a-transformer-model-for-inference">Using a Transformer model for inference:</h2>
<ul>
<li>Tokenizer convert input words into input ID:</li>
</ul>
<div id="cell-39" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="713c92f0-19f0-446a-dbec-cd7d02a34d2d">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello!"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cool."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nice!"</span>]</span>
<span id="cb27-2">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(sequences)</span>
<span id="cb27-3">encoded_sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inps.input_ids</span>
<span id="cb27-4">encoded_sequences</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>[[101, 7592, 999, 102], [101, 4658, 1012, 102], [101, 3835, 999, 102]]</code></pre>
</div>
</div>
<ul>
<li>The output we get here is a list of list, the problem is that tensors accept only rectangular shapes.</li>
<li>So we nee to cenvert it into the targeted shape:</li>
</ul>
<div id="cell-41" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="2064b705-e417-4a0c-d2fc-48159dd921bf">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(encoded_sequences)</span>
<span id="cb29-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>tensor([[ 101, 7592,  999,  102],
        [ 101, 4658, 1012,  102],
        [ 101, 3835,  999,  102]])</code></pre>
</div>
</div>
<section id="using-the-tensors-as-inputs-to-the-model" class="level3">
<h3 class="anchored" data-anchor-id="using-the-tensors-as-inputs-to-the-model">Using the tensors as inputs to the model</h3>
<ul>
<li>Making use of this returned tensor is easy as pass it through the model:</li>
</ul>
<div id="cell-43" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="70f5b950-e5a1-46cd-e68f-d9152c8e7d84">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1">outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb31-2">outputs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>BaseModelOutputWithPoolingAndCrossAttentions(last_hidden_state=tensor([[[ 4.4496e-01,  4.8276e-01,  2.7797e-01,  ..., -5.4032e-02,
           3.9394e-01, -9.4770e-02],
         [ 2.4943e-01, -4.4093e-01,  8.1772e-01,  ..., -3.1917e-01,
           2.2992e-01, -4.1172e-02],
         [ 1.3668e-01,  2.2518e-01,  1.4502e-01,  ..., -4.6915e-02,
           2.8224e-01,  7.5566e-02],
         [ 1.1789e+00,  1.6738e-01, -1.8187e-01,  ...,  2.4671e-01,
           1.0441e+00, -6.1970e-03]],

        [[ 3.6436e-01,  3.2464e-02,  2.0258e-01,  ...,  6.0111e-02,
           3.2451e-01, -2.0995e-02],
         [ 7.1866e-01, -4.8725e-01,  5.1740e-01,  ..., -4.4012e-01,
           1.4553e-01, -3.7545e-02],
         [ 3.3223e-01, -2.3271e-01,  9.4877e-02,  ..., -2.5268e-01,
           3.2172e-01,  8.1079e-04],
         [ 1.2523e+00,  3.5754e-01, -5.1320e-02,  ..., -3.7840e-01,
           1.0526e+00, -5.6255e-01]],

        [[ 2.4042e-01,  1.4718e-01,  1.2110e-01,  ...,  7.6062e-02,
           3.3564e-01,  2.8262e-01],
         [ 6.5701e-01, -3.2787e-01,  2.4968e-01,  ..., -2.5920e-01,
           2.0175e-01,  3.3275e-01],
         [ 2.0160e-01,  1.5783e-01,  9.8974e-03,  ..., -3.8850e-01,
           4.1308e-01,  3.9732e-01],
         [ 1.0175e+00,  6.4387e-01, -7.8147e-01,  ..., -4.2109e-01,
           1.0925e+00, -4.8456e-02]]], grad_fn=&lt;NativeLayerNormBackward0&gt;), pooler_output=tensor([[-0.6856,  0.5262,  1.0000,  ...,  1.0000, -0.6112,  0.9971],
        [-0.6055,  0.4997,  0.9998,  ...,  0.9999, -0.6753,  0.9769],
        [-0.7702,  0.5447,  0.9999,  ...,  1.0000, -0.4655,  0.9894]],
       grad_fn=&lt;TanhBackward0&gt;), hidden_states=None, past_key_values=None, attentions=None, cross_attentions=None)</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="tokenization" class="level1">
<h1>Tokenization:</h1>
<ul>
<li>One of the core component of the NLP Pipeline is the idea of <strong>Tokenezation</strong></li>
<li>It serve the purpose of translating raw text to its numerical form, so the model can process</li>
<li>In general there’s 3 approches to tokenize raw text, we won’t get in much details:
<ul>
<li><strong>Word-based</strong>: each word has its own token</li>
<li><strong>Character-Based</strong>: split text into charchters and gives each one of them a unique token</li>
<li><strong>Sub-Words Tokenization</strong>: basically gives frequent words unique tokenm while split rare words into sub parts and tokenize them.</li>
</ul></li>
</ul>
<section id="loading-and-saving" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-saving">Loading and Saving:</h2>
<ul>
<li>Loading and saving tokenizer is simple and very similar to how we load and save Models.</li>
<li>By using the same two methods: <code>from_pretrained</code> and <code>save_pretrained</code>.</li>
<li>Also we can load the tokenizer either by calling tokenizer class <code>BertTokenizer</code> or by just using <code>AutoTokenizer</code>, same as how we load models: <code>AutoModel</code> or <code>BertModel</code>:</li>
</ul>
<div id="cell-46" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BertTokenizer</span>
<span id="cb33-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BertTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-cased'</span>)</span></code></pre></div></div>
</div>
<div id="cell-47" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or the easy way</span></span>
<span id="cb34-2">tokenizer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-cased'</span>)</span></code></pre></div></div>
</div>
<div id="cell-48" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'try to tokenize this text so I can see the difference between them!'</span></span>
<span id="cb35-2">inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb35-3">inp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer1(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span></code></pre></div></div>
</div>
<div id="cell-49" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d471224c-0590-4906-de8f-f7b5d7d4a219">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">inp.input_ids, inp1.input_ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>(tensor([[  101,  2222,  1106, 22559,  3708,  1142,  3087,  1177,   146,  1169,
           1267,  1103,  3719,  1206,  1172,   106,   102]]),
 tensor([[  101,  2222,  1106, 22559,  3708,  1142,  3087,  1177,   146,  1169,
           1267,  1103,  3719,  1206,  1172,   106,   102]]))</code></pre>
</div>
</div>
<ul>
<li><p>So both methods yield same results, but as we said before we prefer using the second method since its code agnostinc and can be applied with all model.</p></li>
<li><p>Saving tokenizer is also similar to how we save models:</p></li>
</ul>
<div id="cell-52" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="250ea12e-922c-4451-e107-d14835f413a9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">tokenizer.save_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'path'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>('path/tokenizer_config.json',
 'path/special_tokens_map.json',
 'path/vocab.txt',
 'path/added_tokens.json')</code></pre>
</div>
</div>
</section>
<section id="encoding" class="level2">
<h2 class="anchored" data-anchor-id="encoding">Encoding:</h2>
<ul>
<li>The process of translating words to numbers is called <code>encoding</code>.</li>
<li>The encoding is done through 2 steps:
<ul>
<li>Tokenization</li>
<li>conversion to input IDs</li>
</ul></li>
</ul>
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/tok_pipe.png" class="img-fluid" alt="Tokenizer"> * The first we create token-word, ,ostly complete words, but in some cases the one word will be splited to 2 or more parts. - this sub parts can be dentified by the <code>##</code> preffix. * Then we need to convert those tokens into input IDs in order to feed them to the model. * To do that the tokenizer pass this tokens through a <code>Vocabulary</code>. - When we instentiate the tokenizer with <code>from_pretrained()</code> we already download that vocabulary the we can match ewach token against an ID. - we need to use the same checkpoint during the training. * Here we will explore these 2 steps seperatly:</p>
<div id="cell-54" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="46c8e19b-da85-4446-a58a-28900784bbf6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">text  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using a transformer network is simple'</span></span>
<span id="cb40-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-cased'</span>)</span>
<span id="cb40-3">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.tokenize(text)</span>
<span id="cb40-4">tokens</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>['Using', 'a', 'transform', '##er', 'network', 'is', 'simple']</code></pre>
</div>
</div>
<ul>
<li>As we see the word <code>transformer</code> get splited to 2 parts, the second one is represented with <code>##</code> prefix</li>
</ul>
<div id="cell-56" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e52e4445-946b-4a4d-a83f-ac30a3c0d076">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.convert_tokens_to_ids(tokens)</span>
<span id="cb42-2">ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>[7993, 170, 11303, 1200, 2443, 1110, 3014]</code></pre>
</div>
</div>
</section>
<section id="decoding" class="level2">
<h2 class="anchored" data-anchor-id="decoding">Decoding:</h2>
<ul>
<li>The idea of decoding is the exact opsite of encoding, its the process of converting ids to their text/word form</li>
</ul>
<div id="cell-58" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:35}}" data-outputid="21489804-1c4c-45f6-a901-e7edac57d1ff">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1">decoded_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.decode(ids)</span>
<span id="cb44-2">decoded_ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>'Using a transformer network is simple'</code></pre>
</div>
</div>
<ul>
<li>We get the text we begin with back by using the <code>decode()</code> method.</li>
</ul>
</section>
</section>
<section id="handling-multiple-sequences" class="level1">
<h1>Handling multiple sequences:</h1>
<ul>
<li>Performing inference on a single sequence is a simple task, but what if we want to process multiple sequence wuth different lengths?</li>
</ul>
<div id="cell-61" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb46-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForSequenceClassification</span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model checkpoint</span></span>
<span id="cb46-4">mdl_chkpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distilbert-base-uncased-finetuned-sst-2-english'</span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tokenizer</span></span>
<span id="cb46-6">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckpt)</span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model</span></span>
<span id="cb46-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_ckpt)</span>
<span id="cb46-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sequence</span></span>
<span id="cb46-10">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I've been waiting for a HuggingFace course my whole life."</span></span>
<span id="cb46-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#tokens</span></span>
<span id="cb46-12">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.tokenize(text)</span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ids</span></span>
<span id="cb46-14">ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.convert_tokens_to_ids(tokens)</span>
<span id="cb46-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert them into tensor</span></span>
<span id="cb46-16">input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ids)</span></code></pre></div></div>
</div>
<ul>
<li>Now we can pass the tensor into the model to perform some prediction:</li>
</ul>
<div id="cell-63" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:340}}" data-outputid="6126b963-4ca6-4b62-89de-58e5f274be7d">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids)</span></code></pre></div></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">IndexError</span>                                Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-68-9aae2e9c06e9&gt;</span> in <span class="ansi-cyan-fg">&lt;cell line: 1&gt;</span><span class="ansi-blue-fg">()</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>preds <span class="ansi-blue-fg">=</span> model<span class="ansi-blue-fg">(</span>input_ids<span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py</span> in <span class="ansi-cyan-fg">_wrapped_call_impl</span><span class="ansi-blue-fg">(self, *args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">   1516</span>             <span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>_compiled_call_impl<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>  <span class="ansi-red-fg"># type: ignore[misc]</span>
<span class="ansi-green-fg ansi-bold">   1517</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 1518</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>_call_impl<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   1519</span> 
<span class="ansi-green-fg ansi-bold">   1520</span>     <span class="ansi-green-fg">def</span> _call_impl<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py</span> in <span class="ansi-cyan-fg">_call_impl</span><span class="ansi-blue-fg">(self, *args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">   1525</span>                 <span class="ansi-green-fg">or</span> _global_backward_pre_hooks <span class="ansi-green-fg">or</span> _global_backward_hooks
<span class="ansi-green-fg ansi-bold">   1526</span>                 or _global_forward_hooks or _global_forward_pre_hooks):
<span class="ansi-green-fg">-&gt; 1527</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> forward_call<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   1528</span> 
<span class="ansi-green-fg ansi-bold">   1529</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py</span> in <span class="ansi-cyan-fg">forward</span><span class="ansi-blue-fg">(self, input_ids, attention_mask, head_mask, inputs_embeds, labels, output_attentions, output_hidden_states, return_dict)</span>
<span class="ansi-green-fg ansi-bold">    787</span>         return_dict <span class="ansi-blue-fg">=</span> return_dict <span class="ansi-green-fg">if</span> return_dict <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span> <span class="ansi-green-fg">else</span> self<span class="ansi-blue-fg">.</span>config<span class="ansi-blue-fg">.</span>use_return_dict
<span class="ansi-green-fg ansi-bold">    788</span> 
<span class="ansi-green-fg">--&gt; 789</span><span class="ansi-red-fg">         distilbert_output = self.distilbert(
</span><span class="ansi-green-fg ansi-bold">    790</span>             input_ids<span class="ansi-blue-fg">=</span>input_ids<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">    791</span>             attention_mask<span class="ansi-blue-fg">=</span>attention_mask<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py</span> in <span class="ansi-cyan-fg">_wrapped_call_impl</span><span class="ansi-blue-fg">(self, *args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">   1516</span>             <span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>_compiled_call_impl<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>  <span class="ansi-red-fg"># type: ignore[misc]</span>
<span class="ansi-green-fg ansi-bold">   1517</span>         <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">-&gt; 1518</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>_call_impl<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   1519</span> 
<span class="ansi-green-fg ansi-bold">   1520</span>     <span class="ansi-green-fg">def</span> _call_impl<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py</span> in <span class="ansi-cyan-fg">_call_impl</span><span class="ansi-blue-fg">(self, *args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">   1525</span>                 <span class="ansi-green-fg">or</span> _global_backward_pre_hooks <span class="ansi-green-fg">or</span> _global_backward_hooks
<span class="ansi-green-fg ansi-bold">   1526</span>                 or _global_forward_hooks or _global_forward_pre_hooks):
<span class="ansi-green-fg">-&gt; 1527</span><span class="ansi-red-fg">             </span><span class="ansi-green-fg">return</span> forward_call<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>args<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   1528</span> 
<span class="ansi-green-fg ansi-bold">   1529</span>         <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/transformers/models/distilbert/modeling_distilbert.py</span> in <span class="ansi-cyan-fg">forward</span><span class="ansi-blue-fg">(self, input_ids, attention_mask, head_mask, inputs_embeds, output_attentions, output_hidden_states, return_dict)</span>
<span class="ansi-green-fg ansi-bold">    590</span>             <span class="ansi-green-fg">raise</span> ValueError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"You cannot specify both input_ids and inputs_embeds at the same time"</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    591</span>         <span class="ansi-green-fg">elif</span> input_ids <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg">--&gt; 592</span><span class="ansi-red-fg">             </span>self<span class="ansi-blue-fg">.</span>warn_if_padding_and_no_attention_mask<span class="ansi-blue-fg">(</span>input_ids<span class="ansi-blue-fg">,</span> attention_mask<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    593</span>             input_shape <span class="ansi-blue-fg">=</span> input_ids<span class="ansi-blue-fg">.</span>size<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">    594</span>         <span class="ansi-green-fg">elif</span> inputs_embeds <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span>

<span class="ansi-green-fg">/usr/local/lib/python3.10/dist-packages/transformers/modeling_utils.py</span> in <span class="ansi-cyan-fg">warn_if_padding_and_no_attention_mask</span><span class="ansi-blue-fg">(self, input_ids, attention_mask)</span>
<span class="ansi-green-fg ansi-bold">   3939</span> 
<span class="ansi-green-fg ansi-bold">   3940</span>         <span class="ansi-red-fg"># Check only the first and last input IDs to reduce overhead.</span>
<span class="ansi-green-fg">-&gt; 3941</span><span class="ansi-red-fg">         </span><span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>config<span class="ansi-blue-fg">.</span>pad_token_id <span class="ansi-green-fg">in</span> input_ids<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">:</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">-</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   3942</span>             warn_string = (
<span class="ansi-green-fg ansi-bold">   3943</span>                 <span class="ansi-blue-fg">"We strongly recommend passing in an `attention_mask` since your input_ids may be padded. See "</span>

<span class="ansi-red-fg">IndexError</span>: too many indices for tensor of dimension 1</pre>
</div>
</div>
</div>
<ul>
<li>We did same steps as before but we get an error?</li>
<li>If we look again to what the tokenizer output we see that it didn’t just return a tensor, but it added a dimension of top of it:</li>
</ul>
<div id="cell-65" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="63f83cde-371d-4071-f580-2002dc933800">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is just a simple example to see the difference between the 2!'</span></span>
<span id="cb48-2">normal_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seq, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span>
<span id="cb48-3">the_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.tokenize(seq)</span>
<span id="cb48-4">ids_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.convert_tokens_to_ids(the_tokens)</span>
<span id="cb48-5">inp_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(ids_1)</span>
<span id="cb48-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'this is normal way: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>normal_input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>input_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb48-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'this is the manual way: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>inp_ids<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>this is normal way: tensor([[ 101, 2023, 2003, 2074, 1037, 3722, 2742, 2000, 2156, 1996, 4489, 2090,
         1996, 1016,  999,  102]])
this is the manual way: tensor([2023, 2003, 2074, 1037, 3722, 2742, 2000, 2156, 1996, 4489, 2090, 1996,
        1016,  999])</code></pre>
</div>
</div>
<ul>
<li>The normal way has one more dimension that the manual way, so we need to add this dimension while converting to tensor in order to feed it to the model</li>
</ul>
<div id="cell-67" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a57bf0f6-a36b-4b55-b6a3-38f9ebd33764">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1">input_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([ids])</span>
<span id="cb50-2">input_ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>tensor([[ 1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,  2607,
          2026,  2878,  2166,  1012]])</code></pre>
</div>
</div>
<ul>
<li>Now let’s try again with the model:</li>
</ul>
<div id="cell-69" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="ec3e75ca-8751-4045-e7d5-9061721ccc3f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids)</span>
<span id="cb52-2">preds.logits</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>tensor([[-2.7276,  2.8789]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>The thing we need to consider here the importance to <strong><code>Batching</code></strong> when feeding input sentences to tthe model even if we have one single sentence:</li>
</ul>
<div id="cell-71" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fb041258-9ea7-44f3-8360-97b2076462c1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">batched_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ids, ids]</span>
<span id="cb54-2">batched_inp_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(batched_ids)</span>
<span id="cb54-3">outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(batched_inp_ids).logits</span>
<span id="cb54-4">outs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>tensor([[-2.7276,  2.8789],
        [-2.7276,  2.8789]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>batching allows the model to process multiple sentences.</li>
<li>What about if these sentences has different length? which is always the case.</li>
<li>As we know the tensors needs to be rectangular in order to conver list of IDs to tensor.</li>
<li>to solve this kind of problems and more we will go through some techninques to work around them:</li>
</ul>
<section id="padding" class="level2">
<h2 class="anchored" data-anchor-id="padding">Padding:</h2>
<ul>
<li>Suppose we have this list of list as ids:</li>
</ul>
<div id="cell-74" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">batched_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]]</span></code></pre></div></div>
</div>
<ul>
<li>We need to get this list of list in rectangular shape before we convert it into tensor.</li>
<li>This is where we use <code>padding</code></li>
</ul>
<div id="cell-76" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">padding_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb57-2">batched_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, padding_id], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]]</span></code></pre></div></div>
</div>
<ul>
<li>The padding token ID can be found in <code>tokenizer.pad_token_id</code>.</li>
<li>Now let’s do a simple experience to see differences between 3 batches after going through a model: - first list - second list - both lists batched and padding applied</li>
</ul>
<div id="cell-78" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_chkpt)</span>
<span id="cb58-2">sequence1_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]]</span>
<span id="cb58-3">sequence2_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]]</span>
<span id="cb58-4">batched_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,tokenizer.pad_token_id ], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]]</span></code></pre></div></div>
</div>
<div id="cell-79" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="ca82dadf-c757-4a78-c44c-f8937948c86c">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model(torch.tensor(sequence1_ids)).logits)</span>
<span id="cb59-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model(torch.tensor(sequence2_ids)).logits)</span>
<span id="cb59-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model(torch.tensor(batched_ids)).logits)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 0.5803, -0.4125]], grad_fn=&lt;AddmmBackward0&gt;)
tensor([[ 1.5694, -1.3895]], grad_fn=&lt;AddmmBackward0&gt;)
tensor([[ 1.3374, -1.2163],
        [ 1.5694, -1.3895]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>The thing we could observe here is that we get same logits for the second sequence ID compared with batched_ids but not the first one?</li>
<li>The first sequence id is where we applied padding, and as we know transformer models are very sensetive to any context of the words (in this case context of the ids) so the element that we added in order to get a rectangular shape, is also get computed by the transformer model, which influence the final prediction.</li>
<li>We need to tell the model to ignore these padding values during the computation</li>
</ul>
<section id="attention-mask" class="level3">
<h3 class="anchored" data-anchor-id="attention-mask">Attention mask:</h3>
<ul>
<li>Attention mask is what tell the model during the predecting phase to ignore padding values and not including them while computing the attention mechanism</li>
</ul>
<div id="cell-82" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d0cf5086-a090-4570-f33c-ecf056a951cc">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">batched_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb61-2">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>],</span>
<span id="cb61-3">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, tokenizer.pad_token_id],</span>
<span id="cb61-4">]</span>
<span id="cb61-5"></span>
<span id="cb61-6">attention_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb61-7">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb61-8">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb61-9">]</span>
<span id="cb61-10"></span>
<span id="cb61-11">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(torch.tensor(batched_ids), attention_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.tensor(attention_mask))</span>
<span id="cb61-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(outputs.logits)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 1.5694, -1.3895],
        [ 0.5803, -0.4125]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<ul>
<li>Now we get the same logits</li>
</ul>
</section>
</section>
<section id="longer-sequences" class="level2">
<h2 class="anchored" data-anchor-id="longer-sequences">Longer sequences:</h2>
<ul>
<li>Transformer model cannot handle very long sentences, usually they have between 512 and 1024 tokens as maximum length for a sentence.</li>
<li>I we have a situation where we need to deal with very large sequence we either:
<ul>
<li>use models that can handle long sentences</li>
<li>use <code>truncation</code> method</li>
</ul></li>
<li><code>Truncation</code> is a way of making sequences of the same batch the same length, either by picking the length of the longest sequence or the short one</li>
</ul>
</section>
</section>
<section id="putting-all-together" class="level1">
<h1>Putting All Together:</h1>
<ul>
<li>What we have done till now is hard-coding each step of the tokenization process without full help from the <code>Tokenizer</code>.</li>
<li>However as we saw before the Transformer API can handle all this kind of work with a high-level functions.</li>
</ul>
<div id="cell-86" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">mdl_ckpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilbert-base-uncased-finetuned-sst-2-english"</span></span>
<span id="cb63-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckpt)</span>
<span id="cb63-3">seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I've been waiting for a HuggingFace course my whole life."</span></span></code></pre></div></div>
</div>
<ul>
<li>We can call the tokenizer function directly on a sequence and get:</li>
</ul>
<div id="cell-88" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="4a27a216-8725-4db4-dfa3-8e79ba0c8275">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seq)</span>
<span id="cb64-2">inputs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>{'input_ids': [101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172, 2607, 2026, 2878, 2166, 1012, 102], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</code></pre>
</div>
</div>
<ul>
<li>We get input IDs and even the <code>attention_mask</code> is applied.</li>
<li>We can also define more feature we want our tokenizer to apply:</li>
</ul>
<div id="cell-90" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a2f1aedd-6115-448a-c51c-955d60d04aaa">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass multiple sentences:</span></span>
<span id="cb66-2">seqs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is sentence number one'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is the second'</span>]</span>
<span id="cb66-3">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs)</span>
<span id="cb66-4">inps</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>{'input_ids': [[101, 2023, 2003, 6251, 2193, 2028, 102], [101, 2023, 2003, 1996, 2117, 102]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}</code></pre>
</div>
</div>
<ul>
<li>Padd on different parameters:</li>
</ul>
<div id="cell-92" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># padd based on the longest sequence</span></span>
<span id="cb68-2">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'longest'</span>)</span>
<span id="cb68-3"></span>
<span id="cb68-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># padd based on the model max length</span></span>
<span id="cb68-5">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>)</span>
<span id="cb68-6"></span>
<span id="cb68-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># padd on specified length</span></span>
<span id="cb68-8"></span>
<span id="cb68-9">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_length'</span>, max_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div></div>
</div>
<div id="cell-93" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f529a1e5-35a8-4e04-cd58-33a6731a4821">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will truncate the sequences that are longer than the model max length</span></span>
<span id="cb69-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (512 for BERT or DistilBERT)</span></span>
<span id="cb69-3">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb69-4">inps</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>{'input_ids': [[101, 2023, 2003, 6251, 2193, 2028, 102], [101, 2023, 2003, 1996, 2117, 102]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}</code></pre>
</div>
</div>
<div id="cell-94" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8ba739b7-dce3-4d85-a3b1-3b0cb1873a32">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will truncate the sequences that are longer than the specified max length</span></span>
<span id="cb71-2">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, max_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb71-3">inps</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>{'input_ids': [[101, 2023, 2003, 6251, 2193, 2028, 102], [101, 2023, 2003, 1996, 2117, 102]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}</code></pre>
</div>
</div>
<ul>
<li>The tokenizer object can handle the conversion to specific framework tensors, which can then be directly sent to the model==&gt;<code>pt for pytorch</code></li>
<li>The padding in this case should be always set as <code>True</code></li>
</ul>
<div id="cell-96" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="eb516512-452a-451e-ea57-eef8b6317f26">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers.models.instructblip.modeling_instructblip <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InstructBlipQFormerSelfOutput</span>
<span id="cb73-2">inps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seqs, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb73-3">inps</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>{'input_ids': tensor([[ 101, 2023, 2003, 6251, 2193, 2028,  102],
        [ 101, 2023, 2003, 1996, 2117,  102,    0]]), 'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 0]])}</code></pre>
</div>
</div>
<section id="special-tokens" class="level2">
<h2 class="anchored" data-anchor-id="special-tokens">Special Tokens</h2>
<ul>
<li>If we look closely to the input ID’s we get, we can spot a small difference from what we got earlier</li>
<li>The tokenizer added 2 ID’s to the list, one in the begining and another at the end.
<ul>
<li>they alwayas have the same value: <code>101</code> and <code>102</code></li>
</ul></li>
</ul>
<div id="cell-98" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="0525d7c6-3313-46e8-fd2a-3193609b6b03">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I've been waiting for a HuggingFace course my whole life."</span></span>
<span id="cb75-2">toks1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(seq)</span>
<span id="cb75-3">toks2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.tokenize(seq)</span>
<span id="cb75-4">ids1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toks1.input_ids</span>
<span id="cb75-5">ids2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.convert_tokens_to_ids(toks2)</span>
<span id="cb75-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'normal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ids1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb75-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'hard_coded: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ids2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>normal: [101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172, 2607, 2026, 2878, 2166, 1012, 102]
hard_coded: [1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172, 2607, 2026, 2878, 2166, 1012]</code></pre>
</div>
</div>
<ul>
<li>Now we will decode the different types of ID’s we will get different decoded sentences:</li>
</ul>
<div id="cell-100" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="fd470fe7-f9f6-483f-bfa2-5f4d719731e7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'normal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>decode(ids1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb77-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'hard-coded: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tokenizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>decode(ids2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>normal: [CLS] i've been waiting for a huggingface course my whole life. [SEP]
hard-coded: i've been waiting for a huggingface course my whole life.</code></pre>
</div>
</div>
<ul>
<li>Tokenizer added special tokens to the sentence <code>[CLS]</code> and <code>[SEP]</code>, because the model was trained with this kind of architecture</li>
</ul>
</section>
</section>
<section id="wrapping-up-from-tokenizer-to-model" class="level1">
<h1>Wrapping Up: From Tokenizer to Model:</h1>
<div id="cell-103" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb79-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForSequenceClassification</span>
<span id="cb79-3"></span>
<span id="cb79-4">checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distilbert-base-uncased-finetuned-sst-2-english"</span></span>
<span id="cb79-5">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(checkpoint)</span>
<span id="cb79-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(checkpoint)</span>
<span id="cb79-7">sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I've been waiting for a HuggingFace course my whole life."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"So have I!"</span>]</span>
<span id="cb79-8"></span>
<span id="cb79-9">tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(sequences, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span>
<span id="cb79-10">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>tokens)</span></code></pre></div></div>
</div>
<div id="cell-104" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d521f49f-7d5c-459b-92b5-f66b49b0e04f">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb80-1">outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.logits</span>
<span id="cb80-2">outs</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>tensor([[-1.5607,  1.6123],
        [-3.6183,  3.9137]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Hugging-Face</category>
  <category>NLP</category>
  <category>LLMs</category>
  <category>Pytorch</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/HuggingFace_NLP_course_Notes_2.html</guid>
  <pubDate>Wed, 18 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_2/nlp-course.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Hugging Face Course Notes: Chapter3</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_3/HuggungFace_NLP_course_Notes_3.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction:</h1>
<ul>
<li>In the previous chapter we learned how to use tokenizers and pretrained models to make predictions.</li>
<li>In this chapter we will see how to <strong>Fine-tune</strong> a model on our <strong>Dataset</strong> by learning:
<ul>
<li>How to prepare a large dataset for the finetuning process</li>
<li>How to use the high level API trainer to finetune a model</li>
<li>How to leverage the HuggingFace Accelerate library to easily run that custom training loop on any distributed setup</li>
</ul></li>
<li>But first let’s do the usuall by picking an architecture/model/tokenizer, and then train it some sample data:</li>
</ul>
<div id="cell-2" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer, AutoModelForSequenceClassification, AdamW</span></code></pre></div></div>
</div>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:232,&quot;referenced_widgets&quot;:[&quot;6286646bfe8a4025baccc2857acc97e8&quot;,&quot;46b7ed1ee300494eb2c6c92f150a0eea&quot;,&quot;018118bf35bb4c82a8af6395f22b35d0&quot;,&quot;66c5130682604861a53d0a609cecf598&quot;,&quot;36504e24d13e4180b93fb5d67b7baa8f&quot;,&quot;46727cca723a4c0583feb042b3cb1f1f&quot;,&quot;df9464c8a1364334a800ffd2fe9abc4b&quot;,&quot;82a6518e962f4d85bb42e2d862b0dca6&quot;,&quot;631f85bf03744c83aadc95cd71da7bc8&quot;,&quot;6f3c2e116b024230927942601ac84991&quot;,&quot;116218363d5a437faf3e6bee11a7b970&quot;,&quot;b374f1626f264fdab21bc02add4f1434&quot;,&quot;37c53e178b8542ec99bbfe1e5502e187&quot;,&quot;e199c751b9834a9c96d7a48b8069b3a9&quot;,&quot;05fa6c5fd01d4c5cb3002c3b08a5c2c6&quot;,&quot;4b1cffe8a26e467787a2451e1385e10f&quot;,&quot;db5cc66ae41947619d5964ccb22f3f35&quot;,&quot;d5071831453a4628a9bf573c66b86787&quot;,&quot;787acf5a774943eaa52e08863b9cb7af&quot;,&quot;3d72c1b2094f4edba250ca376fd93990&quot;,&quot;4569cb80f31f4be6b67dcfc277f0c9e1&quot;,&quot;1063ab745b00407fb46cff832a193695&quot;,&quot;5cec98a768fc46b48bca91371edc5c83&quot;,&quot;e58b37d2f9ff48df87ed9c30775cb6c9&quot;,&quot;8b8b9e63424e46429153fd2f1633a43b&quot;,&quot;7e2dbc3379804060a6271d32ecb0eca3&quot;,&quot;755be8fbf5af4636b351708b1700673b&quot;,&quot;73117c4859c34fc3aa8a7d0cb7f643fa&quot;,&quot;c7859ab79ec344d5a0ff1cb589621e68&quot;,&quot;d0abd9a928604868b98ebce0fc397efd&quot;,&quot;576cf541dd824beaacc5ece9ec7d2213&quot;,&quot;91369400611b4309b8f9511c7163f760&quot;,&quot;de0d2947f52d44a6b84cbe9e5eae9271&quot;,&quot;7d43b8a29f1d4857b6a28297a646238d&quot;,&quot;9f8588afdf1f45028983cea49d3e8c69&quot;,&quot;aa092dbea9e444ecbb8f3ffb77703a32&quot;,&quot;13e3c09dbcc549ed9e00bdefbe868650&quot;,&quot;fc11b7b6807e4415985f10d093b4ddf3&quot;,&quot;2fda5552fb5b4e4680bb89d9a70c72ac&quot;,&quot;f2dcf50f321c424687c74835aef43179&quot;,&quot;cb53b067a1eb4f2081e125d96103cebe&quot;,&quot;a1d4798f6a334bf88561fa12a33f0cf0&quot;,&quot;f52792676fd34eefbb6e18b8ad6837d7&quot;,&quot;5e81f8e43afc4c4fb9dc04331772f3e8&quot;,&quot;a2056c7958c84aa5835f2756f66d67f4&quot;,&quot;c9248c3c56fb46f39527705260049c22&quot;,&quot;44587dd5c348415dba1b24f5976e42e8&quot;,&quot;037672a2d2c04cf08eb7adc86e4a5472&quot;,&quot;248abdb4d110462694ea16eae2d4224f&quot;,&quot;1bc81b70bf4e478e98083c23d7563d6b&quot;,&quot;6c1ad58b9e1c45eb8ee1f49a190da17e&quot;,&quot;23113cba67444bf09d9134674c9c9ae6&quot;,&quot;f0b891d126fc451e8873e64a1050e351&quot;,&quot;05416934aaf7494bb42b0e716be5b1fb&quot;,&quot;6f36a20e239e47e8bca274903396195a&quot;]}}" data-outputid="97dc3e9a-af16-4e1b-de0c-aac54c3705ae" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">mdl_ckp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bert-base-uncased'</span></span>
<span id="cb2-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckp)</span>
<span id="cb2-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_ckp)</span>
<span id="cb2-4">sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I've been waiting for a HuggingFace course my whole life."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This course is amazing!"</span>]</span>
<span id="cb2-5">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(sequences, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6286646bfe8a4025baccc2857acc97e8","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b374f1626f264fdab21bc02add4f1434","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5cec98a768fc46b48bca91371edc5c83","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7d43b8a29f1d4857b6a28297a646238d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a2056c7958c84aa5835f2756f66d67f4","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.</code></pre>
</div>
</div>
<div id="cell-4" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be axplained later</span></span>
<span id="cb4-2">batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div></div>
</div>
<div id="cell-5" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training</span></span>
<span id="cb5-2">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters())</span>
<span id="cb5-3">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch).loss</span>
<span id="cb5-4">loss.backward()</span>
<span id="cb5-5">optimizer.step()</span></code></pre></div></div>
</div>
<ul>
<li>Of course training a model on 2 sentences will not yield a good results</li>
<li>So we need to introduce it to a larger dataset</li>
<li>In this chapter we will work with: example the <a href="https://aclanthology.org/I05-5002.pdf"><strong>MRPC</strong></a> (Microsoft Research Paraphrase Corpus) dataset.
<ul>
<li>The dataset consists of 5,801 pairs of sentences, with a label indicating if they are paraphrases or not (i.e., if both sentences mean the same thing)</li>
<li>This is one of the 10 datasets composing the <a href="https://gluebenchmark.com/">GLUE benchmark</a>, which is an academic benchmark that is used to measure the performance of ML models across 10 different text classification tasks</li>
</ul></li>
</ul>
<section id="loading-datasets-from-the-hub" class="level2">
<h2 class="anchored" data-anchor-id="loading-datasets-from-the-hub">Loading Datasets From The Hub:</h2>
<ul>
<li>We can easily download a dataset from the Hub just like we did with models before:</li>
</ul>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:337,&quot;referenced_widgets&quot;:[&quot;ee452a36f83d454ca7140f0c6d134d5b&quot;,&quot;8b1f5613f71640359af29da7a2f4dcbd&quot;,&quot;1455feacdcb94261a85e4233bebf5aae&quot;,&quot;68868053c98441b89e3e72b5fb153aac&quot;,&quot;8158a666e1d44848b535706dd0768dc9&quot;,&quot;d8e10374f84a4792b8e3ad2f049ddd80&quot;,&quot;1613c4fa86b2407a87f330d12828df52&quot;,&quot;75661e78f5d345b38f84ff342363f58b&quot;,&quot;63994837efe0421188bf41cc2249dfc0&quot;,&quot;2ec9f3e3bc5b40f2ad3ba3ca17d63adc&quot;,&quot;180a5c95eaf542e081b61184e4edce9b&quot;,&quot;49bae59a7bb748f9b820fbd5dc931468&quot;,&quot;7665d611edd24ddcaf97c3512bd9a905&quot;,&quot;49f881f780634bca8d298a9871a5ba19&quot;,&quot;949b100626ec40f48b6268ed6c5a2628&quot;,&quot;d2d5f08ea8074016b00d7152331e1f61&quot;,&quot;808e65af194e48c9bbe76e6f6813b4af&quot;,&quot;d351292896c245429b36092777da4811&quot;,&quot;f72614fe0478449293ee3226ff41250e&quot;,&quot;249debe552cf4a749e8626160325784d&quot;,&quot;2f92041573644faa83262297f1dc0764&quot;,&quot;d5e9ac1184ea4ecb97c498c2ee94dd7e&quot;,&quot;38c4677ed4334863b62953522f1313ec&quot;,&quot;37f77fa995924db89f13ceed72a8ea75&quot;,&quot;995b37d9a4f54152a7ca02f56a608675&quot;,&quot;a26cd16910a64f58ac88c54a4f644adf&quot;,&quot;ac2ad5289af948c9bdb9068d195c72a4&quot;,&quot;6873f19ef1534eb3ab86d6b2d8add10a&quot;,&quot;08fb225372c84c6c84754c86f3c30c21&quot;,&quot;3d794862496b4daf96d466376d7fa739&quot;,&quot;4f87a12dbf5f4e29871791c8ea94ffde&quot;,&quot;beaaf3ea0ff8439ebb44d423e9864d0e&quot;,&quot;4fcc1f1cc6d2445b95b663845b1b5ac8&quot;,&quot;f6e7ca7c866745ceaecdc8a0bd1521e7&quot;,&quot;12382977446e40e6abaca4dafc58ff3b&quot;,&quot;ab50015b20f84860b85b4d469a0d6b42&quot;,&quot;734b5ad8edb24883a65e218d3cb6357f&quot;,&quot;06f13bcd82334e1da7bf237417a172a8&quot;,&quot;386614d06ce14333bb94298c9c677602&quot;,&quot;b3d28e4e8d274f9da22ebea8fe9a8e59&quot;,&quot;c925634fee7a4fd88823d9c0e0e7ae66&quot;,&quot;3ed4bd8f1fc649a29a3d53d713e96260&quot;,&quot;ba2ba0b9679c41ad8abc0947d5e228f3&quot;,&quot;860051e9fbec4e2c80a57cb0f46c23bd&quot;,&quot;970c6533a6694ec8a41a94da376ce171&quot;,&quot;0950163ef7474455a2c400b57ffdc56d&quot;,&quot;c6ad791f1b7a4341bfeb2de8d806e00a&quot;,&quot;b0761b472e4b423c9f06e4eb1d1e17e5&quot;,&quot;a70aa5683b7c46ad9aa761e420cf47f6&quot;,&quot;6dde1652cd1b44c0b9c8f0e5e205be00&quot;,&quot;c32757d3a2be446d96c687042d37aff0&quot;,&quot;94ff6a73751f413b8aa3fe3bbec28f17&quot;,&quot;4e25011c388542f1b2dba8bf631f3fe7&quot;,&quot;40c4305ca6094369b2089b76534b43e6&quot;,&quot;07b128729f994380ab4af58dd42994ba&quot;,&quot;025f9d5566cf40e491d271a422d65def&quot;,&quot;30b3b5f1ded9468bbd093f781ce8498d&quot;,&quot;99c4afe1744c454895d51304dd958156&quot;,&quot;7708efbd74934743bb32f61e7871c19a&quot;,&quot;e29645fbced34f50b9f615734c235c7c&quot;,&quot;c58eda9d566c40738de49a5f44fc3c42&quot;,&quot;5ca7a2610f9749e6be30c529a66fa14e&quot;,&quot;1362bff88f4a4eb2a1792743b12ae7ed&quot;,&quot;204779d1517c4ce5b07ed1cde2f4c013&quot;,&quot;5908fe01e0634e4c83676a8aef8e6d24&quot;,&quot;ec5721f875d746948ee38a96c89fab29&quot;,&quot;7ba13feeeade446880c66b469ebcdb2c&quot;,&quot;b185c52d89c94f2081afa757a8557c4e&quot;,&quot;9814901b759e4de1afa77a7c0c45e34d&quot;,&quot;97e3bd9ba96c4c96bb963dcdee7e8e2c&quot;,&quot;ca4e5a8b9a974e4e9e931216731371f2&quot;,&quot;726805bff4bd44e088e814d27cbac054&quot;,&quot;22e35b283704490fabfc482378ebb7cf&quot;,&quot;76dab68b163a4ffaa38c68473fc0b2e3&quot;,&quot;d8cf90da3e504a70ae0c8b90d3052b32&quot;,&quot;af75030e38af4fde8fbab07ea2068ac3&quot;,&quot;fb9de77ab4a54a5da82ef35b5a0e4dc5&quot;,&quot;16753693478e4d4497ecdd030467274c&quot;,&quot;d2f396d734a34ee59b629fd5b7afdc72&quot;,&quot;12f8b08d5f0f40eba887fd8ba5456da8&quot;,&quot;018831916ae4493dbaf0c227f322e4c0&quot;,&quot;fd30a7b4ea194011bc1ec137537616c1&quot;,&quot;36787548f6c04ee584938f343969393f&quot;,&quot;3a2ed2667dca49a6b5008367d1218df1&quot;,&quot;790e80aa0ea24615b00cc1ffb0bb6680&quot;,&quot;5b22fa32c1bf433f8d0d389d2565c490&quot;,&quot;9eed78c9f3534ea1a32e28085e3e3b18&quot;,&quot;68a7c8ad9f0b4e68b5e0b151020d6e76&quot;,&quot;d8a7e22ba4944461a3b20ea6bf24844f&quot;,&quot;e25bbf8c9c47470485fde650d0b712d2&quot;,&quot;0d2376269eae4b8ca638e586d7c08c51&quot;,&quot;1a7d925506e44f55bd365302aa01c8b8&quot;,&quot;a2c1fc45207b478aa4d43ff2ac95dab0&quot;,&quot;cfe6afb817e6479f8ffd96827e3e4dd1&quot;,&quot;08524f90a2374a479d860456b127046d&quot;,&quot;b4e5e38438204f8590332183e19e1724&quot;,&quot;bd7354c113d8440b8635bfc8a4e571b2&quot;,&quot;d3c901d5efe04f6c8013af78e20badba&quot;,&quot;36fe2f44b7954b98b228297e6f403795&quot;,&quot;17c5b2a22d38478e90028ca76270f04e&quot;,&quot;bda3100a782e4868a1572b7db89926d3&quot;,&quot;af360e07005842c299f347e74754e554&quot;,&quot;a9c772e8c2f242aebe469b5a6a678cdd&quot;,&quot;6838e6bc126f4c51b7ee85368172b127&quot;,&quot;9a73ffff15ef4ca1bab6b385a59f405b&quot;,&quot;7d345e3c48db4302b6d8bbe8de9a6e24&quot;,&quot;b7588be22207444b8073b2335a0ecdf6&quot;,&quot;e51e2b01dc6f4b4fa7565aeb214206e5&quot;,&quot;295d27f705cf4e51bbd2b1f99c673196&quot;,&quot;cc7bcb8f3aa140f7bb3d50d50acebad3&quot;]}}" data-outputid="05d77262-ea40-4df5-d85a-276becfcae6e" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load dataset</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb6-3">raw_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mrpc'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ee452a36f83d454ca7140f0c6d134d5b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"49bae59a7bb748f9b820fbd5dc931468","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"38c4677ed4334863b62953522f1313ec","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f6e7ca7c866745ceaecdc8a0bd1521e7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"970c6533a6694ec8a41a94da376ce171","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"025f9d5566cf40e491d271a422d65def","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7ba13feeeade446880c66b469ebcdb2c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"16753693478e4d4497ecdd030467274c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d8a7e22ba4944461a3b20ea6bf24844f","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"17c5b2a22d38478e90028ca76270f04e","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-9" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="1471ac17-9df4-4f34-c737-8fbf4ccd5e43" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">raw_ds</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>DatasetDict({
    train: Dataset({
        features: ['sentence1', 'sentence2', 'label', 'idx'],
        num_rows: 3668
    })
    validation: Dataset({
        features: ['sentence1', 'sentence2', 'label', 'idx'],
        num_rows: 408
    })
    test: Dataset({
        features: ['sentence1', 'sentence2', 'label', 'idx'],
        num_rows: 1725
    })
})</code></pre>
</div>
</div>
<ul>
<li>Datasets are presented as <strong>DatasetDict</strong> which is an object dictionary that our datset is organized by.
<ul>
<li>Here we have our training-set, validation-set and test-set.</li>
<li>Each set 2 keys: features and num_rows.</li>
<li>Features has: <code>sentence1</code>, <code>sentence2</code>, <code>label</code>, <code>idx</code></li>
<li><code>sentence1&amp;2</code> represent the pair we need to train our model on and predict whether its paraphrased or not.</li>
</ul></li>
<li>We can access each pair of sentences in our raw_datasets object by indexing, like with a dictionary:</li>
</ul>
<div id="cell-12" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="a357d389-d651-4845-9a3a-4ab5f0c9200a" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training set</span></span>
<span id="cb9-2">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>]</span>
<span id="cb9-3">train_ds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'sentence1': 'A BMI of 25 or above is considered overweight ; 30 or above is considered obese .',
 'sentence2': 'A BMI between 18.5 and 24.9 is considered normal , over 25 is considered overweight and 30 or greater is defined as obese .',
 'label': 0,
 'idx': 24}</code></pre>
</div>
</div>
<ul>
<li>Here we see the pair of sentences, the label and the index of that pair.</li>
<li>Labels are already <code>int</code> value so we won’t need to preprocess them.</li>
<li>What means <code>label: 0</code>?</li>
</ul>
<div id="cell-14" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e6af8a93-a42d-4cab-a2af-6a582671f412" data-execution_count="12">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># what means each label</span></span>
<span id="cb11-2">train_ds.features</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>{'sentence1': Value(dtype='string', id=None),
 'sentence2': Value(dtype='string', id=None),
 'label': ClassLabel(names=['not_equivalent', 'equivalent'], id=None),
 'idx': Value(dtype='int32', id=None)}</code></pre>
</div>
</div>
<ul>
<li><strong>0</strong> for <code>not_equivalent</code> and <strong>1</strong> for <code>equivalent</code></li>
</ul>
<div id="cell-16" class="cell" data-execution_count="13">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoTokenizer</span>
<span id="cb13-2">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(mdl_ckp)</span>
<span id="cb13-3">train_seq1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(train_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence1'</span>])</span>
<span id="cb13-4">train_seq2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(train_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence2'</span>])</span></code></pre></div></div>
</div>
</section>
<section id="preprocessing-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="preprocessing-the-dataset">Preprocessing the dataset:</h2>
<ul>
<li>We can’t just pass two sequences to the model and expect to get proper prediction about whether these sequences are paraphrased or not.</li>
<li>We need to apply a proper preparation of the data in order feed the model pairs of sequences instead 2 sentences separtly.</li>
<li>This can be done first whith the tokenizer, we create pairs of tokens and compute them the way <strong>BERT</strong> expect:</li>
</ul>
<div id="cell-19" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="ff261c59-ffc7-49af-f94d-b9b991507402" data-execution_count="14">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#example</span></span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is the first sentence'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'this is number 2'</span>)</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>{'input_ids': [101, 2023, 2003, 1996, 2034, 6251, 102, 2023, 2003, 2193, 1016, 102], 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</code></pre>
</div>
</div>
<ul>
<li>The tokenizer output: <code>input_ids</code>, <code>attention_mask</code>, but also <code>token_type_ids</code>.</li>
<li>This feature tells us that the tokenizer is aware that we are dealing with the two sentences, each is represented by either <code>0</code> or <code>1</code></li>
</ul>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="4c8d767b-f50e-4830-e4b9-481a5ca6d0e4" data-execution_count="15">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.token_type_ids</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]</code></pre>
</div>
</div>
<ul>
<li>If we convert each <code>input_ids</code> back to token we can have and idea of what happend:</li>
</ul>
<div id="cell-23" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="612f7db4-bd4b-4468-89d1-d5b06983f539" data-execution_count="16">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">tokenizer.convert_ids_to_tokens(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>])</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>['[CLS]',
 'this',
 'is',
 'the',
 'first',
 'sentence',
 '[SEP]',
 'this',
 'is',
 'number',
 '2',
 '[SEP]']</code></pre>
</div>
</div>
<ul>
<li>So we see the model expects the inputs to be of the form [CLS] sentence1 [SEP] sentence2 [SEP]</li>
<li>Note that not all model’s tokenizer can perform this because the way each model is trained, here <code>BERT</code> have seen pairs and knows how to deal with them.</li>
<li>We can then pass pairs of sentences to the tokenizer like this:</li>
</ul>
<div id="cell-25" class="cell" data-execution_count="17">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">tokenized_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(train_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence1'</span>], train_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence2'</span>], truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
</div>
<ul>
<li>This way of tokenizing the whole dataset is not ideal since it requires huge RAM to store the dataset while we process it.</li>
<li>It will also return dictionary keys: <code>attention_mask</code>, <code>input_ids</code>, <code>token_type_ids</code> and its values.</li>
<li>To work around this problem we will use <code>map()</code> method which will keep data as dataset, and also it will give us more flexibility if we need more preprocessing more than just tokenizing.</li>
<li><code>map()</code> works by applying a function to each element of the dataset, let’s create a function that tokenize pairs of sentences so the map method use it over the whole dataset:</li>
</ul>
<div id="cell-27" class="cell" data-execution_count="18">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> func_tokenize(example):</span>
<span id="cb21-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tokenizer(example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence1'</span>], example[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence2'</span>], truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
</div>
<ul>
<li>This function takes a dictionary (like the items of our dataset) and returns a new dictionary with the <code>keys input_ids</code>, <code>attention_mask</code>, and <code>token_type_ids</code>.</li>
<li>We didn’t include the <code>padding</code> here, because it’s not sufficient to pad the whole dataset based on the longest sentence, when we can do it on the batch level</li>
<li>We can pass the batching as argument in the <code>map()</code> method</li>
</ul>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:113,&quot;referenced_widgets&quot;:[&quot;46458d5861134102aaadabe7c88dd957&quot;,&quot;3fad67799d2a4d77af2509a59ed4f615&quot;,&quot;ffa66330d3694208bad5a00e7a749207&quot;,&quot;13eb168c9d7d4fb6b71576d5b454e2dd&quot;,&quot;be43b8c47e9f43ffa5745769c859987d&quot;,&quot;5e9c30f925d74ec1a0cf9cdcf50c30cd&quot;,&quot;aad8de726fc24b9bade74b602a864ee0&quot;,&quot;d5646a9440554886978e780e1969fa76&quot;,&quot;eae3eab4a4404bf5ba2de1f3e801051c&quot;,&quot;eb986f76dc074813be3c9f5834e9531d&quot;,&quot;05448b1cb2614af2a46d52d911c4d107&quot;,&quot;e6fe50d6fb9e458394344ab5b242b291&quot;,&quot;3ebf8a320fa1478f802690326bf8517a&quot;,&quot;5331d58cd10b4018a48bec6cd352e557&quot;,&quot;27e78fc45d6d4ef3b3ba42a2e04e3013&quot;,&quot;c7dd8de5856e4fcb87e864582a774b4b&quot;,&quot;630d8373eb8b4d61892cb0d5798ec695&quot;,&quot;4a35bc3e338d4c698f1622655841f0a3&quot;,&quot;857395d1d70b47938254d21d6c7f84c9&quot;,&quot;73f5c1803cb44a6295cf81efc025e120&quot;,&quot;a27ffa04752d4a8cb3ea84a46de68cfb&quot;,&quot;9ce01fd731d84ff087e0c6059259168f&quot;,&quot;6c26b28feb094f81a77d0604bdb83d06&quot;,&quot;960d10f1df814f219a122e03660ff42a&quot;,&quot;f792c23eac1d47bfb51ca9d68f68be12&quot;,&quot;8ed9316a6f4b46ae903106aff3eb1eba&quot;,&quot;c3494d65720346498fc13e7e5c9292df&quot;,&quot;50df489c653d4307b6f2d825db8836b8&quot;,&quot;862e6bae698346d5bf111b7379261e6a&quot;,&quot;4168989a5e6940f2bac6d29cab75e35d&quot;,&quot;61a5e696bbb04bb7932a9ded6a90f00f&quot;,&quot;cc93b1ffb7fe422a8e0184e1d0dd2fb0&quot;,&quot;4dd8262938794034bd0b1b0eb9b194ac&quot;]}}" data-outputid="2516b131-48cf-428d-8da3-a3f9944c9861" data-execution_count="19">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">tokenized_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(func_tokenize, batched<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"46458d5861134102aaadabe7c88dd957","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e6fe50d6fb9e458394344ab5b242b291","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6c26b28feb094f81a77d0604bdb83d06","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<ul>
<li><p>Let’s take a look on pair exmaple from the training dataset:</p></li>
<li><p>We get what we expected, the 3 keys representing tokenization process, plus the dictionary key we already have: <code>label</code>, <code>idx</code> and <code>sentence1&amp;2</code>:</p></li>
</ul>
<div id="cell-32" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="3f19cfc9-8d8a-41ae-8a6f-78fd1c5e8e97" data-execution_count="20">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>].keys()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>dict_keys(['sentence1', 'sentence2', 'label', 'idx', 'input_ids', 'token_type_ids', 'attention_mask'])</code></pre>
</div>
</div>
<ul>
<li>Now we have to deal with the padding since we decided to apply it o the batch-level, so each batch will have its own <strong>longest sequence</strong> to pad on.</li>
<li>So we need to do a process called: <strong>Dynamic Padding</strong>.</li>
</ul>
<section id="dynamic-padding" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-padding">Dynamic Padding:</h3>
<ul>
<li>Putting the samples together in a single batch is done throught a function called: <strong><code>Collate function</code></strong>.</li>
<li>Collate function convert our samples to Pytorch tensors and concatenate them.</li>
<li>But this can’t be done without padding, otherwise we will get different shapes for tensors.</li>
<li>As we said before the padding process should be done on batch level, which means each batch will have its samples padded according to the longest sequence otherwise we will get samples a with lot of paddings.</li>
<li>In practice we have to define a collate-function that apply the correct amount of padding to the items of the dataset we want to batch together.</li>
</ul>
<div id="cell-34" class="cell" data-execution_count="21">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataCollatorWithPadding</span>
<span id="cb25-2">data_collator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCollatorWithPadding(tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenizer)</span></code></pre></div></div>
</div>
<ul>
<li>Here we test this collate function on some samples from training set.</li>
<li>We need first to remove columns <code>idx</code>, <code>sentence1</code>, <code>sentence2</code> since we don’t need them.</li>
<li>Let’s have a look at the length of each entry in the batch:</li>
</ul>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="910ec416-f3c5-498b-8fef-f2733f61b768" data-execution_count="22">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb26-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> samples.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'idx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence2'</span>]}</span>
<span id="cb26-3">[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> samples[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]]</span>
<span id="cb26-4"></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>[50, 59, 47, 67, 59, 50, 62, 32]</code></pre>
</div>
</div>
<div id="cell-37" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="e1913d41-cc08-4207-f797-d467aaa45834" data-execution_count="23">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">samples.keys()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>dict_keys(['label', 'input_ids', 'token_type_ids', 'attention_mask'])</code></pre>
</div>
</div>
<ul>
<li>These samples are varying between <code>32</code> and <code>67</code>, so our job here is to pad all the other sequence in this particular in respect to the treshold.</li>
</ul>
<div id="cell-39" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8eb8538d-8526-45eb-bb82-8807b545ecdd" data-execution_count="24">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1">sample_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_collator(samples)</span>
<span id="cb30-2">{k:v.shape <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sample_batch.items()}</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>You're using a BertTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>{'input_ids': torch.Size([8, 67]),
 'token_type_ids': torch.Size([8, 67]),
 'attention_mask': torch.Size([8, 67]),
 'labels': torch.Size([8])}</code></pre>
</div>
</div>
<ul>
<li>Let’s check again if our <code>input_ids</code> have the same length:</li>
</ul>
<div id="cell-41" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="eba5e8af-d2b2-46fb-b55c-0000af95e66f" data-execution_count="25">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sample_batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_ids'</span>]]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>[67, 67, 67, 67, 67, 67, 67, 67]</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="fine-tuning-a-model-with-the-trainer-api" class="level1">
<h1>Fine-tuning a model with the Trainer API:</h1>
<ul>
<li>We can use the <code>Trainer</code> class to fine-tune any pretrained model on our dataset.</li>
<li>Now we need to prepare the enviroment for <code>Train.train()</code> which will be done on <strong>GPU</strong>.</li>
<li>But first we have to define <code>TrainingArguments</code> that contains all the <em>Hyperparameters</em> the <strong><code>Trainer</code></strong> will use for the training and evaluation.</li>
<li>We just need to provide where the model will be saved, as long as the checkpoints, everything else is set as defaults which will work for learning purposes.</li>
</ul>
<div id="cell-43" class="cell" data-execution_count="26">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_folder'</span></span></code></pre></div></div>
</div>
<div id="cell-44" class="cell" data-execution_count="27">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TrainingArguments</span>
<span id="cb36-2"></span>
<span id="cb36-3">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output_dir)</span></code></pre></div></div>
</div>
<ul>
<li>For this dataset we will use <code>AutoModelForSequenceClassification</code> class with 2 labels:</li>
</ul>
<div id="cell-46" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="be3e8493-ca90-454d-c438-687fd0cc58b9" data-execution_count="28">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForSequenceClassification</span>
<span id="cb37-2"></span>
<span id="cb37-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_ckp, num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.</code></pre>
</div>
</div>
<ul>
<li>The BERT model we instantiated now will be the back-bone for our process, but we will delete the head and add the <code>AutoModelForSequenceClassification</code> head that fit our situation.</li>
<li>The weights are initialized randomly for the head, which means we need to train them from scratch which is exactly what we will do:</li>
</ul>
<div id="cell-48" class="cell" data-execution_count="29">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Trainer</span>
<span id="cb39-2"></span>
<span id="cb39-3">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(</span>
<span id="cb39-4">    model,</span>
<span id="cb39-5">    training_args,</span>
<span id="cb39-6">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>],</span>
<span id="cb39-7">    eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>],</span>
<span id="cb39-8">    data_collator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_collator,</span>
<span id="cb39-9">    tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenizer</span>
<span id="cb39-10">)</span></code></pre></div></div>
</div>
<ul>
<li>When the tokenizer is passed as argument like this, usually we won’t need to define <code>data_collator</code> since it already defined with <code>DataCollatorWithPadding</code>, and the <code>Trainer</code> will retrieve it from the tokenizer anyway.</li>
<li>Now we fine-tune the model on our dataset:</li>
</ul>
<div id="cell-50" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:173}}" data-outputid="d2123981-7055-4655-aa19-5fd27db8a7a8" data-execution_count="30">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">trainer.train()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
      
      <progress value="1377" max="1377" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [1377/1377 03:21, Epoch 3/3]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Step</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>500</td>
<td>0.518800</td>
</tr>
<tr class="even">
<td>1000</td>
<td>0.272700</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>TrainOutput(global_step=1377, training_loss=0.3197195403543, metrics={'train_runtime': 204.8739, 'train_samples_per_second': 53.711, 'train_steps_per_second': 6.721, 'total_flos': 405626802939840.0, 'train_loss': 0.3197195403543, 'epoch': 3.0})</code></pre>
</div>
</div>
<ul>
<li>One thing we didn’t include in our Trainer is the evaluating strategy.</li>
<li>We don’t have an idea about how good or bad our nodel because:
<ul>
<li>We didn’t tell the <code>Trainer</code> to evaluate during training by setting <code>evaluation_strategy</code> to either “steps” (evaluate every eval_steps) or “epoch” (evaluate at the end of each epoch).</li>
<li>We didn’t provide the <code>Trainer</code> with a <code>compute_metrics()</code> function to <strong>calculate a metric during said evaluation</strong> (otherwise the evaluation would just have printed the loss, which is <strong>not</strong> a very intuitive number).</li>
</ul></li>
</ul>
<section id="evaluation" class="level2">
<h2 class="anchored" data-anchor-id="evaluation">Evaluation:</h2>
<ul>
<li>First we need to build a <strong><code>compute_metrics()</code></strong> function in order to use it in the next training.</li>
<li>The function takes a <code>EvalPrediction</code> object as argument, which is basically a named tuple with:
<ul>
<li><code>predictions</code> field</li>
<li><code>label_ids</code> field</li>
</ul></li>
<li>Here we get some predictions from our model:</li>
</ul>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:34}}" data-outputid="496c79ae-81c1-45b2-8c81-af5264ef7ede" data-execution_count="31">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.predict(tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>])</span>
<span id="cb42-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predictions.predictions.shape, predictions.label_ids.shape)</span></code></pre></div></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-stdout">
<pre><code>(408, 2) (408,)</code></pre>
</div>
</div>
<ul>
<li>The output of the <code>predict()</code> method is another named tuple with three fields: <code>predictions</code>, <code>label_ids</code>, and <code>metrics</code>.</li>
<li>Metrics represent the loss on the dataset, as well as the time metrics, how much it takes the predictions on total average.</li>
<li>As we see here, predictions is a two-dimensional array with shape 408 x 2 (408 being the number of elements in the dataset we used).</li>
<li>It represent the logits for each element of the dataset we passed to <code>predict()</code> .</li>
<li>To transform them into predictions that we can compare to our labels, we need to take the index with the maximum value on the second axis:</li>
</ul>
<div id="cell-55" class="cell" data-execution_count="32">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb44-2"></span>
<span id="cb44-3">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(predictions.predictions, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></div>
</div>
<ul>
<li>Now we have ot build our <code>compute_metrics()</code> function in order to compare the predictions of the model with the actual labels.</li>
<li>We will use the metrics from the huggingFace library **’evaluate<code>**, we just need to loa the meetrics associated with the dataset we used</code>mrpc`:</li>
</ul>
<div id="cell-57" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:66,&quot;referenced_widgets&quot;:[&quot;f30865b3ae3547aebfd5b167072a4817&quot;,&quot;b9aa3fea22d14d4682eeabca69fdf153&quot;,&quot;9c33c06752ad44709ec795dff2808cf1&quot;,&quot;53f6115d68a54f3989fcea48f505d32d&quot;,&quot;e218061d2c204197af4f2c3c5a84fa9e&quot;,&quot;04c12fdb4ffa40d0933202836a14ddcb&quot;,&quot;fee5037d6a604e59bae83bc8ac15d041&quot;,&quot;fff5fc95790f49bfa89dd9fa1e0ca1cb&quot;,&quot;f711e62b27b84318b20dbda673b7ef0c&quot;,&quot;816b50395f3546d0b7ea0cd818e0862d&quot;,&quot;5877a78a7fd14265abf2bc61c6023b42&quot;]}}" data-outputid="db294ab0-39ea-4ad4-a62b-c3f53378e211" data-execution_count="33">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> evaluate</span>
<span id="cb45-2">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mrpc'</span>)</span>
<span id="cb45-3">metric.compute(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds, references<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions.label_ids)</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f30865b3ae3547aebfd5b167072a4817","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>{'accuracy': 0.8529411764705882, 'f1': 0.8993288590604027}</code></pre>
</div>
</div>
<ul>
<li>Now let’s wrap everething in a single function:</li>
</ul>
<div id="cell-59" class="cell" data-execution_count="38">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_metrics(eval_preds):</span>
<span id="cb47-2">  metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mrpc'</span>)</span>
<span id="cb47-3">  logits, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eval_preds</span>
<span id="cb47-4">  predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(logits, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> metric.compute(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions, references<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels)</span></code></pre></div></div>
</div>
<ul>
<li>Now let’s use it the training loop so it report all the metrics at the end of each epoch:</li>
</ul>
<div id="cell-61" class="cell" data-execution_count="40">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainingArguments(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test-train'</span>, evaluation_strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>)</span>
<span id="cb48-2">trainer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Trainer(</span>
<span id="cb48-3">    model,</span>
<span id="cb48-4">    training_args,</span>
<span id="cb48-5">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>],</span>
<span id="cb48-6">    eval_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenized_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>],</span>
<span id="cb48-7">    data_collator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_collator,</span>
<span id="cb48-8">    tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer,</span>
<span id="cb48-9">    compute_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_metrics</span>
<span id="cb48-10">)</span></code></pre></div></div>
</div>
<div id="cell-62" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:222}}" data-outputid="1754d418-8066-40f7-ffcc-ddb23cde1894" data-execution_count="41">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1">trainer.train()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
      
      <progress value="1377" max="1377" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [1377/1377 03:39, Epoch 3/3]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Epoch</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
<th data-quarto-table-cell-role="th">Validation Loss</th>
<th data-quarto-table-cell-role="th">Accuracy</th>
<th data-quarto-table-cell-role="th">F1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>No log</td>
<td>0.681234</td>
<td>0.843137</td>
<td>0.893333</td>
</tr>
<tr class="even">
<td>2</td>
<td>0.162700</td>
<td>0.998050</td>
<td>0.840686</td>
<td>0.892562</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.051500</td>
<td>1.032399</td>
<td>0.852941</td>
<td>0.898305</td>
</tr>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>TrainOutput(global_step=1377, training_loss=0.08403856129254997, metrics={'train_runtime': 219.6964, 'train_samples_per_second': 50.087, 'train_steps_per_second': 6.268, 'total_flos': 405626802939840.0, 'train_loss': 0.08403856129254997, 'epoch': 3.0})</code></pre>
</div>
</div>
<ul>
<li>In this section we fine-tuned a model on a dataset by using the <code>Trainer</code> API, which minimize the work we have to since it works out of the box.</li>
<li><code>Trainer</code> can be used in most NLP tasks, but what if we need to do everything manualy by using pure <strong>Pytorch</strong>?</li>
<li>In next section we will build the same <code>Trainer</code> by hand.</li>
</ul>
<p># A full training</p>
<ul>
<li>In this section we will try to achieve the same results we had with <code>Trainer</code> API.</li>
<li>Since we already done with the preprocessing of the dataset, we just have to to some tweaks regarding some columns of the dataset we won’t use:</li>
</ul>
<div id="cell-66" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f229d810-9d2c-4443-de07-61d17143e5c8" data-execution_count="42">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">tokenized_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenized_datasets.remove_columns([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentence2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'idx'</span>])</span>
<span id="cb51-2">tokenized_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenized_ds.rename_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>)</span>
<span id="cb51-3">tokenized_ds.set_format(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'torch'</span>)</span>
<span id="cb51-4">tokenized_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>].column_names</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>['labels', 'input_ids', 'token_type_ids', 'attention_mask']</code></pre>
</div>
</div>
<ul>
<li>Now we need to define the <code>DataLoader</code> that will help us to feed the model the dataset in batches:</li>
</ul>
<div id="cell-68" class="cell" data-execution_count="45">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb53-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span></code></pre></div></div>
</div>
<div id="cell-69" class="cell" data-execution_count="46">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(tokenized_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>], shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_collator)</span>
<span id="cb54-2">eval_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(tokenized_ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>], batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_collator)</span></code></pre></div></div>
</div>
<ul>
<li>Check the training data loader:</li>
</ul>
<div id="cell-71" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="b7eac9d3-c0b3-494a-ec06-59dae40f1cce" data-execution_count="48">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_dataloader:</span>
<span id="cb55-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb55-3">{k:v.shape <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch.items()}</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>{'labels': torch.Size([8]),
 'input_ids': torch.Size([8, 70]),
 'token_type_ids': torch.Size([8, 70]),
 'attention_mask': torch.Size([8, 70])}</code></pre>
</div>
</div>
<ul>
<li>Make sure that everything will go smoothly during the training , we pass a batch to the model:</li>
</ul>
<div id="cell-73" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d0aa96c0-c890-4992-e041-6803e2b2b061" data-execution_count="50">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForSequenceClassification.from_pretrained(mdl_ckp, num_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb57-2">output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch)</span>
<span id="cb57-3">output.loss, output.logits.shape</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>(tensor(0.5792, grad_fn=&lt;NllLossBackward0&gt;), torch.Size([8, 2]))</code></pre>
</div>
</div>
<ul>
<li>Everything looks fine, before we build the training loop we just need 2 things:
<ul>
<li>optimizer</li>
<li>learning-rate scheduler</li>
</ul></li>
<li>Sonce we want to replicate the <code>Trainer</code> and its defaults parameters, the optimizer used by <code>Trainer</code> is <strong>Adam</strong>, we will use a slightly different optimizer <strong><code>AdamW</code></strong>:</li>
</ul>
<div id="cell-75" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="77ccbf01-c2e4-495c-8c9d-83ed72dc948a" data-execution_count="51">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-5</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/transformers/optimization.py:411: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(</code></pre>
</div>
</div>
<ul>
<li>Finally the learning-rate scheduler used by the <code>Trainer</code> is just a simple linear decay from the highest learning-rate <code>5e-5</code> to <code>0</code>.</li>
<li>In order to define it we just need to know the number of training steps.</li>
</ul>
<div id="cell-77" class="cell" data-execution_count="55">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_scheduler</span>
<span id="cb62-2"></span>
<span id="cb62-3">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb62-4">num_training_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)</span>
<span id="cb62-5">lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_scheduler(</span>
<span id="cb62-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>,</span>
<span id="cb62-7">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimizer,</span>
<span id="cb62-8">    num_warmup_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb62-9">    num_training_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_training_steps</span>
<span id="cb62-10">)</span></code></pre></div></div>
</div>
<ul>
<li>As we mension before, <code>Trainer</code> works out of the box with any set of hardware we have, but now we have to set the GPU as device during the training:</li>
</ul>
<div id="cell-79" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="3d9b57f6-c7c6-4b77-b1e6-6f81367491ae" data-execution_count="52">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb63-2">model.to(device)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>BertForSequenceClassification(
  (bert): BertModel(
    (embeddings): BertEmbeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (token_type_embeddings): Embedding(2, 768)
      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (encoder): BertEncoder(
      (layer): ModuleList(
        (0-11): 12 x BertLayer(
          (attention): BertAttention(
            (self): BertSelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
            (output): BertSelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (intermediate): BertIntermediate(
            (dense): Linear(in_features=768, out_features=3072, bias=True)
            (intermediate_act_fn): GELUActivation()
          )
          (output): BertOutput(
            (dense): Linear(in_features=3072, out_features=768, bias=True)
            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
        )
      )
    )
    (pooler): BertPooler(
      (dense): Linear(in_features=768, out_features=768, bias=True)
      (activation): Tanh()
    )
  )
  (dropout): Dropout(p=0.1, inplace=False)
  (classifier): Linear(in_features=768, out_features=2, bias=True)
)</code></pre>
</div>
</div>
<section id="training-loop" class="level3">
<h3 class="anchored" data-anchor-id="training-loop">Training Loop:</h3>
<ul>
<li>Now we have all the ingredients to start out training loop:</li>
</ul>
<div id="cell-82" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb65-2">progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_training_steps))</span>
<span id="cb65-3"></span>
<span id="cb65-4">model.train()</span>
<span id="cb65-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb65-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_dataloader:</span>
<span id="cb65-7">    batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:v.to(device) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch.items()}</span>
<span id="cb65-8">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch)</span>
<span id="cb65-9">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.loss</span>
<span id="cb65-10">    loss.backward()</span>
<span id="cb65-11"></span>
<span id="cb65-12">    optimizer.steps()</span>
<span id="cb65-13">    lr_scheduler.steps()</span>
<span id="cb65-14">    optimizer.zero_grad()</span>
<span id="cb65-15">    progress_bar.update(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div></div>
</div>
</section>
<section id="evaluating-loop" class="level3">
<h3 class="anchored" data-anchor-id="evaluating-loop">Evaluating Loop:</h3>
<ul>
<li>Evaluation loop is basically the same as <code>compute_metrics()</code> function we built before:</li>
</ul>
<div id="cell-84" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1">metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mrpc'</span>)</span>
<span id="cb66-2">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb66-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> eval_dataloader:</span>
<span id="cb66-4">  batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:v.to(device) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch.itmes()}</span>
<span id="cb66-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb66-6">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>batch)</span>
<span id="cb66-7"></span>
<span id="cb66-8">  logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.logits</span>
<span id="cb66-9">  predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(logits, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb66-10">  metric.add_batch(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predictions, references<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] )</span>
<span id="cb66-11">metric.compute()</span></code></pre></div></div>
</div>
<p>To <strong>recap</strong>, in this chapter we :</p>
<pre><code>- Learned about datasets in the Hub
- Learned how to load and preprocess datasets, including using dynamic padding and collators
- Implemented your own fine-tuning and evaluation of a model
- Implemented a lower-level training loop</code></pre>


</section>
</section>
</section>

 ]]></description>
  <category>Hugging-Face</category>
  <category>NLP</category>
  <category>LLMs</category>
  <category>Pytorch</category>
  <category>Datasets</category>
  <category>Swag</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_3/HuggungFace_NLP_course_Notes_3.html</guid>
  <pubDate>Wed, 18 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_3/nlp-course.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Hugging Face Course Notes: Chapter1</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/HuggingFace_NLP_course_Notes.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>In this series I wiil cover notes I took from the Hugging Face NLP course with code snippets and examples.</p>
<section id="course-overview" class="level2">
<h2 class="anchored" data-anchor-id="course-overview">Course Overview:</h2>
<ul>
<li>In this course we will have 9 Chapters</li>
<li>From chapter 1 to 4 we will cover the main conceptsof <code>**Transformers**</code> library:
<ul>
<li>How transformer models works</li>
<li>How to use a model from Hugging Face <code>Hub</code></li>
<li>How to fine-tune it on your dataset and share the result</li>
</ul></li>
<li>Chapter 5 to 8 covers the basics of <strong>HF</strong> <code>Datasets</code> and <code>Tokenizer</code></li>
</ul>
</section>
</section>
<section id="natural-lannguage-processing" class="level1">
<h1>Natural Lannguage Processing:</h1>
<ul>
<li><strong>NLP</strong> is the field of linguistic and Machine Learning where we focus of understanding everything related to human language</li>
<li>NLP use cases:
<ul>
<li>Classifying Whole sentence:
<ul>
<li>sentiments of a review/tweets</li>
<li>detecting spam</li>
<li>measuring the correctness of a sentence grammatically</li>
<li>relation between 2 sentence</li>
</ul></li>
<li>Classifying each word in a sentence:
<ul>
<li>classifying the components of a sentence (noun, verb..)</li>
</ul></li>
<li>Generating Text context</li>
<li>Extracting answers from text</li>
</ul></li>
</ul>
<section id="transformers-what-can-they-do" class="level3">
<h3 class="anchored" data-anchor-id="transformers-what-can-they-do">Transformers: What can they do?</h3>
<ul>
<li>Many companies uses transformers model to solve different problems relating to text and words</li>
<li>Transformers library is an open source tool to share and download models to taclle different kind of problems: Text, Audio, VIT (vision-transformer)..</li>
<li>The Transformers Library provides the functionality to create and use these shared model</li>
</ul>
</section>
<section id="pipeline-function" class="level3">
<h3 class="anchored" data-anchor-id="pipeline-function">Pipeline Function:</h3>
<ul>
<li>Pipeline is the most High-Level API of the Transformers library</li>
<li>It’s an end-2-end object That provides all necessary steps in order to perform an NLP task on a given text <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/HF_1_1.png" class="img-fluid" alt="Pipeline"></li>
<li>Pre-precessing steps requires tranformming text into it’s numerical representation, so the model can process it</li>
<li>Pipeline can perform many tasks:
<ul>
<li>Sentiment_analysis: Analys sentiment of a text:</li>
</ul></li>
</ul>
<div id="cell-5" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first we need import some dependencies</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install transformers</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span></code></pre></div></div>
</div>
<div id="cell-6" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sentiment-analysis'</span>)</span>
<span id="cb2-2">classifier(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I slept well'</span>)</span></code></pre></div></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/sentiment_analys.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption>
</figure>
</div>
<ul>
<li>Here we see that we get a sentiment score for the sentence we provide</li>
<li>Although we didn’t provide any model or pre-processing, the pipeline did all the work for us</li>
<li>Here’s some more tasks:
<ul>
<li>Zero-shot-Classificatiom: label the topic of a text</li>
</ul></li>
</ul>
<div id="cell-9" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zero-shot-classification'</span>)</span>
<span id="cb3-2">classifier(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Today is rainy'</span>, candidate_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'politics'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weather'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sport'</span>])</span></code></pre></div></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/topics.png" class="img-fluid figure-img"></p>
<figcaption>output</figcaption>
</figure>
</div>
<pre><code>     - Mask filling:</code></pre>
<div id="cell-12" class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">unmasker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fill-mask'</span>)</span>
<span id="cb5-2">unmasker(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I should take my &lt;mask&gt; with me, it may rain!'</span>, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/fill_mask.png" class="img-fluid figure-img"></p>
<figcaption>outputs</figcaption>
</figure>
</div>
<ul>
<li>There’s many pipeline tasks:
<ul>
<li>feature-extraction (get the vector representation of a text)</li>
<li>fill-mask</li>
<li>ner (named entity recognition)</li>
<li>question-answering</li>
<li>sentiment-analysis</li>
<li>summarization</li>
<li>text-generation</li>
<li>translation</li>
<li>zero-shot-classification</li>
</ul></li>
</ul>
</section>
<section id="general-architecture" class="level3">
<h3 class="anchored" data-anchor-id="general-architecture">General Architecture:</h3>
<ul>
<li>Transformer model is usually composed of 2 blocks:
<ul>
<li><strong>Encoder</strong>: the encoder receives an input and builds representation of it</li>
<li><strong>Decoder</strong>: Uses the encoder representation along with other inputs to generate a target sequence <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/HF_1_2.png" class="img-fluid" alt="General_Architecture"></li>
</ul></li>
<li>Although, each of this parts can be used independently</li>
<li>Encoder_only Models: For tasks that requires understanding of the input</li>
<li>Decoder_only Models: for generative tasks</li>
</ul>
</section>
<section id="attention-layer" class="level3">
<h3 class="anchored" data-anchor-id="attention-layer">Attention Layer:</h3>
<ul>
<li>the most important part of the transformer architecture is the attention concept</li>
<li>The attention layer helps the model to pay more attention to some words while processing sentences and performing tasks</li>
</ul>
</section>
<section id="architecture-vs-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="architecture-vs-checkpoint">Architecture VS Checkpoint:</h3>
<ul>
<li>Architceture: is the skelton of the model, the defition of each and each operation that happens within the model</li>
<li>Chekcpoint: Are the weights that will be loaded in a given architecture</li>
</ul>
</section>
<section id="encoder-models" class="level3">
<h3 class="anchored" data-anchor-id="encoder-models">Encoder Models:</h3>
<ul>
<li>Encoder architecture was only the encoder block of a transformer architecture</li>
<li>After creating embeddings vectors of the input sentence, the attention layer receives it <img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/HF_1_3.png" class="img-fluid" alt="Encoder"></li>
<li>First we process our sentence into the <code>Embedding</code> layer, which will output some numerical representation of each word <code>V1</code>, <code>V2</code>, <code>V3</code></li>
<li>Then the <code>Encoder</code> block will perform the attention mechanism on each word vector, and output vectors that has information related to their context <code>Va1</code>, <code>Va2</code>, <code>Va3</code></li>
</ul>
</section>
<section id="decoder-models" class="level3">
<h3 class="anchored" data-anchor-id="decoder-models">Decoder Models:</h3>
<ul>
<li>In general the decoder works exactly like encoder: turning words into word vectors or what will call later <strong>feature tensors</strong></li>
<li>The main difference between the 2 blocks is the attention mechanism
<ul>
<li>the decoder utilize what called the <strong>masked attention</strong></li>
<li>masked attention means basically masking the next word and allowing the decoder to only access previous and current words</li>
</ul></li>
<li>The pretraining of decoder models usually revolves around predicting the next word in the sentence.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Hugging-Face</category>
  <category>NLP</category>
  <category>LLMs</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/HuggingFace_NLP_course_Notes.html</guid>
  <pubDate>Tue, 17 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/HuggingFace_1/nlp-course.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Kaggling Tutorial #0: Download A Dataset from Kaggle Using API-Key</title>
  <dc:creator>Ismail TG</dc:creator>
  <link>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Kaggling_0/Kaggling_Tutorial__0.html</link>
  <description><![CDATA[ 





<section id="how-to-download-dataset-from-kaggle-into-colab-notebook" class="level1">

<ul>
<li>In this mini tutorial we will create a <strong>colab notebook</strong> and download a <strong>Kaggle dataset</strong> using Kaggle API-key.</li>
<li>Having the possibility to work on different Free computing platform, gives us a wide choices to do multiple prototyping in parallel.</li>
</ul>
</section>
<section id="getting-the-api-key" class="level1">
<h1>Getting the API-Key:</h1>
<ul>
<li>First we need to get <strong>API-Key</strong> form Kaggle website: <code>settings</code>:
<ul>
<li><a href="https://www.kaggle.com/settings">Link</a></li>
</ul></li>
<li>Click on <strong><code>Create New Token</code></strong>, it will download a <strong>json</strong> file: <code>kaggle.json</code><br>
<img src="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Kaggling_0/pic0.png" class="img-fluid" alt="API_Key"></li>
<li>Then we need to upload this file into colab notebook where we will work with the dataset</li>
<li>Here we create a new directory <code>kaggle</code> and copy the <code>kaggle.json</code> inside:</li>
</ul>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle</span></code></pre></div></div>
</div>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cp kaggle.json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle</span></code></pre></div></div>
</div>
<ul>
<li>Now we need to modify the permissions and access mode of <code>kaggle.json</code>:</li>
</ul>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>chmod <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>.kaggle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kaggle.json</span></code></pre></div></div>
</div>
</section>
<section id="downloading-the-dataset" class="level1">
<h1>Downloading the Dataset:</h1>
<ul>
<li>Since we have all ingredients, we can now download our dataset from kaggle:</li>
</ul>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="8bdfc3bf-8361-4a2f-a243-dee78efe7300" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> kaggle competitions download linking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>writing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>processes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>writing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>quality</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading linking-writing-processes-to-writing-quality.zip to /content
 90% 97.0M/108M [00:00&lt;00:00, 137MB/s]
100% 108M/108M [00:00&lt;00:00, 135MB/s] </code></pre>
</div>
</div>
<ul>
<li>The file we get after this command is <code>.zip</code> file, which contains all files and datasets we will work with</li>
<li>In order to unzip this file we will use <code>zipfile</code>:</li>
</ul>
<div id="cell-10" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="706ef04a-0b58-40b9-aefe-1c01cd4b7a9a" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> zipfile <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ZipFile</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linking-writing-processes-to-writing-quality.zip'</span></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ZipFile(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>:</span>
<span id="cb6-4"></span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list all the contents of the zip file</span></span>
<span id="cb6-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>.printdir()</span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract all files</span></span>
<span id="cb6-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extraction...'</span>)</span>
<span id="cb6-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>.extractall()</span>
<span id="cb6-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done!'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>File Name                                             Modified             Size
sample_submission.csv                          2023-10-02 17:22:24           48
test_logs.csv                                  2023-10-02 17:22:24          398
train_logs.csv                                 2023-10-02 17:22:30    485679766
train_scores.csv                               2023-10-02 17:23:10        32132
extraction...
Done!</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion:</h1>
<ul>
<li>We succefully download a dataset from Kaggle using API-Key</li>
<li>We can take it from here and apply all kind of data manipulation, EDA, training model on it …</li>
</ul>


</section>

 ]]></description>
  <category>Kaggle</category>
  <category>Colab</category>
  <guid>https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Kaggling_0/Kaggling_Tutorial__0.html</guid>
  <pubDate>Tue, 17 Oct 2023 23:00:00 GMT</pubDate>
  <media:content url="https://iSmailTG.github.io/Lifelong-Learner.github.io/posts/Kaggling_0/kaggle.png" medium="image" type="image/png" height="66" width="144"/>
</item>
</channel>
</rss>
